question_id,question_details
37725913-3d01-4e63-ae31-8d88f4e1d6bc,"You are given an incomplete **Item** class.    

Go through the comments in the prefilled code to implement the Item class with the described attributes and methods.

**Points to Note**  
  
 - The output of the testcase **Checking Default Tests** is given by the `default_test` function in the prefilled code.
 - This Coding question does not have the usual input/output testcases. The class defined by you will be tested internally whether the attributes are present or not. So in testcases results you will be shown the rough description of the tests that will be verified.

Solution Code:class Item:
    def __init__(self, name, price, category):
        if price <= 0:
            raise ValueError(""Invalid value for price, got {}"".format(price))
        self.name = name
        self.price = price
        self.category = category

    def get_detail(self):
        return ""{}@{}-{}"".format(self.name, self.price, self.category)


def default_test():
    item = Item(name=""Oreo Biscuits"", price=30, category=""Food"")
    print(item.name)  # prints ""Oreo Biscuits""
    print(item.price)  # prints '30'
    print(item.category)  # prints ""Food""
    print(item.get_detail())  # prints ""Oreo Biscuits@30-Food"""
fcf9916b-5cb4-49e0-baa7-ce4b4cda07ab,"Given a string, write a program to double all the characters in the given string.<hr><b>Input</b><br/><br/>The input will be a single line containing a string.<hr><b>Output</b><br/><br/>The output should be a single line containing a new string with all the characters doubled in the given string.<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;The&quot;, the output should be &quot;TThhee&quot;.

Solution Code:word = input()

new_word = """"
for character in word:
 new_word = new_word + (character*2)

print(new_word)"
81860568-b701-455c-a818-171be4f37362,"Write a program that reads the student's marks as input and prints PASS or FAIL.</b>If the student has scored more than 50, print PASS.<br/>In all other cases print FAIL.<hr><b>Input</b><br/><br/>The input will be a single line containing a number.<hr><b>Output</b><br/><br/>The output should be a single line containing PASS or FAIL.<hr><b>Explanation</b><br/><br/>In the given example, the student's marks are 85, which is more than 50, so the result should be PASS.<br/>Similarly, if the marks are 45, the result should be FAIL.

Solution Code:marks = int(input())
if marks > 50:
 print(""PASS"")
else:
 print(""FAIL"")"
bc4077cc-a90f-44a0-8440-ccda2d4083f3,"Given the length and breadth of a box, check if it is a Rectangle or Square.<hr><b>Input</b><br/><br/>The first line of input will contain the length of the box.<br/>The second line of input will contain the breadth of the box.<hr><b>Output</b><br/><br/>If the given length and breadth are equal, print &quot;Square&quot;. In all other cases, print &quot;Rectangle&quot;.<hr><b>Explanation</b><br/><br/>For example, if the given length is 6, and the given breadth is 6, the length and breadth are equal. So the output should be &quot;Square&quot;.<br/>Similarly, if the given length is 5, and the breadth is 10, the length and breadth are not equal. So the output should be &quot;Rectangle&quot;.

Solution Code:length = int(input())
breadth = int(input())
if length == breadth:
 print(""Square"")
else:
 print(""Rectangle"")"
671f2c3c-3179-4fdc-be90-72d2612a6ca5,"Write a program to check if the given two numbers are equal.<hr><b>Input</b><br/><br/>The first line of input contains a number.<br/>The second line of input contains a number.<hr><b>Output</b><br/><br/>If the given numbers are equal, print &quot;Equal&quot;. In all other cases, print &quot;Not Equal&quot;.<hr><b>Explanation</b><br/><br/>For example, if the first number is 5 and the second number is 5. Since both the given numbers are equal. So the output should be &quot;Equal&quot;.<br/>Whereas, if the first number is 10 and the second number is 5, both the numbers are not equal. So the output should be &quot;Not Equal&quot;.

Solution Code:first_number = int(input())
second_number = int(input())
if first_number == second_number:
 print(""Equal"")
else:
 print(""Not Equal"")"
afadbb96-c3b3-4a92-ae82-7fffb284dafb,"Write a program that reads the age of a person and checks if the age of the person is **greater than or equal to 18** for eligibility to vote.

Print **Eligible** if the age of the person is **greater than or equal to 18**, otherwise print **Not Eligible**.

---

#### Input

The input will be a single line containing an integer.

---

#### Output

The output should be a single line containing a string. **Eligible** should be printed if the age of the person is **greater than or equal to 18**, otherwise **Not Eligible** should be printed.

---

#### Explanation

For example, 

If the given age of a person is **15**, the output should be **Not Eligible** as **15** is not greater than or equal to **18**.

If the given age of a person is **21**, the output should be **Eligible** as **21** is greater than **18**.

Solution Code:age = int(input())

if age >= 18:
 print(""Eligible"")
else:
 print(""Not Eligible"")"
35f98200-e8ef-43ca-bde1-cf7213459fd3,"Write a program that prints a simple triangle using star (\*).

---

#### Explanation

Print a star on the first line and two stars on the second line.

<MultiLineNote>
There is a space after every star
</MultiLineNote>

Solution Code:print(""* "")
print(""* "" * 2)"
668f2ab1-abc7-49da-a7bb-057e0d124c16,"A list `L` is given in the prefilled code.

Given a number `N`, write a program that prints the list by repeating the prefilled list `N` times.

```
L = [1, ""two"", ""3"", 4.0]
```

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing a list obtained by repeating the prefilled list `N` times.

---

#### Explanation

For example, if the given number is `N = 2`,

- The elements in the given prefilled list `L` are **1**, **""two""**, **""3""**, and **4.0**.
- The prefilled list should be repeated **2** times.
- After repeating the prefilled list, the elements in the list are **1**, **""two""**, **""3""**, **4.0**, **1**, **""two""**, **""3""**, and **4.0**.

The output should be,

```
[1, 'two', '3', 4.0, 1, 'two', '3', 4.0]
```


Solution Code:L = [1, ""two"", ""3"", 4.0]

number_of_times = int(input())

resultant_list = L * number_of_times

print(resultant_list)"
37f5f67a-f211-442d-babe-10e265bd5102,"Given a string, write a program to convert the string into a list.<hr><b>Input</b><br/><br/>The input will be a single line containing a string.<hr><b>Output</b><br/><br/>The output should be a single line containing a list with all the characters in the given string.<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;Python&quot;, the output should be <br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">['P', 'y', 't', 'h', 'o', 'n']
</code></pre>

Solution Code:word = input()
word_list = list(word)
print(word_list)"
b5559b53-cb66-4779-a6a7-5fb24cb24417,"For this problem, the prefilled code will contain a list. Write a program to print the element at the given index location.<hr><b>Input</b><br/><br/>The first line of input will contain a positive integer.<hr><b>Output</b><br/><br/>The output should be a single line containing the list element at the given index.<hr><b>Explanation</b><br/><br/>For example, if the given index location is 4, the element at index 4 in the list is &quot;Green&quot;. So the output should be &quot;Green&quot;.

Solution Code:color_list = [""Red"", ""Orange"", ""Yellow"", ""Pink"", ""Green"", ""Blue"", ""Purple"", ""Black"", ""White""]

index = int(input())
print(color_list[index])"
098348b7-f67a-4a27-9ba6-041d360f05fe,"Write a program that reads an **M** x **N** matrix and prints the perimeter of the matrix.

  <MultiLineNote>
  The perimeter of the matrix is defined as the sum of all the elements on the four edges of the matrix.
  </MultiLineNote>

  ---

  #### Input

  The first line of input contains space-separated integers representing `M` and `N` respectively.

  The next `M` lines of input contain `N` space-separated integers representing the matrix.

  ---

  #### Output

  The output should be a single line containing an integer obtained by adding all the elements on the four edges of the matrix.

  ---

  #### Explanation

  **Test Case:** If the given `M = 3` and `N = 4`, the matrix is as follows:

  ```
  1 2 3 4
  5 6 7 8
  9 10 11 12
  ```

  1, 2, 3, 4, 8, 12, 11, 10, 9, and 5 representing all the elements on the four edges of the matrix.

  Therefore, the perimeter of the matrix is

  ```
  1 + 2 + 3 + 4 + 8 + 12 + 11 + 10 + 9 + 5 = 65
  ```

  The output should be **65**.

Solution Code:def get_perimeter_of_matrix(matrix, rows, columns):
 sum_of_perimeter = 0
 for i in range(rows):
 for j in range(columns):
 if((i == 0) or (i == rows - 1) or (j == 0) or (j == columns - 1)):
 sum_of_perimeter += matrix[i][j]
 return sum_of_perimeter

def read_matrix(rows):
 matrix = []
 for i in range(rows):
 row = list(map(int, input().split()))
 matrix.append(row)
 return matrix

def main():
 rows, columns = map(int, input().split())
 matrix = read_matrix(rows)
 perimeter_of_matrix = get_perimeter_of_matrix(matrix, rows, columns)
 print(perimeter_of_matrix)

main()"
e6f05098-c81c-461b-a246-0ab1f615ef5b,"You are given numbers. Each number is concatenated with its power and the power is a single-digit integer.

Write a program that reads the space-separated numbers and calculates the powers of each number and prints its sum.

<MultiLineNote>

Sum = X<sub>1</sub><sup>pow<sub>1</sub></sup> + X<sub>2</sub><sup>pow<sub>2</sub></sup> + X<sub>3</sub><sup>pow<sub>3</sub></sup> + X<sub>4</sub><sup>pow<sub>4</sub></sup> + ... + X<sub>N</sub><sup>pow<sub>N</sub></sup>

Where X<sub>i</sub> is concatenated with pow<sub>i</sub>, and pow<sub>i</sub> is a single-digit integer.

</MultiLineNote>

---

#### Input

The input will be a single line containing space-separated integers representing the numbers.

---

#### Output

The output should be a single line containing an integer obtained by adding each number multiplied by its power.

---

#### Explanation

**Test Case: 1** If the given `numbers = 25`

Where, X<sub>1</sub> = 2 and pow<sub>1</sub> = 5.

Therefore, Sum = **2<sup>5</sup> = 32**.

The output should be **32**.

**Test Case: 2** If the given `numbers = 132 301`

Where,

- X<sub>1</sub> = 13 and pow<sub>1</sub> = 2.
- X<sub>2</sub> = 30 and pow<sub>2</sub> = 1.

Therefore, Sum = **13<sup>2</sup> **+** 30<sup>1</sup>** = **169 + 30** = **199**.

The output should be **199**.

Solution Code:def get_the_sum_of_powers(intergers_list):
 sum_of_powers = 0
 for each_integer in intergers_list:
 each_integer = int(each_integer)
 quotient = each_integer // 10
 power = each_integer % 10
 sum_of_powers += quotient ** power
 return sum_of_powers

def main():
 intergers_list = input().split()
 sum_of_powers = get_the_sum_of_powers(intergers_list)
 print(sum_of_powers)

main()"
97d3125b-8009-4184-a1e1-9cca2774190b,"In a building, there are **N** rooms numbered from **1** to **N**. Each room has a bulb that is initially **ON** for even-numbered rooms and **OFF** for odd-numbered rooms.

Your task is to note the status of the bulb after entering a room. When you leave a room, turn **OFF** the bulb if it is **ON** and turn **ON** the bulb if it is **OFF**. Visit all rooms in the same order as they are numbered and then return to the starting room and repeat the process **N** times.

Write a program that reads the **N** rooms and prints the status of the bulb for each room after completing each visit.

<MultiLineNote>

Print **1** if the bulb is **ON**, **0** otherwise

</MultiLineNote>

---

#### Input

The input will be a single line containing a positive integer representing the number of rooms in the building `N`.

---

#### Output

The output should be `N` lines containing space-separated integers that is the status of the bulb for each room after completing each visit.

---

#### Explanation

**Test Case:** If the given `N = 5`

Each room has a bulb that is initially `ON` for even-numbered rooms and `OFF` for odd-numbered rooms.

```
0 1 0 1 0
```

On the first visit, you have to turn `OFF` the bulb if it is `ON` and turn `ON` the bulb if it is `OFF`. 

```
1 0 1 0 1
```

There are 5 rooms in the building. So, the above-mentioned process must be done five times.

After **5** visits, the output should be **5** rows as shown below. Each row represents each visit.

```
1 0 1 0 1
0 1 0 1 0
1 0 1 0 1
0 1 0 1 0
1 0 1 0 1
```

Solution Code:def print_bulbs_on_off_status(rooms_bulbs_on_off_status):
 for each_room_bulbs_on_off_status in rooms_bulbs_on_off_status:
 bulbs_on_off_status = list(map(str, each_room_bulbs_on_off_status))
 print(*bulbs_on_off_status)

def update_current_visit_bulbs_on_off_status(previous_visit_bulbs_on_off_status):
 current_visit_bulbs_on_off_status = []
 for each_bulb_status in previous_visit_bulbs_on_off_status:
 if(each_bulb_status == 1):
 current_visit_bulbs_on_off_status.append(0)
 else:
 current_visit_bulbs_on_off_status.append(1)
 return current_visit_bulbs_on_off_status

def get_initial_bulbs_on_off_status(no_of_rooms):
 initial_bulbs_on_off_status = []
 for i in range(no_of_rooms):
 if(i % 2 == 0):
 initial_bulbs_on_off_status.append(1)
 else:
 initial_bulbs_on_off_status.append(0)
 return initial_bulbs_on_off_status

def get_rooms_bulbs_on_off_statuses(no_of_rooms):
 bulbs_on_off_statuses = []
 no_of_visits = no_of_rooms

 initial_bulbs_on_off_status = get_initial_bulbs_on_off_status(no_of_rooms)
 previous_visit_bulbs_on_off_status = initial_bulbs_on_off_status
 bulbs_on_off_statuses.append(initial_bulbs_on_off_status)

 for visit_no in range(1, no_of_visits):
 current_visit_bulbs_on_off_status = update_current_visit_bulbs_on_off_status(previous_visit_bulbs_on_off_status)
 bulbs_on_off_statuses.append(current_visit_bulbs_on_off_status)
 previous_visit_bulbs_on_off_status = current_visit_bulbs_on_off_status

 return bulbs_on_off_statuses

def main():
 no_of_rooms = int(input())
 rooms_bulbs_on_off_statuses = get_rooms_bulbs_on_off_statuses(no_of_rooms)
 print_bulbs_on_off_status(rooms_bulbs_on_off_statuses)

main()"
34d53028-a1ac-4b81-bfba-555dcb1f2460,"Write a program that reads the numbers **N**, **M** space-separated numbers and prints the sum of numbers whose position is divisible by **N**. Consider that the positions of the numbers starts from **1** to **M**.

---

#### Input

The first line of input contains the space-separated integers representing `N` and `M`.

The second line of input contains `M` space-separated integers representing the numbers.

---

#### Output

The output should be a single line containing an integer that is the sum of all the numbers whose position is divisible by `N`.

---

#### Explanation

**Test Case 1:** If the given `N = 1`, `M = 7` and the `numbers = 4 8 6 6 7 9 3`

<br/>

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
     <div style=""display: table-cell; vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">Numbers</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">4</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">8</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">6</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">6</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">7</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">9</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 0;padding: 8px 12px;"">3</div>
  </div>
  <div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
     <div style=""display: table-cell; vertical-align: inherit;font-weight: bold;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">Positions</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">6</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">7</div>
  </div>
<br/>

All the positions are divisible by `1`.

```
4 + 8 + 6 + 6 + 7 + 9 + 3 = 43
```

The output should be **43**.

**Test Case 2:** If the given `N = 4`, `M = 13` and the `numbers = 7 3 10 4 5 8 4 9 6 9 10 1 4`

<br/>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
     <div style=""display: table-cell; vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">Numbers</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">7</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">3</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">10</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">4</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">5</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">8</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">4</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">9</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">6</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">9</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">10</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">1</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 0;padding: 8px 12px;"">4</div>
  </div>
  <div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
     <div style=""display: table-cell; vertical-align: inherit;font-weight: bold;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">Positions</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">6</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">7</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">8</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">9</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">10</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">11</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">12</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">13</div>
  </div>
<br/>

The positions **4**, **8** and **12** are divisible by `4`.

```
4 + 9 + 1 = 14
```

The output should be **14**.

Solution Code:def get_nth_number_sum(numbers, divisible_number):
 sum_of_numbers = 0
 for each_position in range(1, len(numbers) + 1):
 if(each_position % divisible_number == 0):
 sum_of_numbers += numbers[each_position - 1]
 return sum_of_numbers

def main():
 divisible_number, numbers_length = map(int, input().split())
 numbers = list(map(int, input().split()))
 nth_number_sum = get_nth_number_sum(numbers, divisible_number)
 print(nth_number_sum)

main()"
40e340dc-1c47-4326-9abf-3bb4c73f2c5d,"You are given an **M x N** matrix and a number **K**. In the given **M x N** matrix, you need to delete **K** rows from both the top and the bottom and delete **K** columns from both the left and the right. Finally, calculate the product of all elements in the resulting matrix.

Write a program that reads an **M x N** matrix and a number **K** and prints the product of all elements in the resulting matrix.

---

#### Input

The first line of input contains two space-separated integers representing `M` and `N` respectively.

The next `M` lines of input contain `N` space separated integers representing the matrix.

The last line of input contains an integer representing `K`.

---

#### Output

The output should be a single line containing an integer obtained by calculating the product of all elements in the resulting matrix.

---

#### Explanation

**Test Case**: If the given `M = 5` and `N = 4`, the matrix is as follows:

```
1 2 3 4
5 6 7 8
9 10 11 12
13 14 15 16
17 18 19 20
```

If `K = 1`, Here is an example to illustrate the resulting matrix:

```
6 7
10 11
14 15
```

So, the product of all elements in the resulting matrix,

```
6 x 7 x 10 x 11 x 14 x 15 = 970200
```

The output should be **970200**.

Solution Code:def read_matrix(rows):
 matrix = []
 for i in range(rows):
 row = list(map(int, input().split()))
 matrix.append(row)
 return matrix

def get_matrix_product(matrix):
 if(len(matrix) == 0):
 return 0
 product = 1
 rows = len(matrix)
 columns = len(matrix[0])
 for i in range(rows):
 for j in range(columns):
 product = product * matrix[i][j]
 return product

def get_sub_matrix(matrix, rows, columns, k):
 new_sub_matrix = []
 sub_martix_rows = matrix[k:rows-k]
 for each_row in sub_martix_rows:
 each_row = each_row[k:columns-k]
 new_sub_matrix.append(each_row)
 return new_sub_matrix

def main():
 rows, columns = map(int, input().split())
 matrix = read_matrix(rows)
 k = int(input())
 resultant_matrix = get_sub_matrix(matrix, rows, columns, k)
 product = get_matrix_product(resultant_matrix)
 print(product)

main()"
69525415-871f-4b9f-9619-eae60dcbdd0e,"A group of **F** friends visited a haunted house. Each member was wearing a shirt with a number on it ranging from **1** to **F**. As they entered the haunted house, one of them was kidnapped and an enemy replaced him.

Rather than wearing the same shirt number as the kidnapped one, the enemy wore a shirt with the same number as another person among the remaining people.

Write a program that reads the **F** space-separated numbers and prints the numbers on the shirt of the enemy and the person who was kidnapped.

---

#### Input

The input will be a single line containing space-separated integers representing all the people who are currently in the house, from `1` to `F`.

---

#### Output

The output should be a single line containing space-separated integers representing the numbers on the shirt of the enemy and the person who was kidnapped.

---

#### Explanation

**Test Case:** If the given `numbers = 3 1 5 2 1`,

In the range from `1` to `5`, the number `1` has occurred twice and the number `4` is missing.

So, `1` is the enemy's shirt number, and `4` is the person's shirt number who was kidnapped.

The output should be **1 4**.

Solution Code:def get_enemy_and_kidnapped_person_shirt_numbers(shirt_numbers):
 total_shirts = len(shirt_numbers)
 kidnapped_person, enemy = None, None
 
 for each_shirt_number in range(1, total_shirts + 1):
 if (shirt_numbers.count(each_shirt_number) == 2):
 enemy = each_shirt_number
 
 if (shirt_numbers.count(each_shirt_number) == 0):
 kidnapped_person = each_shirt_number
 
 return enemy, kidnapped_person

def main():
 shirt_numbers = list(map(int, input().split()))
 
 enemy, kidnapped_person = get_enemy_and_kidnapped_person_shirt_numbers(shirt_numbers)
 enemy, kidnapped_person = str(enemy), str(kidnapped_person)
 print(enemy + "" "" + kidnapped_person)
 
main()"
eddf16ce-57d7-49f1-8d70-597d9d86502a,"Yash has a sequence of **26** distinct numbers **P = (P<sub>1</sub>, P<sub>2</sub>, ..., P<sub>26</sub>)**, where the numbers from **1 to 26** are in random order. Ashok, one of Yash's friends, challenged him to construct a string **S** using the following table:

<br/>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
     <div style=""display: table-cell; vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">Numbers</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">1</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">2</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">3</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">4</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">-</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">-</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">-</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 0;padding: 8px 12px;"">26</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
    <div style=""display: table-cell; vertical-align: inherit;font-weight: bold;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">Alphabets</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">a</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">b</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">c</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">d</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">-</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">-</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">-</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">z</div>
 </div>
<br/>

Every number from **1 to 26** represents an alphabet as shown in above table. 

Yash should construct a string based on the alphabet numbers. Help Yash construct the string **S**. 

Write a program that reads the space-separated numbers and prints the resultant string **S**.

---

#### Input

The input will be a single line containing space-separated integers representing the sequence of 26 distinct numbers **P = (P<sub>1</sub>, P<sub>2</sub>, ..., P<sub>26</sub>)**.

---

#### Output

The output should be a single line containing a string obtained by constructing a string based on the alphabet numbers.

---

#### Explanation

**Test Case**: If the given `P = 2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26`,

The **P<sub>1</sub> = 2**,

- The number `2` is represented by the alphabet `b`.
- So, the first character of `S` is `b`.

The **P<sub>2</sub> = 1**,

- The number `1` is represented by the alphabet `a`.
- So, the second character of `S` is `a`.

Using the above procedure, we can obtain the result `bacdefghijklmnopqrstuvwxyz`

The output should be **bacdefghijklmnopqrstuvwxyz**

Solution Code:def get_resultant_string(numbers):
 resultant_string = """"
 for each_number in numbers:
 character_ascii_value = each_number + 96
 resultant_string += chr(character_ascii_value)
 return resultant_string
 
def main():
 numbers = list(map(int, input().split()))
 resultant_string = get_resultant_string(numbers)
 print(resultant_string)
 
main()"
f9eef1ab-7810-40fe-8811-829e4572bfde,"In the World Boxing Championship, **14** matches will be held between Mary Kom and Amanda.

Each match has three possible outcomes: Amanda can win, Mary Kom can win, or a draw can occur. If Amanda wins, she gets **2** points and Mary Kom gets **0** points. If Mary Kom wins, she gets **2** points and Amanda gets **0** points. If it's a draw, both of the players get **1** point.

The total prize pool of the championship is **100 * X**.

After the **14** matches, the player who wins more matches than the other, will be declared as a champion and gets the prize money of **60 * X**, whereas the loser gets the prize money of **40 * X**.

If both the players win same number of matches, then the defending champion Mary Kom is declared the winner and gets the prize money of **55 * X**, whereas the loser gets the prize money of **45 * X**.

Your friend wants to find the prize money of Mary Kom. Your task is to determine the prize money of Mary Kom in the World Boxing Championship.

Write a program that reads a number **X** representing the base prize pool and a string of length 14 consisting of the characters **A**, **M**, and **D**, representing the result of 14 matches. **A** denotes Amanda won the match, **M** denotes Mary Com won the match, and **D** denotes a draw and prints the total amount earned by Mary Kom.

---

#### Input

The first line of input contains an integer `T` representing the number of test cases.

The next `T` lines of input contain

- The first line of input contains an integer `X` representing the base prize pool.

- The second line of input contains a string representing the results of the `14` matches. `A` denotes Amanda won the match, `M` denotes Mary Com won the match, and `D` denotes a draw and prints the total amount earned by Mary Kom.

---

#### Output

The output should be `T` lines containing an integer representing the prize money received by Mary Kom.

---

#### Explanation

If the given test cases `T = 2`

**Test Case 1** If the given `X = 300`, `results = ADDAADDDAADADA`

- The total prize pool is `30000` as `100 * X`.

- Among `14` matches, `7` matches won by `Amanda` and `7` matches are draw. So, `Amanda` is a champion.

- So, The `Mary Kom` is a loser. She gets `40 * X`,  i.e **12000**.

- The output should be **12000**.

**Test Case 2** If the given `X = 400`, `results = AMMMMAMDMADMAD`

- The total prize pool is `40000` as `100 * X`.

- Among `14` matches, `Amanda` has won `4` matches, `Mary Kom` has won `7` matches and `3` matches are draw. So, `Mary Kom` is a champion.

- So, The `Mary Kom` is a winner. She gets `60 * X`,  i.e **24000**.

- The output should be **24000**.

Solution Code:def get_marykom_prize_money(match_results, prize_money):
 no_of_marykom_wins = match_results.count(""M"")
 no_of_amanda_wins = match_results.count(""A"")
 
 marykom_prize_money = None
 if (no_of_marykom_wins > no_of_amanda_wins):
 marykom_prize_money = prize_money * (60/100)
 elif (no_of_marykom_wins < no_of_amanda_wins):
 marykom_prize_money = prize_money * (40/100)
 elif (no_of_marykom_wins == no_of_amanda_wins):
 marykom_prize_money = prize_money * (55/100)
 return marykom_prize_money

def main():
 t = int(input())
 for i in range(t):
 prize_money = int(input()) * 100
 match_results = input()
 marykom_prize_money = get_marykom_prize_money(match_results, prize_money)
 print(int(marykom_prize_money))
 
main()"
4296feb3-75aa-4ec4-b6cb-ec76a0eb84f3,"Disha has been given three strings **A**, **B**, and **C** consisting of lowercase alphabets, and a number **T** consisting of digits 1, 2, and 3.

The teacher asked Disha to concatenate the three strings **A**, **B**, and **C** based on the order of digits in the given number **T**.

- The digit **1** represented the string **A**.
- The digit **2** represented the string **B**.
- The digit **3** represented the string **C**.

Help Disha arrange the strings based on the order of digits in the given number **T**.

Write a program that reads the strings **A**, **B**, **C** and a number **T** and prints the resultant string.

---

#### Input

The first line of input contains a string representing `A`.

The second line of input contains a string representing `B`.

The third line of input contains a string representing `C`.

The fourth line of input contains an integer representing `T`.

---

#### Output

The output should be a single line containing a string obtained by concatenating the strings `A`, `B` and `C` based on the order of digits in the given number **T**.

---

#### Explanation

**Test Case**: If the given `A = mari`, `B = to`, `C = zzo` and `T = 1321`

Concatenate these in the order `A + C + B + A` based on the order of digits in the given number `T`.

So the resultant string is `marizzotomari`.

The output should be **marizzotomari**

Solution Code:def get_concatinated_word(words, t):
 concatinated_word = """"
 for each_number in t:
 index = int(each_number) - 1
 concatinated_word += words[index]
 return concatinated_word

def read_words(no_of_inputs):
 words = []
 for i in range(no_of_inputs):
 word = input()
 words.append(word)
 return words

def main():
 words = read_words(3)
 t = input()
 concatinated_word = get_concatinated_word(words, t)
 print(concatinated_word)
 
main()"
9a94592d-6a07-434a-9325-29bc70f39a70,"Write a program that prints three hashes (`###`) as output.

Solution Code:print(""###"")"
3cb95d76-d9fe-4758-81d0-3fc72fd39aec,"Write a program that prints the result when **33968** is divided by **176**.

Solution Code:result = 33968 / 176

print(result)"
2328ae16-0edd-4f34-b8ed-5e2baf939024,"Write a program that reads a number `N` and prints numbers from **1** to `N`.

<MultiLineNote>
Use the **For** loop to iterate over the range of numbers.
</MultiLineNote>

---

#### Input  

The input will be a single line containing an integer representing `N`.

---

#### Output  

The output should contain all numbers from **1** to `N`, each on a new line.

---

#### Explanation  
  
For example, if the given number is `N = 3`,

* The numbers from **1** to **3** are **1**, **2**, and **3**.

The output should be,

```
1
2
3
```

Solution Code:number_of_inputs = int(input())

for number in range(1, number_of_inputs + 1):
 print(number)"
904a92aa-bab3-4b65-ab98-67c132d64bf2,"Ram challenges Anil to a game. Anil has been given the word **W** and the **N** number of sentences.

Anil needs to find the sentence number in which the word **W** appears for the first time in the **N** sentences. Help Anil find the sentence number.

Write a program that reads the word **W** and the **N** number of sentences and prints the sentence number in which the word **W** appears for the first time in **N** sentences.

<MultiLineNote>
Consider the lower and upper case letters as different in the words.
</MultiLineNote>

---

#### Input

The first line of input contains the string representing the word `W`.

The second line of input contains an integer representing the number of sentences `N`.

The next `N` lines of input contain line-separated sentences.

---

#### Output

The output should be a single line containing an integer representing the sentence number in which the word `W` appears for the first time in the `N` sentences.

If the given word `W` does not appear in any of the sentences, then print `-1`.

---

#### Explanation

**Test Case**: If the given `W = plays` and `N = 3`, the sentences is as follows:

```
Raju is going to school
Teja plays cricket
Car has four wheels
```

In sentence number **1**, the word `plays` doesn't appear.

In sentence number **2**, the word `plays` appears for the first time.

The output should be **2**.

Solution Code:def read_sentences(n):
 sentences_list = []
 for i in range(n):
 sentence = input().split() 
 sentences_list.append(sentence)
 return sentences_list

def find_the_sentence_contains_the_word(sentences_list, word):
 for index in range(len(sentences_list)): 
 if word in sentences_list[index]:
 sentence_postion = index + 1
 return sentence_postion
 return -1
 
def main():
 word = input()
 no_of_sentences = int(input())
 sentences_list = read_sentences(no_of_sentences)
 sentence_postion = find_the_sentence_contains_the_word(sentences_list, word)
 print(sentence_postion)
 
main()"
939730d4-7278-49f8-8fb2-0669b13e92de,"You are given a sentence `S`(all characters are upper case) with multiple words in it. Write a program to print all the perpendicular words in `S`.

An *ith* `perpendicular word` is formed by combining all the *ith* characters from all the words in the same order in which they appear in `S`.

Use spaces whenever it is necessary to form the perpendicular words. (Trailing spaces are not allowed)

---

#### Input

The first line contains a string `S`.

---

#### Output

Each line of the output contains a string formed perpendicularly as mentioned above.

---

#### Explanation

Given `S = CAT BAT VIN`.

Printing the given words perpendicularly.
```
CBV
AAI
TTN
```
Joining all the first characters from the given 3 words gives `CBV`.
Joining all the second characters from the given 3 words gives `AAI`.
Joining all the third characters from the given 3 words gives `TTN`.


Solution Code:def get_length_of_max_length_word(words_list):
 max_length = 0
 for each_word in words_list:
 if(len(each_word) > max_length):
 max_length = len(each_word)
 return max_length
 
def print_perpendicular_words(words_list, max_length):
 for each_length in range(1, max_length+1):
 prependicular_word = ''
 for each_word in words_list:
 if(each_length <= len(each_word)):
 prependicular_word += each_word[each_length - 1]
 else:
 prependicular_word += "" ""
 print(prependicular_word)

def main():
 words_list = input().split()
 words_list_length = len(words_list)
 max_length = get_length_of_max_length_word(words_list)
 print_perpendicular_words(words_list, max_length)

main()"
dfc31791-127c-4e62-ab6f-35a34c1fd99d,"You have given a positive number **N** and asked to convert that number **N** into a single digit by repeatedly adding its digits until it becomes a single digit.

Write a program that reads the number **N** and prints the single digit by repeatedly adding its digits until it becomes a single digit.

---

#### Input

The input will be a single line containing an integer representing the number `N`.

---

#### Output

The output should be a single line containing an integer obtained by repeatedly adding the digits of the given number `N` until it becomes a single digit.

---

#### Explanation

**Test Case**: If the given number `N = 545`,

Repeatedly add the digits of the given number `545` until it becomes a single digit like as shown below

Add the digits of the given number:

```
5 + 4 + 5 = 14
```

Repeat the process and add the digits of the result:

```
1 + 4 = 5
```

As it becomes a single digit stop the process.

The output should be **5**.

Solution Code:def get_sum_of_digits(number):
 sum_of_digits = 0
 for each_digit in str(number):
 sum_of_digits += int(each_digit)
 return sum_of_digits
 
def get_single_numeral_number(number):
 while True:
 if len(str(number)) == 1:
 break
 number = get_sum_of_digits(number)
 return number
 
def main():
 number = input()
 single_numeral_number = get_single_numeral_number(number)
 print(single_numeral_number)
 
main()"
61cd95c5-f4af-4999-869a-e227e53b7e56,"You have been given space-separated **Numbers** and your task is to modify each number in **Numbers** such that each number starts with an odd digit.

If a number already starts with an odd digit, it should not be modified. If there are no odd digits in the number, it should not be modified either.

Write a program that reads space-separated numbers and prints the modified space-separated numbers.

---

#### Input

The input will be a single line containing space-separated integers representing `Numbers`.

---

#### Output

The output should be a single line containing space-separated integers representing modified `Numbers`.

---

#### Explanation

**Test Case**: If the given `integers = 21 503 256 550 86 979 281`,

Modify each number so that its first digit is an odd digit.

| Number | Modified Number | Explanation                    |
| ------ | --------------- | ------------------------------ |
| 21     | 12              | 12 starts with an odd digit 1  |
| 503    | 503             | No modification required       |
| 256    | 562             | 562 starts with an odd digit 5 |
| 550    | 550             | No modification required       |
| 979    | 979             | No modification required       |
| 281    | 128             | 128 starts with an odd digit 1 |

The output should be **12 503 562 550 86 979 128**.

Solution Code:def get_rotated_number(each_number):
 rotated_number = each_number
 for index in range(len(each_number)):
 digit = int(each_number[index])
 if(digit % 2 == 1):
 rotated_number = each_number[index:] + each_number[:index] 
 break
 return rotated_number

def get_rotated_numbers_list(numbers):
 rotated_numbers_list = []
 for each_number in numbers:
 rotated_number = get_rotated_number(each_number)
 rotated_numbers_list.append(rotated_number)
 return rotated_numbers_list

def main():
 numbers = input().split()
 rotated_numbers_list = get_rotated_numbers_list(numbers)
 print(*rotated_numbers_list)
 
main()"
0ed4db12-48f3-4ac5-a35d-9617bdb16d15,"You are given an alphanumeric string **S**. You need to find the product of all the characters of that string **S** by following the rules.

####Rules :

- If the character is a **digit**, multiply its value.

- If the character is an **alphabet**, multiply the product of digits of its **ASCII** value.

Write a program that reads the string **S** and prints the product of all the characters of the string **S**.

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing an integer that is product of all the characters of that string `S`.

---

#### Explanation

**Test Case:** If the given string `S` is `123a4`,

**ASCII** value of **a** is `97`.

Product of digits of ASCII value of a is 

```

9 x 7 = 63

```

Therefore the product of characters is 

```

1 x 2 x 3 x 63 x 4 = 1512

```


The output should be **1512**.

Solution Code:def get_ascii_value_product(ascii_value):
 ascii_value_product = 1 
 for each_value in str(ascii_value):
 ascii_value_product *= int(each_value)
 return ascii_value_product

def get_product(alphanumeric_string):
 product = 1
 for each_char in alphanumeric_string:
 if (each_char.isdigit()):
 product *= int(each_char)
 else:
 ascii_value = ord(each_char)
 ascii_value_product = get_ascii_value_product(ascii_value)
 product *= ascii_value_product
 return product
 
def main():
 alphanumeric_string = input()
 product = get_product(alphanumeric_string)
 print(product)

main()"
0f54c01a-bd22-46f5-8dea-ab588279e088,"Stephen is participating in a national coding contest. He has been given a sentence **S** and a number **L**. He needs to find pairs of words in the sentence **S** that can be concatenated to form a new word with a length equal to the given number **L**. 

Help Stephen find word pairs with a length equal to the given number.

Write a program that reads a sentence **S** and a number **L** and prints the concatenated word pairs so that the concatenated word has length **L**.

---

####Input

The first line of input contains a string representing sentence `S`. 
The second line of input contains an integer representing number`L`.



---

####Output

The output should be containing the unique concatenated word pairs each in a line in the dictionary order.

---

#### Explanation:

**Test Case**: if given sentence is `Welcome to your exam` and `L = 6`,

The words which can be paired so that they make concatenated word with length 6 are, 

| Word 1           | Word 2         | 
| -------------- | --------------- | 
| to | your |
| to | exam  |
| exam | to |
| your | to |

The output should be printing each concatenated word in a line in the dictionary order.

```
examto
toexam
toyour
yourto

```

Solution Code:def get_word_pairs_of_given_length(words_list, length):
 word_pairs_of_given_length = []
 for i in range(len(words_list)):
 for j in range(i+1, len(words_list)):
 word_pair = words_list[i] + words_list[j]
 if len(word_pair) == length:
 reversed_word_pair = words_list[j] + words_list[i]
 word_pairs_of_given_length.append(word_pair)
 word_pairs_of_given_length.append(reversed_word_pair)
 
 return word_pairs_of_given_length

def get_sorted_unique_word_pairs(word_pairs_of_given_length):
 unique_word_pairs = list(set(word_pairs_of_given_length))
 sorted_unique_word_pairs = sorted(unique_word_pairs)
 return sorted_unique_word_pairs
 
def print_word_pairs(word_pairs):
 for word_pair in word_pairs:
 print(word_pair)

def main():
 words_list = input().split()
 length = int(input())
 
 word_pairs_of_given_length = get_word_pairs_of_given_length(words_list, length)
 sorted_unique_word_pairs = get_sorted_unique_word_pairs(word_pairs_of_given_length)
 
 print_word_pairs(sorted_unique_word_pairs)
 
main()"
aecf9efa-9c62-411d-9284-2b41ff2bad38,"Write a program that reads two numbers `A`, and `B`, and prints the relation between `A` and `B` by checking if any of the given conditions is satisfied.

- **A** is equal to **B**. (**A == B**)
- **A** is greater than **B**. (**A > B**)
- **A** is less than **B**. (**A < B**)

<MultiLineNote>
Relational Operators are `==`, `>`, `<`
</MultiLineNote>

----

**Input**  
  
The first line of input contains an integer representing `A`. 
The second line of input contains an integer representing `B`.

----

**Output**  
 
The output should be a single line containing a string representing the relation between the two numbers.
 
**A == B** should be printed if `A` is equal to `B`.

**A > B** should be printed if `A` is greater than `B`.

**A < B** should be printed if `A` is less than `B`.

----

**Explanation**  
  
For Example, if the given integers are `A = 3` and `B = 4`,

✖ **A** is equal to **B**. (**3** is not equal to **4**)
✖ **A** is greater than **B**. (**3** is not greater than **4**)
✔ **A** is less than **B**. (**3** is less than **4**)

The output should be **A < B** as `A` is less than `B`.

----

For Example, if the given integers are `A = 4` and `B = 4`,

✔ **A** is equal to **B**. (**4** is equal to **4**)
✖ **A** is greater than **B**. (**4** is not greater than **4**)
✖ **A** is less than **B**. (**4** is not less than **4**)

The output should be **A == B** as `A` is equal to `B`.

Solution Code:a = int(input())
b = int(input())

if a == b:
 print(""A == B"")
elif a > b:
 print(""A > B"")
else:
 print(""A < B"")"
78fd1115-e229-445b-8f2c-0a77b5c9496b,"Write a program that reads a number `N` and an exponent `E` and prints the result of `N` power `E` (**N<sup>E</sup>**).

---

#### Input

The first line of input contains an integer representing the number `N`.
The second line of input contains an integer representing the exponent `E`.

---

#### Output

The output should be a single line containing an integer that is the result of `N` power `E`(**N<sup>E</sup>**).

---

#### Explanation

For example, if the given number is `N = 3` and the exponent is `E = 2`, 

- The result of `N` power `E` is **9**. (**3<sup>2</sup> = 9**)

The output should be **9**.

<br/>

For example, if the given number is `N = 5` and the exponent is `E = 3`, 

- The result of `N` power `E` is **125**. (**5<sup>3</sup> = 125**)

The output should be **125**.

Solution Code:number = int(input())
power = int(input())

print(number ** power)"
20c1c400-e695-4520-ae7a-4b06ae51fcd0,"Write a program that reads two numbers `A` and `B` and finds the,

- Result of `A` power `B` (**A<sup>B</sup>**)
- Result of `B` power `A` (**B<sup>A</sup>**)

Print the greatest among the results of `A` power `B` (**A<sup>B</sup>**) and `B` power `A` (**B<sup>A</sup>**).

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing an integer. The result of **A<sup>B</sup>** should be printed if **A<sup>B</sup>** is greater than **B<sup>A</sup>**. Otherwise, the result of **B<sup>A</sup>** should be printed.

---

#### Explanation

For example, if the given two numbers are `A = 2` and `B = 3`, 

- Result of `A` power `B` (**A<sup>B</sup>**) is **8**. (**2<sup>3</sup> = 8**)
- Result of `B` power `A` (**B<sup>A</sup>**) is **9**. (**3<sup>2</sup> = 9**)
- Greatest among the two results is **9**. (**9** is greater than **8**)

The output should be **9**.

Solution Code:a = int(input())
b = int(input())

a_power_b = a ** b
b_power_a = b ** a

is_greater = a_power_b > b_power_a

if is_greater:
 print(a_power_b)
else:
 print(b_power_a)"
ae8e06b9-3251-47af-8f79-7ef390f39dc0,"Write a program that reads a distance `D` in km and calculates the score.

- If `D` is less than or equal to **10**, the score is `D`.
- If `D` is greater than **10**, the score is the sum of **10** and `(D - 10) * 3`.

---

#### Input

The input will be a single line containing an integer representing `D`.

---

#### Output

The output should be a single line containing an integer that is the score.

---

#### Explanation

For example, if the given distance is `D = 3`,

- **3** is less than or equal to **10**
- The score is **3** (`D`)

The output should be **3**.

<br/>

For example, if the given distance is `D = 25`,

- **25** is greater than **10**.
- The score is the sum of **10** and `(D - 10) * 3`.

```
10 + (D - 10) * 3
10 + (25 - 10) * 3
10 + (15) * 3
10 + 45
55
```

The output should be **55**


Solution Code:distance = int(input())

if distance <= 10:
 print(distance)
else:
 remaining_distance = distance - 10
 score = 10 + (remaining_distance * 3)
 print(score)"
8d0366c8-a110-49be-bb38-bb2ffebd0dbe,"For this problem, the prefilled code will contain a function. Write a program that the given function will return the perimeter of the square.<br/>The sum of lengths of the four sides of a square is the perimeter of the square.<hr><b>Input</b><br/><br/>The first line of input will contain a positive integer.<hr><b>Output</b><br/><br/>The output should be a single line containing the perimeter of the square.<hr><b>Explanation</b><br/><br/>For example, if the given number is 3, since the square has the same length of sides, the perimeter of the square is the sum of the four sides&#x27; length. So the output should be 12.

Solution Code:def perimeter_of_square(arg_1):
 perimeter = arg_1*4
 return perimeter


side = int(input())
result = perimeter_of_square(side)
print(result)"
88ac79d0-51d3-4909-b577-e2137df0dd45,"For this problem, the prefilled code will contain a function. Write a program that the given function will return the sum of the two values passed to the function.<hr><b>Input</b><br/><br/>The first line of input will contain an integer.<br/>The second line of input will contain an integer.<hr><b>Output</b><br/><br/>The output should be a single line containing the sum of the two numbers.<hr><b>Explanation</b><br/><br/>For example, if the given numbers are 5 and 8, your code should print the sum of the given two numbers. So the output should be 13.

Solution Code:def add(arg_1, arg_2):
 result = arg_1 + arg_2
 return result


a = int(input())
b = int(input())
result = add(a, b)
print(result)"
7d88c6b1-d981-4800-952d-ca0212e627a8,"# Question Details:
```
Abhinav and Anjali are playing a game called **Tic-Tac-Toe**. The game is played on a square board with `3` rows and `3` columns. 

Abhinav chooses the letter `O` and Anjali chooses the letter `X`. They take turns putting their letters in empty spaces on the board.

- The first player to get three of their letters in a row, column, or diagonal wins the game. 

- If all spaces on the board are filled and no player has won, the game ends in a tie.

Let’s see some gameplay visually.

<Img imageSrc = 'https://s3.ap-south-1.amazonaws.com/new-assets.ccbp.in/frontend/content/Screenshot+from+2023-03-30+17-36-39.png' widthPercent='90' />

There are a total of `8` ways to arrange the same sign and win the game. Let’s see all the `8` arrangements that can win the game.

<Img imageSrc = 'https://s3.ap-south-1.amazonaws.com/new-assets.ccbp.in/frontend/content/Screenshot+from+2023-03-30+17-53-49.png' widthPercent='90' />
 
Write a program that reads three lines containing space-separated `O`'s and `X`'s and prints the result of the game.

---

####Input

The input will be three lines containing space-separated `O`'s and `X`'s.

---

####Output

The output should be a single line containing a string.  **Abhinav Wins** should be printed if Abhinav wins the game or **Anjali Wins** should be printed if Anjali wins the game. Otherwise, **Tie** should be printed.

---

####Explanation

For example, 

If the given

```
O X O
O X X
O O X 
```

As the `1st` column contains three of `O`'s, Abhinav wins the game as `O` is Abhinav's choice.

So, the output should be **Abhinav Wins**.

---

For example,

If the given

```
O O X
X X O
X O O
```

As the anti-diagonal contains three of `X`'s, Anjali wins the game as `X` is Anjali's choice.

So, the output should be **Anjali Wins**.

---

For example,

If the given

```
O X O
X X O
O O X
```

As all spaces on the grid are filled and no player has won.

So, the output should be **Tie**.
```

Solution Code:square_board=[]
for i in range(3):
    line=input().split()
    square_board.append(line)
    
#IS ROWS
is_three_o_in_any_row=((square_board[0][0] == ""O"" and square_board[0][1] == ""O"" and square_board[0][2] == ""O"") or (square_board[1][0] == ""O"" and square_board[1][1] == ""O"" and square_board[1][2] == ""O"") or (square_board[2][0] == ""O"" and square_board[2][1] == ""O"" and square_board[2][2] == ""O""))
is_three_x_in_any_row=((square_board[0][0] == ""X"" and square_board[0][1] == ""X"" and square_board[0][2] == ""X"") or (square_board[1][0] == ""X"" and square_board[1][1] == ""X"" and square_board[1][2] == ""X"") or (square_board[2][0] == ""X"" and square_board[2][1] == ""X"" and square_board[2][2] == ""X""))
#IS COLUMNS
is_three_o_in_any_column=((square_board[0][0] == ""O"" and square_board[1][0] == ""O"" and square_board[2][0] == ""O"") or (square_board[0][1] == ""O"" and square_board[1][1] == ""O"" and square_board[2][1] == ""O"") or (square_board[0][2] == ""O"" and square_board[1][2] == ""O"" and square_board[2][2] == ""O""))
is_three_x_in_any_column=((square_board[0][0] == ""X"" and square_board[1][0] == ""X"" and square_board[2][0] == ""X"") or (square_board[0][1] == ""X"" and square_board[1][1] == ""X"" and square_board[2][1] == ""X"") or (square_board[0][2] == ""X"" and square_board[1][2] == ""X"" and square_board[2][2] == ""X""))
#IS DIAGIONALS
is_three_o_in_any_diagonal=((square_board[0][0] == ""O"" and square_board[1][1] == ""O"" and square_board[2][2] == ""O"") or (square_board[0][2] == ""O"" and square_board[1][1] == ""O"" and square_board[2][0] == ""O""))
is_three_x_in_any_diagonal=((square_board[0][0] == ""X"" and square_board[1][1] == ""X"" and square_board[2][2] == ""X"") or (square_board[0][2] == ""X"" and square_board[1][1] == ""X"" and square_board[2][0] == ""X""))


if (is_three_o_in_any_row or is_three_o_in_any_column or is_three_o_in_any_diagonal):
    print(""Abhinav Wins"")
elif (is_three_x_in_any_row or is_three_x_in_any_column or is_three_x_in_any_diagonal):
    print(""Anjali Wins"")
else:
    print(""Tie"")"
97c09aca-e950-4641-8555-864e8b938b9d,"Write a program that reads an amount `A` and prints the minimum number of **500**, **50**, **10** and **1** rupee notes required for the given amount.

---

#### Input

The input will be a single line containing an integer representing the amount `A`.

---

#### Output

The output should be a single line containing a string that has the number of **500**, **50**, **10** and **1** rupee notes required for the given amount `A`.

---

#### Explanation


For example, if the given amount `A = 1543`,

* The number of **500** rupee notes required for **1543** is **3**. (`1543 / 500 = 3.086`)
  * The remaining amount is **43**. (`1543 - (500 * 3) = 43`)
* The number of **50** rupee notes required for **43** is **0**. (`43 / 50 = 0.86`)
* The number of **10** rupee notes required for **43** is **4**. (`43 / 10 = 4.3`)
  * The remaining amount is **3**. (`1543 - (500 * 3) - (10 * 4) = 3`)
* The number of **1** rupee notes required for **3** is **3**. (`3 / 1 = 3`)

Number of **500** rupee notes  => 500 x 3 = 1500
Number of **50** rupee notes    =>    50 x 0 =       0
Number of **10** rupee notes     =>    10 x 4 =     40
Number of **1** rupee notes          =>    1 x 3 =       3
--------------------------------------------------
Total                                           =>                    1543
--------------------------------------------------

The output should be `500: 3 50: 0 10: 4 1: 3`.

Solution Code:amount = int(input())

no_of_500s = amount / 500
no_of_500s = int(no_of_500s)
remaining_amount = amount % 500

no_of_50s = remaining_amount / 50
no_of_50s = int(no_of_50s)
remaining_amount = remaining_amount % 50

no_of_10s = remaining_amount / 10
no_of_10s = int(no_of_10s)
remaining_amount = remaining_amount % 10

no_of_1s = remaining_amount

print(""500:"" + str(no_of_500s) + "" "" +  ""50:"" + str(no_of_50s) + "" "" + ""10:"" + str(no_of_10s) + "" "" + ""1:"" + str(no_of_1s))"
d2c8f1a9-b9e2-4596-bc6e-84e2f1eaf42d,"Given a sentence `S` contains space-separated words, write a program to print the first and the last words of the sentence in dictionary order separated by a space.

<MultiLineNote>
- Consider both uppercase and lowercase alphabets as the same.
- Dictionary order is a way of ordering words or sequences of characters based on their alphabetical order.
</MultiLineNote>

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a string obtained by joining the first and last words of the sentence in dictionary order with a space.

---

#### Explanation

For example, if the given sentence is `S = ""to get the Ball rolling""`,

- The words in the sentence are **to, get, the, Ball,** and **rolling**.
- The words in dictionary order are **Ball, get, rolling, the,** and **to**.
- The first word is **Ball**.
- The last word is **to**.

The output should be **Ball to**.


Solution Code:s = input()

first_word = ""z""
last_word = ""a""
word = """"
for i in range(len(s)):
    char = s[i]
    if char != "" "":
        word += char
    
    if char == "" "" or i == len(s)-1:
        if word.lower() < first_word.lower():
            first_word = word
        if word.lower() > last_word.lower():
            last_word = word
        word = """"

first_and_last_word = first_word + "" "" + last_word
print(first_and_last_word)"
ef419696-4b31-4d4d-b749-175dd6f868c9,"Given a variable name `S`, check if `S` is a valid variable name. The variable name is valid if it contains only **upper case** letters, **lower case** letters, and **digits**. 

Print **True** if `S` is a valid variable name. Otherwise, print **False**.

<MultiLineNote>
- The Unicode values of **upper case** letters (`A - Z`) are from **65** to **90**.
- The Unicode values of **lower case** letters (`a - z`) are from **97** to **122**.
- The Unicode values of **digits** (`0 - 9`) are from **48** to **57**.
</MultiLineNote>

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if `S` is a valid variable name. Otherwise, print **False**.

---

#### Explanation

For example, if the given variable name is `S = ""eachNumber""`,

- The characters in the variable name `S` are **e, a, c, h, N, u, m, b, e,** and **r**.
- The variable name `S` contains only **upper case** and **lower case** letters.

The output should be **True**.

Solution Code:variable_name = input()

is_valid = True 

for each_character in variable_name:
 unicode_value = ord(each_character)
 valid_character = (65<=unicode_value and 90>=unicode_value) or (97<=unicode_value and 122>=unicode_value) or (48<=unicode_value and 57>=unicode_value)
 
 if not valid_character:
 is_valid = False
 break 
 
print(is_valid)"
19f462cd-ba25-4972-abb2-a80cf93fdcb0,"You are given `N` number of inputs. Print the maximum of them after each input.

---

#### Input

The first line of input is an integer `N`.
The next `N` lines each contain an integer as input.

---

#### Explanation

In the example, you are given `6` inputs `1, 0, 3, 2, 9, 8`.

```
1 is maximum in the input 1.
1 is maximum in the input 1, 0.
3 is maximum in the input 1, 0, 3.
3 is maximum in the input 1, 0, 3, 2.
9 is maximum in the input 1, 0, 3, 2, 9.
9 is maximum in the input 1, 0, 3, 2, 9, 8.

```
So, the output should be 

```
1
3
3
9
9
```

Solution Code:n = int(input())
maximum = 0
for i in range(1, n+1):
    num = int(input())
    if num > maximum:
        maximum = num
    print(maximum)"
1b485567-282c-428f-9fc7-9407dc291aa2,"Given a number `N`, write a program that reads `N` numbers and prints each of the given `N` numbers by rounding upto **2** decimals on a new line.

---

#### Input

The first line of input contains an integer representing `N`.
The next `N` lines of input contain floats.

---

#### Output

The output should be `N` lines containing floats that are rounded upto **2** decimals.

---

#### Explanation

For example, if the given number is `N = 3`

- The **3** numbers are **3.1415**, **2.7183**, and **5.123456**.

In the given numbers,

- Rounding **3.1415** to **2** decimals is **3.14**.
- Rounding **2.7183** to **2** decimals is **2.72**.
- Rounding **5.123456** to **2** decimals is **5.12**.

The output should be,

```
3.14
2.72
5.12
```


Solution Code:number = int(input())

for i in range(number):
 float_number = float(input())
 print(round(float_number, 2))"
b392b23c-e3c5-4845-ab21-b7bb51a721f5,"Given two numbers `X` and `N`, write a program to find the sum of `N` terms in the given series. Then, print the sum by rounding up to **4** decimals in the given series.

**Series:**

<div style=""background-color: #3c4257; padding: 15px; color: #f8f8f2;border-radius: 4px; margin: 10px;font-size: 18px;font-family: Monaco, Menlo, 'Ubuntu Mono', Consolas, source-code-pro, monospace"">
X,X<sup>2</sup>,X<sup>3</sup>,X<sup>4</sup>, ... N terms
</div>

<br/>

**Terms in the given series:**

| Term Number | Term          | Power |
| ----------- | ------------- | ----- |
| First Term  | X<sup>1</sup> | 1     |
| Second Term | X<sup>2</sup> | 2     |
| Third Term  | X<sup>3</sup> | 3     |
| Fourth Term | X<sup>4</sup> | 4     |
| ..          | ..            | ..    |

---

#### Input

The first line of input contains a float representing `X`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing a float representing the sum of the series **(X,X<sup>2</sup>,X<sup>3</sup>,X<sup>4</sup>,...)** rounded up to **4** decimals up to `N` terms.

---

#### Explanation

For example, if the given numbers are `X = 2.16` and `N = 4`,

- Number of terms is **4**.

- The terms from the **first term** to the **fourth term** in the given series are **2.16** (2.16<sup>1</sup>), **4.6656** (2.16<sup>2</sup>), **10.077696** (2.16<sup>3</sup>), **21.76782336** (2.16<sup>4</sup>).

**Terms in the given series:**

| Term Number | Term (X = 2.16)                | Power |
| ----------- | ------------------------------ | ----- |
| First Term  | 2.16<sup>1</sup> (2.16)        | 1     |
| Second Term | 2.16<sup>2</sup> (4.6656)      | 2     |
| Third Term  | 2.16<sup>3</sup> (10.077696)   | 3     |
| Fourth Term | 2.16<sup>4</sup> (21.76782336) | 4     |

- The sum of the series up to **4** terms is **38.67111936**. (`2.16 + 4.6656 + 10.077696 + 21.76782336 = 38.67111936`)
- The sum of the series rounded up to **4** decimals is **38.6711**.

The output should be **38.6711**.


Solution Code:x = float(input())
number = int(input())

sum_of_numbers = 0

for power in range(1, number + 1):
 term = x ** power
 sum_of_numbers += term


print(round(sum_of_numbers, 4))"
06f3e59e-5ea7-4a64-9d8b-94ff4c6edb36,"Given two numbers `N` and `S`, write a program to find the sum of the given `N` numbers and round it up to **3** decimals. Check whether the sum that is rounded up to **3** decimals is equal to `S` or not.

Print **True** if the sum of `N` inputs rounded up to **3** decimals is equal to `S`. Otherwise, print **False**.

---

#### Input

The first line of input contains an integer representing `N`.
The second line of input contains a float representing `S`.
The next `N` lines of input contain floats.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the sum of `N` inputs rounded up to **3** decimals is equal to `S`. Otherwise, **False** should be printed.

---

#### Explanation

For example, if the given numbers are `N = 3` and `S = 11.087`,

- The **3** inputs are **2.156, 3.1415,** and **5.7894**.
- The sum of the given **3** inputs is **11.0869**. (`2.156 + 3.1415 + 5.7894 == 11.0869`)
- The sum rounded up to **3** decimals is **11.087**.
- The sum of **3** inputs rounded up to **3** decimals is equal to `S` `(11.087 == 11.087)`.

The output should be **True**.


Solution Code:number = int(input())
given_sum = float(input())

sum_of_numbers = 0

for i in range(number):
 number = float(input())
 sum_of_numbers = sum_of_numbers + number


is_equal = round(sum_of_numbers, 3) == given_sum

print(is_equal)"
8e9f575b-7fd1-4adf-9067-70b0d71ffda3,"Write a program that reads an amount `A` and prints the minimum number of **2000**, **500**, **200**, **50**, **20**, **5**, **2** and **1** rupee notes required for the given amount.

---

#### Input

The input will be a single line containing an integer representing the amount `A`.

---

#### Output

The output should be a single line containing a string that has the number of notes of **2000**, **500**, **200**, **50**, **20**, **5**, **2** and **1** rupee notes required for the given amount.

---

#### Explanation

For example, if the given amount `A = 2257`,

<ul style=""list-style-type: none;padding:0;"">
  <li style=""margin:0;"">
    <details style=""margin:0;"">
      <summary style=""margin:0;padding:0;"">Detailed Explanation of Denominations</summary>
        <ul style=""list-style-type: none;"">
          <li style=""margin:0;padding:0;"">* The number of **2000** rupee notes required for **2257** is **1** (`2257 / 2000 = 1.12`). The remaining amount is **257** (`2257 - (2000 * 1) = 257`).</li>
          <li style=""margin:0;padding:0;"">* The number of **500** rupee notes required for **257** is **0** (`257 / 500 = 0.51`).</li>
          <li style=""margin:0;padding:0;"">* The number of **200** rupee notes required for **257** is **1** (`257 / 200 = 1.28`). The remaining amount is **57** (`2257 - (2000 * 1) - (200 * 1) = 57`).</li>
          <li style=""margin:0;padding:0;"">* The number of **50** rupee notes required for **57** is **1** (`57 / 50 = 1.14`). The remaining amount is **7** (`2257 - (2000 * 1) - (200 * 1) - (50 * 1) = 7`).</li>
          <li style=""margin:0;padding:0;"">* The number of **20** rupee notes required for **7** is **0** (`7 / 20 = 0.35`).</li>
          <li style=""margin:0;padding:0;"">* The number of **5** rupee notes required for **7** is **1** (`7 / 5 = 1.4`). The remaining amount is **2** (`2257 - (2000 * 1) - (200 * 1) - (50 * 1) - (5 * 1) = 2`).</li>
          <li style=""margin:0;padding:0;"">* The number of **2** rupee notes required for **2** is **1** (`2 / 2 = 1`).</li>
        </ul>
    </details>
  </li>
</ul>

Number of **2000** rupee notes => 2000 x 1   = 2000
Number of **500** rupee notes    =>   500 x 0  =        0
Number of **200** rupee notes    =>   200 x 1   =   200
Number of **50** rupee notes      =>      50 x 1   =     50
Number of **20** rupee notes      =>      20 x 0  =        0
Number of **5** rupee notes         =>        5 x 1   =       5
Number of **2** rupee notes         =>        2 x 1   =       2
Number of **1** rupee notes           =>        1 x 0  =       0
------------------------------------------------------
Total                                            =>                      2257
------------------------------------------------------

The output should be `2000:1 500:0 200:1 50:1 20:0 5:1 2:1 1:0`.

Solution Code:amount = int(input())
note2000 = 0
note500 = 0
note200 = 0
note50 = 0
note20 = 0
note5=0
note2=0
note1=0
if amount >= 2000:
    note2000 = int(amount/2000)
    amount = (amount%2000)
if amount >= 500:
    note500=int(amount/500)
    amount= (amount%500)
if amount >= 200:
    note200 = int(amount / 200)
    amount = (amount % 200)
if amount >=50:
    note50 = int(amount /50)
    amount= (amount%50)
if amount >= 20:
    note20 = int(amount/20)
    amount = (amount%20)
if amount >= 5:
    note5 =int(amount/5)
    amount= (amount%5)
if amount >=2:
    note2=int(amount/2)
    amount=(amount%2)

note1 = (amount)

print(""2000:""+str(note2000) + "" 500:""+str(note500) + "" 200:""+str(note200) + "" 50:""+str(note50) + "" 20:""+str(note20) + "" 5:""+str(note5) + "" 2:""+str(note2) + "" 1:""+str(note1))"
900db56e-9b6b-4a57-9a53-876e08132a3c,"Given a character `C`, write a program to check if the `C` is a `Lowercase Letter` or `Uppercase Letter` or `Digit` or a `Special Character`.

<MultiLineNote>
A special character is a character that is not an alphabetic or numeric character.

Examples of special characters are **!, @, #, $, %, ^, &, *, ~,**.
</MultiLineNote>

---

#### Input

The input will be a single line containing a character representing `C`.

---

#### Output

The output should be a single line containing a string. Print **Digit** if given `C` is a number, print **Lowercase Letter** if `C` is a lowercase letter, print **Uppercase Letter** if `C` is an uppercase letter. Otherwise, print **Special Character**.

---

#### Explanation

For example, if the given character is `C = ""9""`,

- The **9** (`C`) is a digit. 

The output should be **Digit**.

<br/>

For example, if the given character is `C = ""&""`,

- The **&** (`C`) is a special character. 

The output should be **Special Character**.

Solution Code:n=input()
if (n.isdigit()):
    print(""Digit"")
elif (n==n.upper()) and (n==n.lower()):
    print(""Special Character"")
elif (n==n.upper()):
    print(""Uppercase Letter"")
elif (n==n.lower()):
    print(""Lowercase Letter"")"
a45c72b7-6a26-4c69-9867-59ff23221105,"In this problem, you need to write a program to calculate the electricity bill for a household, based on the units of electricity the household consumed. The price for unit varies based on the slab. The charges per unit for different slabs are as mentioned below:<br/>For the first 50 units (0-50), the charge is 2/unit<br/>For the next 100 units (51-150), the charge is 3/unit<br/>For the next 100 units (151-250), the charge is 5/unit<br/>For above 250 units (251 and above), the charge is 8/unit<br/>Apart from these charges, there is also an additional surcharge of 20% on the total amount is added to the bill.<hr><b>Input</b><br/><br/>The input will be a single line containing an integer. <hr><b>Output</b><br/><br/>The output should be a single line containing the calculated bill amount. <hr><b>Explanation</b><br/><br/>For example, if the given number of units is 50.

<pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 0em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(255,255,255,.05);border-radius: 0px;padding: 0em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">Charges 2/unit for 0 to 50 units   =&gt;  50 x 2   = 100
Charges 3/unit for 51 to 150 units =&gt;   0 x 3   =   0
Charges 5/unit for 151 to 250      =&gt;   0 x 5   =   0
Charges 8/unit for 251 and above   =&gt;   0 x 8   =   0
-----------------------------------------------------
Total                              =&gt;             100 
Surcharge (20 % of Bill)           =&gt; 100 x 0.2 =  20
-----------------------------------------------------
Bill                               =&gt;             120
-----------------------------------------------------
</code></pre>
So the total bill should be 120.0


For example, if the given number of units is 200.

<pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 0em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(255,255,255,.05);border-radius: 0px;padding: 0em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">Charges 2/unit for 0 to 50 units   =&gt;  50 x 2   = 100
Charges 3/unit for 51 to 150 units =&gt; 100 x 3   = 300
Charges 5/unit for 151 to 250      =&gt;  50 x 5   = 250 
Charges 8/unit for 251 and above   =&gt;   0 x 8   =   0
-----------------------------------------------------
Total                              =&gt;             650 
Surcharge (20 % of Bill)           =&gt; 650 x 0.2 = 130
-----------------------------------------------------
Bill                               =&gt;             780
-----------------------------------------------------
</code></pre>
So the total bill should be 780.0

Solution Code:units = int(input())

bill = 0

if units < 50:
    bill = 2 * units
elif units < 150:
    bill = (2 * 50) + (3 * (units - 50))
elif units < 250:
    bill = (2 * 50) + (3 * 100) + (5 * (units - 150))
elif units >= 250:
    bill = (2 * 50) + (3 * 100) + (5 * 100) + (8 * (units - 250))

surcharge = (0.2 * bill)

total_bill = (bill + surcharge)

print(total_bill)"
cf3e1ff7-6021-4103-b2f3-00ac1ad5bfdc,"Write a program that reads a string and a number `N` and checks if the first `N` characters of the string and the last `N` characters of the string are, **not the same**.

---

#### Input

The first line of input contains a string.
The second line of input contains an integer.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the first `N` characters of the string and the last `N` characters of the string are **not the same**, otherwise **False** should be printed.

---

#### Explanation

For example, if the given string is **toronto** and the number `N = 2`,

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""display: table-cell;vertical-align: inherit;font-weight: 900; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">t</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">o</div>
   <div style=""display: table-cell;color: #808080;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">r</div>
   <div style=""display: table-cell;color: #808080;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">o</div>
   <div style=""display: table-cell;color: #808080;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">n</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">t</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 0;padding: 8px 12px;"">o</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""display: table-cell; vertical-align: inherit;font-weight: 900;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
   <div style=""display: table-cell; vertical-align: inherit;font-weight: 900;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
   <div style=""display: table-cell;color: #808080; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
   <div style=""display: table-cell;color: #808080; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
   <div style=""display: table-cell;color: #808080; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
   <div style=""display: table-cell; vertical-align: inherit;font-weight: 900;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
   <div style=""display: table-cell; vertical-align: inherit;font-weight: 900;border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">6</div>
</div>
<br/>

- The first **2** characters of **toronto** are **to**.
- The last **2** characters of **toronto** are **to**.
- The first **2** characters (**to**) and the last **2** characters (**to**) are the **same**.

The output should be **False** as the first **2** characters and the last **2** characters are the **same**.

---

For example, if the given string is **educated** and the number `N = 3`,

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""display: table-cell;vertical-align: inherit;font-weight: 900; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">e</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">d</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">u</div>
   <div style=""display: table-cell;color: #808080;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">c</div>
   <div style=""display: table-cell;color: #808080;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">a</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">t</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">e</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 0;padding: 8px 12px;"">d</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""display: table-cell; vertical-align: inherit;font-weight: 900;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
   <div style=""display: table-cell; vertical-align: inherit;font-weight: 900;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
   <div style=""display: table-cell; vertical-align: inherit;font-weight: 900;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
   <div style=""display: table-cell;color: #808080; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
   <div style=""display: table-cell;color: #808080; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
   <div style=""display: table-cell; vertical-align: inherit;font-weight: 900;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
   <div style=""display: table-cell; vertical-align: inherit;font-weight: 900;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">6</div>
   <div style=""display: table-cell; vertical-align: inherit;font-weight: 900;border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">7</div>
</div>
<br/>

- The first **3** characters of **educated** are **edu**.
- The last **3** characters of **educated** are **ted**.
- The first **3** characters (**edu**) and the last **3** characters (**ted**) are **not** same.

The output should be **True** as the first **3** characters and the last **3** characters are **not** same.

Solution Code:String = input()
N = int(input())
string_length = len(String)
start_index = string_length - N
first_part = String[:N]
last_part = String[start_index:]

if first_part != last_part :
    print(""True"")
else :
    print(""False"")"
534e8b97-e3c5-4005-8e96-a297a85ca48e,"Given two numbers `X` and `N`, write a program to print the **sum** of `N` terms in the given series.

**Series:**

<div style=""background-color: #3c4257; padding: 15px; color: #f8f8f2;border-radius: 4px;margin: 10px;font-size: 18px;font-family:Monaco, Menlo, 'Ubuntu Mono', Consolas, source-code-pro, monospace"">
X<sup>2</sup>, -X<sup>4</sup>, X<sup>6</sup>, -X<sup>8</sup>, ... N terms
</div>

<br/>

**Terms in the given series:**

| Term Number | Term             | Power |
| ----------- | ---------------- | ----- |
| First Term  | X<sup>2</sup>    | 2     |
| Second Term | -(X<sup>4</sup>) | 4     |
| Third Term  | X<sup>6</sup>    | 6     |
| Fourth Term | -(X<sup>8</sup>) | 8     |
| ..          | ..               | ..    |

---

#### Input

The first line of input contains an integer representing `X`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the **sum** of the series from the **first term** to the **Nth term**.

---

#### Explanation

For example, if the given numbers are `X = 2` and `N = 6`,

- Number of terms is **6**.
- The terms from the **First Term** to the **Sixth Term** in the given series are **4** (2<sup>2</sup>), **-16** (-(2<sup>4</sup>)), **64** (2<sup>6</sup>), **-256** (-(2<sup>8</sup>)), **1024** (2<sup>10</sup>) and **-4096** (-(2<sup>12</sup>)).

  **Terms in the given series:**

  | Term Number | Term (X = 2)              | Power |
  | ----------- | ------------------------- | :-----: |
  | First Term  | 2<sup>2</sup> (4)         | 2     |
  | Second Term | -(2<sup>4</sup>) (-16)    | 4     |
  | Third Term  | 2<sup>6</sup> (64)        | 6     |
  | Fourth Term | -(2<sup>8</sup>) (-256)   | 8     |
  | Fifth Term  | 2<sup>10</sup> (1024)     | 10    |
  | Sixth Term  | -(2<sup>12</sup>) (-4096) | 12    |

- Sum of the terms from the **first term** to the **sixth term** is **-3276**. (`4 + (-16) + 64 + (-256) + 1024 + (-4096) = -3276`

The output should be **-3276**.


Solution Code:x = int(input())
n = int(input())

sum_of_terms = 0
power = 0

for each_number in range(1, n + 1):

 power = power + 2
 term = x ** power

 is_term_negative = (each_number % 2 == 0)
 if is_term_negative:
 term = term * (-1)

 sum_of_terms = sum_of_terms + term

print(sum_of_terms)"
77665d1f-8a5a-46bf-b58e-2c41b2590b5c,"Write a program that reads two numbers `X` and `N` and prints the product of `N` numbers after `X`.

---

#### Input

The first line of input contains an integer representing `X`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing an integer obtained by multiplying the `N` numbers after `X`. 

---

#### Explanation

For example, if the given numbers are `X = 4` and `N = 2`,

- The **2** numbers after **4** are **5** and **6**.
- The product of the next **2** numbers from **4** is (`5 * 6 = 30`).

The output should be **30**.

Solution Code:X = int(input())
N = int(input())
counter = 0
product = 1
while counter < N:
    counter = counter + 1
    product = product * (X + counter)
print(product)"
f0d0b34b-5610-4079-a401-aa4a8eaf1f9f,"Given two numbers `M` and `N`, write a program to print all the **Armstrong Numbers** starting from `M` to `N`. If there are no Armstrong numbers, print `-1`.

<MultiLineNote>

A number `N` is an Armstrong Number, if the sum of each digit to the power of `L` is equal to `N`. `L` is the count of digits in `N`.

For example if the given number `N = 153`,

- The number **153** has **3** digits **1, 5** and **3**.
- The sum of each digit in **153** to the power of **3** is **153**. **((1<sup>3</sup>) + (5<sup>3</sup>) +(3<sup>3</sup>))**

The sum of each digit in **153** to the power of **3** is equal to **153**.
So, **153** is an **Armstrong Number**.

</MultiLineNote>

---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should contain all the Armstrong numbers from `M` to `N`, separated by a space. If there are no Armstrong numbers, print `-1`.

---

#### Explanation

For example, if the given numbers are `M = 300` and `N = 500`,

- The **Armstrong Numbers** between **300** to **500** are **370, 371** and **407**.

- The number **370** is an Armstrong number because,

  - The number **370** has **3** digits **3, 7** and **0**.
  - The sum of each digit in **370** to the power of **3** is **370**. **((3<sup>3</sup>) + (7<sup>3</sup>) +(0<sup>3</sup>))**

- The number **371** is an Armstrong number because,
  - The number **371** has **3** digits **3, 7** and **1**.
  - The sum of each digit in **371** to the power of **3** is **371**. **((3<sup>3</sup>) + (7<sup>3</sup>) +(1<sup>3</sup>))**
- The number **407** is an Armstrong number because,
  - The number **407** has **3** digits **4, 0** and **7**.
  - The sum of each digit in **407** to the power of **3** is **407**. **((4<sup>3</sup>) + (0<sup>3</sup>) +(7<sup>3</sup>))**

So, the output should be `370 371 407`.

For example, if the given numbers are `M = 10` and `N = 150`,

- There is no Armstrong number between **10** and **150**.

So, the output should be `-1`.

Solution Code:M = int(input())
N = int(input())

result = ''

for number in range(M,N+1):
    stringifiedNumber = str(number);
    power = len(stringifiedNumber);
    sumOfNumber = 0;
    for digit in stringifiedNumber:
        sumOfNumber += int(digit)**power
    if number==sumOfNumber:
        result += stringifiedNumber + "" ""

if (len(result)>0):
    print(result)
else:
    print(""-1"")"
2980e0bd-03d2-4ee1-a227-670debfcf42f,"Given two numbers `N` and `K`, write a program to print the `Kth` largest factor of the number `N`.

<MultiLineNote>
A **Factor** of a number is a positive integer that divides the number exactly, leaving no remainder.
</MultiLineNote>
---

#### Input

The first line of input contains an integer representing `N`.
The second line of input contains an integer representing `K`.

---

#### Output

The output should be a single line containing an integer that is the `Kth` largest factor of `N`. Print `1` if the number of factors of `N` is less than `K`.

---

#### Explanation

For example, if the given numbers are `N = 12` and `K = 3`,

- The factors of **12** are **1**, **2**, **3**, **4**, **6** and **12**.
- The **3**rd largest factor of **12** is **4**.

The output should be **4**.

Solution Code:number = int(input()) # reading inputs
k = int(input())
factor = number
count = 0
is_kth_largest_factor_found = False
for i in range(1, number+1):
    if not is_kth_largest_factor_found:
        if (number % factor) == 0:
            count = count + 1
        if count == k:
            print(factor)
            is_kth_largest_factor_found = True
    factor = factor - 1
if count<k:
    print(1)"
e3d78f7f-85c7-4c64-a1ad-59f7cf459dec,"Write a program that reads three numbers `A`, `B`, and `C` and checks if any of the given numbers is between **9** and **21**.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.
The third line of input contains an integer representing `C`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if any of the given numbers is between **9** and **21**. Otherwise, **False** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 2`, `B = 4`, and `C = 16`,

✖ `A` is between **9** and **21**. (**2** is **not** between **9** and **21**)
✖ `B` is between **9** and **21**. (**4** is **not** between **9** and **21**)
✔ `C` is between **9** and **21**. (**16** is between **9** and **21**)

The output should be **True** as one of the given numbers is between **9** and **21**.

Solution Code:a=int(input())
b=int(input())
c=int(input())
is_between_for_a = (a > 9) and (a < 21)
is_between_for_b = (b > 9) and (b < 21)
is_between_for_c = (c > 9) and (c < 21)
result = is_between_for_a or is_between_for_b or is_between_for_c
if result:
    print(""True"")
else:
    print(""False"")"
3f6705b4-c90c-40cc-83df-ff6e062f3f3c,"Given a number `N`, write a program to print **Armstrong numbers** from **1** to **N** each on a new line.

<MultiLineNote>

A number `N` is an Armstrong Number, if the sum of each digit to the power of `L` is equal to `N`. Where `L` is the count of digits in `N`.

For example if the given number `N = 153`,

- There are **3** (`L = 3`) digits in **153** are **1**, **2**, **3** .
- The sum of each digit in **153** to the power of **3** is,
- Sum = (1 <sup> 3</sup> )+ (5 <sup> 3 </sup>) +( 3 <sup> 3 </sup>) = 1 + 125 + 27 = **153**

The sum of each digit in **153** to the power of **3** is equal to **153**.
So, **153** is an **Armstrong Number**.

</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should contain the **Armstrong numbers** from **1** to `N`, each on a new line.

---

#### Explanation

For example, if the given number is `N = 200`,

- The **Armstrong numbers** from **1** to **200** are **1, 2, 3, 4, 5, 6, 7, 8, 9, 153**.

  - There is only **1** digit in **1** is **1**.
  - The sum of each digit in **1** to the power of **1** is **1**. (**1<sup>1</sup>**)
  - The sum of each digit in **1** to the power of **1** is equal to the number **1**.

  So, the number **1** is an **Armstrong number**.
  <br>

  - There are **3** digits in **153** are **1**, **5** and **3**.
  - The sum of each digit in **153** to the power of **3** is **153**. (**1<sup>3</sup>+5<sup>3</sup>+3<sup>3</sup>**).
  - The sum of each digit in **153** to the power of **3** is equal to the number **153**.

  So, the number **153** is an **Armstrong number**.

The output should be,

```
1
2
3
4
5
6
7
8
9
153
```

Solution Code:n = int(input())

for number in range(1, n + 1):
 sum_of_power_of_digits = 0
 number = str(number)
 power = len(number)
 
 
 for each_digit in number:
 each_digit = int(each_digit)
 sum_of_power_of_digits = sum_of_power_of_digits + (each_digit ** power)
 
 number = int(number)
 is_armstrong = sum_of_power_of_digits == number

 if is_armstrong:
 print(number)"
242616ff-7236-4eb8-af70-3883f5990ad6,"Write a program that reads two numbers `A` and `B` and checks,

- If `A` is less than or equal to `B`.
- If `B` is less than or equal to `A`.

Print the result as shown in the sample output.

---

#### Input

The first line of input contains an integer `A`.
The second line of input contains an integer `B`.

---

#### Output

The first line of output should be a string as shown in the sample output.
The second line of output should be a string as shown in the sample output.

---

#### Explanation

For example, if the given numbers are `A = 5` and `B = 3`,

✖ `A` is less than or equal to `B`. (**5** is not less than or equal to **3**)
✔ `B` is less than or equal to `A`. (**3** is less than or equal to **5**)

The output should be

```
A <= B is False
B <= A is True
```


Solution Code:A = int(input())
B = int(input())

is_a_less_than_or_equalto_b = (A <= B)
is_a_less_than_or_equalto_b = str(is_a_less_than_or_equalto_b)

is_b_less_than_or_equalto_a = (B <= A)
is_b_less_than_or_equalto_a = str(is_b_less_than_or_equalto_a)

print(""A <= B is "" + is_a_less_than_or_equalto_b)
print(""B <= A is "" + is_b_less_than_or_equalto_a)"
6b4cfb32-ae44-495c-a902-74b395f1448a,"Write a program that reads a three-digit number and checks if all the below conditions are satisfied.

- The number contains **1**.
- The sum of all the digits of the number is less than **12**.
- The last digit of the number is equal to **5**.

---

#### Input

The input will be a single line containing a three-digit integer.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if all the given conditions are satisfied, otherwise **False** should be printed.

---

#### Explanation

For example, if the given number is **315**,

✔ The number contains **1**. (The second digit of **315** is equal to **1**)
✔ Sum of all the digits of the number is less than **12**. (`3 + 1 + 5 = 9`, **9** is less than **12**)
✔ The last digit of the number is **5**. (The last digit of **315** is **5**)

The output should be **True** as all the given conditions are satisfied.


Solution Code:number = input()

first_digit = number[0]
first_digit = int(first_digit)

second_digit = number[1]
second_digit = int(second_digit)

third_digit = number[2]
third_digit = int(third_digit)

is_digit_one = (first_digit == 1) or (second_digit == 1) or (third_digit == 1)

sum_of_digits = first_digit + second_digit + third_digit
is_sum_less_than = sum_of_digits < 12

is_last_digit_five = third_digit == 5

result = is_digit_one and is_sum_less_than and is_last_digit_five
print(result)"
7afe05c3-9ec6-4418-8d8c-480af53589ee,"Write a program that reads a three-digit number and checks if all the digits of the number are the same.

---

#### Input

The input will be a single line containing a three-digit integer.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if all the digits of the number are the same, otherwise **False** should be printed.

---

#### Explanation

For example, if the given number is **222**, 

* The first digit (**2**) is equal to the second digit (**2**).
* The second digit (**2**) is equal to the third digit (**2**).

The output should be **True** as all the digits of the number **222** are the same.

Solution Code:n = input()
first_digit = int(n[0])
second_digit = int(n[1])
third_digit = int(n[2])
print(first_digit == second_digit and second_digit == third_digit)"
4b970c5f-dc6e-4b78-a7a9-e1a4a120c2a4,"Write a program that reads a number, and checks if the given number is between **25** and **75**.

---
Note: 25 and 75 are excluded.
#### Input

The input will be a single line containing an integer.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the given number is between **25** and **75**, otherwise **False** should be printed.

---

#### Explanation

For example, if the given number is **35**,

- The number **35** is greater than **25**.
- The number **35** is less than **75**.
- So, the number **35** is between **25** and **75**.

The output should be **True**.

Solution Code:n = int(input())
is_between = ((n > 25) and (n < 75))
print(is_between)"
fb88fe9e-942d-495f-9a6f-64becc529f5d,"Write a program that reads a distance `D` in km and calculates the total score.

- For the first **40** km (`0 - 40 km`), the score for each km is **2**.
- For the next **20** km (`41 - 60 km`), the score for each km is **4**.
- For the next **60** km (`61 - 120 km`), the score for each km is **6**.
- For the distance above **120** km, the score for each km is **8**.
- Apart from the above scores, there is a bonus score of **50**.

---

#### Input

The input will be a single line containing an integer representing `D`.

---

#### Output

The output should be a single line containing an integer that is the score.

---

#### Explanation

For example, if the given distance in km is `D = 70`,

As `D` is greater than **60** km, the total score is the sum of the score of first **40** km, score of the next **20** km, score of the remaining distance after **60** km and the bonus score.

Score is **2** for each km for 0 to 40 km        =>  40 x 2  =  80
Score is **4** for each km for 41 to 60 km      =>  20 x 4  =  80
Score is **6** for each km for 61 to 120 km     =>  10 x 6  =  60
Score is **8** for each km for above 120 km   =>    0 x 8  =    0
------------------------------------------------------------
Total                                                              =>                  220
Bonus Score                                                 =>                    50
------------------------------------------------------------
Total Score                                                   =>                  270
------------------------------------------------------------


<details style=""margin:0;"">
      <summary style=""margin:0;padding:0;"">Detailed Explanation to calculate the score</summary>
        <ul>
          <li style=""margin:0;padding:0;"">The score for each km for the first **40** km is **2**. Then the score for **40** km is **80**. (`40 * 2 = 80`)</li>
          <li style=""margin:0;padding:0;"">The score for each km for the next **20** km is **4**. Then the score for **20** km is **80**. (`20 * 4 = 80`)</li>
          <li style=""margin:0;padding:0;"">The score for each km for the above **60** km is **6**. The remaining distance after **60** km is **10** (`70 - 60 = 10`). Then the score for **10** km is **60**. (`10 * 6 = 60`)</li>
          <li style=""margin:0;padding:0;"">Sum of the above scores is **220** (`80 + 80 + 60 = 220`). Then the **total score** is the sum of above scores and bonus score that is **270**. (`220 + 50 = 270`)</li>
        </ul>
</details>

<br/>

The output should be **270**.

Solution Code:distance = int(input())

bonus_score = 50

first_40_score = 40 * 2
next_20_score = 20 * 4
next_60_score = 60 * 6

if distance <= 40:
    score = distance * 2
elif distance <= 60:
    remaining_distance = distance - 40
    remaining_distance_score = remaining_distance * 4
    score = first_40_score + remaining_distance_score
elif distance <= 120:
    remaining_distance = distance - 60
    remaining_distance_score = remaining_distance * 6
    score = first_40_score + next_20_score + remaining_distance_score
else:
    remaining_distance = distance - 120
    remaining_distance_score = remaining_distance * 8
    score = first_40_score + next_20_score + next_60_score + remaining_distance_score

score = score + bonus_score
print(score)"
259d7cbb-9cf7-42d4-a0f1-3fec503e7745,"Given a number `N`, write a program that prints the count of numbers from **1** to `N` that are not divisible by any of the following numbers **2, 3, 4, 5, 6, 7, 8, 9, 10**.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing the count of numbers from **1** to `N` that are not divisible by any of the following numbers **2, 3, 4, 5, 6, 7, 8, 9, 10**.

---

#### Explanation

For example, if the given number is `N = 11`,

- The numbers **1** and **11** are not divisible by any of the following numbers **2, 3, 4, 5, 6, 7, 8, 9, 10**.
- **2** numbers in the numbers from **1** to **11** are not divisible by any of the given numbers.

The output should be **2**.

Solution Code:n = int(input())

count = 0
for i in range(1, n + 1):

    is_divisible = 0
    for j in range(2, 11):
        if i % j == 0:
            is_divisible = 1
    if is_divisible == 0:
        count += 1
"
0472c5f7-0f9a-479c-9f00-4af8bcebba99,"Given a string `S`, write a program to print the previous characters of all characters in `S` based on the Unicode value except space, each on a new line.

<MultiLineNote>
Do not consider spaces.
</MultiLineNote>

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should contain the previous characters of all characters in `S` based on the Unicode value except space, each on a new line.

---

#### Explanation

For example, if the given string is `S = ""big dog""`,

- Ignore the spaces.
- The characters in the given string except space are **b, i, g, d, o,** and **g**.
- The previous characters of all characters in `S` is,

| Character - Unicode | Previous character - Unicode |
| ------------------- | ---------------------------- |
| b - 98              | a - 97                       |
| i - 105             | h - 104                      |
| g - 103             | f - 102                      |
| d - 100             | c - 99                       |
| o - 111             | n - 110                      |
| g - 103             | f - 102                      |

The output should be,

```
a
h
f
c
n
f
```


Solution Code:string = input()

for each_character in string:
 if each_character != "" "":
 unicode_value = ord(each_character) - 1
 character = chr(unicode_value)
 
 print(character)"
0b05deae-bcde-44c8-9885-ca2193c125b7,"Given two numbers `M` and `N`, write a program to print the sum and average of the numbers from `M` to `N` each on a new line.

---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `N`.

---

#### Output

The first line of output should be an integer that is the sum of the numbers from `M` to `N`.
The second line of output should be a float that is the average of the numbers from `M` to `N`.

---

#### Explanation

For example, if the given numbers are `M = 5` and `N = 10`,

- The numbers from **5** to **10** are **5, 6, 7, 8, 9,** and **10**.
- The numbers count from **5** to **10** is **6**.
- The sum of the numbers from **5** to **10** is **45**.
- The average of the numbers is **7.5**(`45 / 6`).

The output should be,

```
45
7.5
```

Solution Code:first_number = int(input())
last_number = int(input())

sum_of_numbers = 0
average_of_numbers = 0
count = 0

for number in range(first_number, last_number + 1):
 sum_of_numbers = sum_of_numbers + number
 count = count + 1

average_of_numbers = sum_of_numbers / count

print(sum_of_numbers)
print(average_of_numbers)"
ff568e7f-c014-4235-b45a-475a74019d3f,"Given a string `S` and a number `N`, write a program to print the count of characters in `S` whose Unicode value is equal to the given number `N`.

---

#### Input

The first line of input contains a string representing `S`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should contain the count of characters in the string `S` whose Unicode value is equal to the given number `N`.

---

#### Explanation

For example, if the given string is `S = ""Google""` and the given number is `N = 111`,

- The characters in the string **`Google`** are **G, o, o, g, l** and **e**.
- The Unicode values of the above characters are,

| Character | Unicode value |
| --------- | ------------- |
| G         | 71            |
| **o**     | **111**       |
| **o**     | **111**       |
| g         | 103           |
| l         | 108           |
| e         | 101           |

- There are **2** characters **o** and **o** with the same unicode value **111**.

The output should be **2**.

Solution Code:string = input()
number = int(input())

count = 0

for each_character in string:
 if ord(each_character) == number:
 count = count + 1

print(count)"
de5f8985-25e3-4115-a8fd-08f239c4542c,"Given a number `N`, write a program that reads `N` numbers and prints the sum of prime numbers among the given numbers.

<MultiLineNote>
A **Prime Number** is a positive integer greater than **1** that has no factors other than **1** and itself.
</MultiLineNote>

---

#### Input

The first line of input contains an integer representing `N`.
The next `N` lines of input contain integers.

---

#### Output

The output should be a single line containing an integer obtained by adding the prime numbers in the given inputs.

---

#### Explanation

For example, if the given number is `N = 5`, 

- The **5** numbers are,

```
2 
5
6 
8 
3 
```

- The numbers that has no factors other than **1** and itself among the given numbers are **2, 5,** and **3**.
- The sum of numbers that has no factors other than **1** and itself among the given numbers is **10**. (`2 + 5 + 3 = 10`)

The output should be **10**.

Solution Code:N = int(input())
sum_of_prime_numbers = 0
for i in range(1, N+1):
    factors = 0
    number = int(input())                      
    for j in range(1, number+1):                
        if number%j == 0:
            factors += 1
    if factors == 2:  
        sum_of_prime_numbers += number                      
print(sum_of_prime_numbers)"
6e60492c-7878-4e32-9103-7f3b8d8a77cd,"Given a string, write a program to mirror the characters of the string in alphabetical order to create a secret message.<br/><br/>Note: Mirroring the characters in alphabetical order replacing the letters &#x27;a&#x27; with &#x27;z&#x27;, &#x27;b&#x27 with &#x27;y&#x27;, ... , &#x27;z&#x27 with &#x27;a&#x27. You need to mirror both uppercase and lowercase characters. You can ignore mirroring for all characters that are not letters.<br/><br/><table style=""background-color: transparent;border-collapse: collapse;border-spacing: 0;""><thead><tr><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">a</th><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">b</th><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">c</th><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">d</th><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">e</th><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">f</th><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">g</th><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">h</th><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">i</th><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">j</th><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">k</th><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">l</th><th style=""border-right: 0;padding: 8px 12px;"">m</th></tr></thead><tbody><tr><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">z</td><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">y</td><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">x</td><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">w</td><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">v</td><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">u</td><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">t</td><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">s</td><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">r</td><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">q</td><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">p</td><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">o</td><td style=""border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">n</td></tr></tbody></table><b style=""font-weight: bolder;"">&nbsp;</b><table style=""background-color: transparent;border-collapse: collapse;border-spacing: 0;""><thead><tr><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">n</th><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">o</th><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">p</th><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">q</th><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">r</th><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">s</th><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">t</th><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">u</th><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">v</th><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">w</th><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">x</th><th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">y</th><th style=""border-right: 0;padding: 8px 12px;"">z</th></tr></thead><tbody><tr><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">m</td><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">l</td><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">k</td><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">j</td><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">i</td><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">h</td><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">g</td><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">f</td><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">e</td><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">d</td><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">c</td><td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">b</td><td style=""border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">a</td></tr></tbody></table><hr><b>Input</b><br/><br/>The input will be a string in the single line containing spaces and letters (both uppercase and lowercase).<hr><b>Output</b><br/><br/>The output should be a single line containing the secret message. All characters in the output should be in lower case.<br/><hr><b>Explanation</b><br/><br/>For example, if the given input is &quot;python&quot;, &quot;p&quot; should replaced with &quot;k&quot;, similarly &quot;y&quot; with &quot;b&quot;, &quot;t&quot; with &quot;g&quot;, &quot;h&quot; with &quot;s&quot;, &quot;o&quot; with &quot;l&quot;, &quot;n&quot; with &quot;m&quot;. So the output should be &quot;kbgslm&quot;.

Solution Code:def getReverseLetter(letter):
    alphabet = ""abcdefghijklmnopqrstuvwxyz""
    alphabetReverse = ""zyxwvutsrqponmlkjihgfedcba""
    for i in range(0,len(alphabet)):
        if letter.islower() and letter==alphabet[i]:
            return alphabetReverse[i]
        if letter.isupper() and letter==alphabet[i].upper():
            return alphabetReverse[i].lower()
    return -1

def main():
    inputString = input()
    outputString=""""
    for letter in inputString:
        reverseLetter=getReverseLetter(letter)
        if(reverseLetter!=-1):
            outputString+=str(reverseLetter)
        else:
            outputString+=letter
    print(outputString)
main()"
609178f4-5533-4216-b102-8540d21ac3f8,"Given comma-separated numbers, write a program to print the **Median** of the given numbers.

<MultiLineNote>

**Median** is the middle value of the given numbers, where the numbers should be in ascending order.

For example, if the numbers are **`1,9,4,7,2`**,

- The numbers should be arranged in ascending order 1, 2, 4, 7, 9.
- The count of numbers is 5. So, the middle number is the third number.
- The median is **4** as it is the third number of the given numbers.

If the count of numbers is an even number, median is the average of the two middle values.

For example, if the numbers are **`3,7,10,15`**, 

- The median is **8.5** as the average of the two middle numbers (`7, 10`) is 8.5.


</MultiLineNote>

---

#### Input

The input will be a single line containing comma-separated integers.

---

#### Output

The output should be a single line containing a float that is the **Median** of the given comma-separated numbers.

---

#### Explanation

For example, if the given comma-separated numbers are `5,7,3,9,8,10`,

- The numbers in ascending order are **3**, **5**, **7**, **8**, **9**, and **10**.
- The count of numbers is **6** which is even.
- The middle values of the given list are **7** and **8**.
- The **Median** is **7.5** (`7 + 8 / 2 == 7.5`).

The output should be **7.5**

For example, if the given comma-separated numbers are `10, 15, 72, 51, 13`,

- The numbers in ascending order are **10**, **13**, **15**, **51**, and **72**.
- The count of numbers is **5** which is odd.
- The middle value is **15**.

The output should be **15**.


Solution Code:n = list(map(int, input().split("","")))
ascending = sorted(n)
length = len(ascending)


if length % 2 == 0:
    middle_num = int(length / 2)
    median = (ascending[middle_num] + ascending[middle_num-1]) / 2
    print(median)
else:
    middle_num1 = int(length / 2)
    print(ascending[middle_num1])"
34e59ce5-fcba-43db-9616-3e9805b094d0,"Write a program that reads two numbers `M` and `N`, and prints the odd numbers from `N` to `M` separated by a space.

---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing a string that has space-separated odd numbers from `N` to `M`, as shown in the sample output.

---

#### Constraints

`N` is always greater than or equal to `M`.

---

#### Explanation

For example, if the given numbers are `M = 1` and `N = 10`,

- Numbers from **10** to **1** are **10**, **9**, **8**, **7**, **6**, **5**, **4**, **3**, **2**, and **1**.
- The odd numbers from **10** to **1** are **9**, **7**, **5**, **3**, and **1**.

The output should be,

```
9 7 5 3 1
```


Solution Code:first_number = int(input())
last_number = int(input())

total_numbers = last_number - first_number
odd_numbers = """"

for i in range(total_numbers + 1):
 number = last_number - i
 is_odd = (number % 2 != 0)
 if is_odd:
 odd_numbers = odd_numbers + str(number) + "" ""

print(odd_numbers)"
6357cbab-347a-46fc-a6a1-17b31fe93fb3,"Write a program that reads two numbers `A` and `B` and checks if any of the given numbers is between **40** and **140**.

Print **Between 40 and 140: Yes** if any of the given numbers is between **40** and **140**. Otherwise, print **Between 40 and 140: No**.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a string. **Between 40 and 140: Yes** should be printed if any of the given numbers is between **40** and **140**. Otherwise, **Between 40 and 140: No** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 12` and `B = 100`,

✖ `A` is between **40** and **140**. (**12** is **not** between **40** and **140**)
✔ `B` is between **40** and **140**. (**100** is between **40** and **140**)

The output should be **Between 40 and 140: Yes** as `B` is between **40** and **140**.


Solution Code:first_number = int(input())
second_number = int(input())

is_first_number_between = (first_number > 40) and (first_number < 140)
is_second_number_between = (second_number > 40) and (second_number < 140)

if (is_first_number_between or is_second_number_between):
 print(""Between 40 and 140: Yes"")
else:
 print(""Between 40 and 140: No"")"
d8e407bd-763a-4e2e-9e60-470508aa834d,"Given a number `N`, write a program that reads `N` inputs and prints the number without decimals of the quotient of `N` inputs when each input is divided by **17**, each on a new line.

---

#### Input

The first line of input contains an integer representing `N`.
The next `N` lines of input contain integers.

---

#### Output

The output should be `N` lines containing the number without decimals of the quotient of `N` inputs when each input is divided by **17**, each on a new line.

---

#### Explanation

For example, if the given number is `N = 3`,

- The three inputs are **5**, **98**, and **376**.

- The quotient when **5** is divided by **17** is **0.294**. (`5 / 17 = 0.294`)
  - The number without decimals of **0.294** is **0**.
- The quotient when **98** is divided by **17** is **5.764**. (`98 / 17 = 5.764`)
  - The number without decimals of **5.764** is **5**.
- The quotient when **376** is divided by **17** is **22.117**. (`376 / 17 = 22.117`)
  - The number without decimals of **22.117** is **22**.

The output should be,

```
0
5
22
```


Solution Code:number = int(input())

for each_number in range(number):
 value = int(input())
 
 quotient = value // 17
 
 print(quotient)"
412c38cc-d8d2-42bf-ac6a-cf969985a585,"Given a string `S`, write a program to print the Unicode values of all the characters in `S`, each on a new line.

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should contain integers that are the Unicode values of all the characters in the string, each on a new line.

---

#### Explanation

For example, if the given string is `S = ""code""`,

- The characters in the string **`code`** are **c, o, d,** and **e**.
- The Unicode values of above characters are,

| Character | Unicode value |
| --------- | ------------- |
| c         | 99            |
| o         | 111           |
| d         | 100           |
| e         | 101           |

The output should be,

```
99
111
100
101
```

Solution Code:string = input()

for each_character in string:
 print(ord(each_character))"
aa449ba8-7929-47f5-99db-4f0db216410f,"Write a program to print if the given number is divisible by any of the lucky numbers 6, 3, 2 in decreasing order of priority(6 is luckier than 3 and 3 is luckier than 2).<br/>Print &quot;Number is divisible by&quot; followed by the luckiest number among the above 3 which can divide the number.<br/>Print &quot;Number is not divisible by 2, 3 or 6&quot; if the number is not divisible by any of them.<hr><b>Input</b><br/><br/>The input will be a single line containing a positive number.<hr><b>Output</b><br/><br/>If the given number is divisible by 6, print &quot;Number is divisible by 6&quot;.<br/>If the given number is divisible by 3, print &quot;Number is divisible by 3&quot;.<br/>If the given number is divisible by 2, print &quot;Number is divisible by 2&quot;.<br/>In all other cases print &quot;Number is not divisible by 2, 3 or 6&quot;.<hr><b>Explanation</b><br/><br/>In the example 126 is divisible by 2, 3 and 6<br/>But 6 takes precedence because 6 is luckiest amongst the three. So the output should be &quot;Number is divisible by 6&quot;

Solution Code:number = int(input())

remainder_2 = number % 2
remainder_3 = number % 3

is_lucky_number = False
if (remainder_2 == 0) and (remainder_3 == 0):
    print(""Number is divisible by 6"")
    is_lucky_number = True

if (remainder_3 == 0) and (not is_lucky_number):
    print(""Number is divisible by 3"")
    is_lucky_number = True

if (remainder_2 == 0)  and (not is_lucky_number):
    print(""Number is divisible by 2"")
    is_lucky_number = True

if not is_lucky_number:
    print(""Number is not divisible by 2, 3 or 6"")"
d9da937f-e7cd-4bd6-988b-fc16053a0359,"Write a program that reads two numbers `M` and `N` and prints odd numbers from `M` to `N` separated by a space.

---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing a string that has odd numbers from `M` to `N` separated by a space.

---

#### Explanation

For example, if the given numbers are `M = 5` and `N = 10`,

- Numbers from **5** to **10** are **5**, **6**, **7**, **8**, **9**, and **10**.
- The odd numbers among numbers from **5** to **10** are **5**, **7**, and **9**.

The output should be **5 7 9**.


Solution Code:start_number = int(input())
end_number = int(input())

result = """"

for number in range(start_number, end_number + 1):
 is_odd = (number % 2 == 1)
 
 if is_odd:
 result = result + str(number) + "" ""

print(result)"
4e22265e-8905-49e9-93dd-a6831f979640,"You are given the temperature T of an object in one of Celsius, Fahrenheit, and Kelvin scales.  

Write a program to print T in all scales viz Celsius, Fahrenheit, and Kelvin. 

Formula to convert from Fahrenheit F to Celsius C is 

```

    C = (F - 32) * 5 / 9.  
```

Formula to convert from Kelvin K to Celsius C is 

```
    
    C = K - 273.  

```

Here ""C"", ""F"", ""K"" represent that the temperature scale is in Celsius, Fahrenheit and Kelvin scales respectively.  

The input contains the temperature (a number) and the unit of the temperature scale (C, F, K) without any space.  

The output contains temperature in Celsius, Fahrenheit and Kelvin scales in each line in the format similar to input and the value of the temperature is rounded to 2 decimal places.

* * *

**Input**  
  
The first line of the input contain a temperature Value in one of Celsius, Fahrenheit, and Kelvin scales.

* * *

**Output**  
  
The first line of output should contain the Celsius value and the unit of the Celsius without any space.  

The second line of output should contain the Fahrenheit value and the unit of the Fahrenheit without any space.  

The third line of output should contain the Kelvin value and the unit of the Kelvin without any space.

* * *

**Explanation**  
  
For example, if the given temperature Value is 25C then Celsius value is 25.0C, Fahrenheit value is 77.0F, and Kelvin value is 298.0K.

Solution Code:temparature = input()   

unit = temparature[-1] 
value = temparature[:-1] 
if(unit==""C"" or unit==""c""):
    celcius = float(value);
    print(str(round(celcius,2)) + ""C"")
    print(str(round((celcius*9/5)+32,2)) + ""F"")
    print(str(round(celcius+273,2)) + ""K"")
elif(unit==""F"" or unit==""f""):
    fahr = float(value)
    print(str(round((fahr-32)*5/9,2)) + ""C"")
    print(str(round(fahr,2)) + ""F"")
    print(str(round((fahr-32)*5/9+273,2)) + ""K"")
elif(unit==""K"" or unit == ""k""):
    kelv = float(value)
    print(str(round(kelv-273,2)) + ""C"")
    print(str(round((kelv-273.)*9/5+32,2)) + ""F"")
    print(str(round(kelv,2)) + ""K"")"
3e3ca2c3-4d62-4db5-9f68-3683becddde3,"Given a sentence `S` contains space-separated words, write a program to print the word that comes first when the words are in dictionary order.

<MultiLineNote>
- Consider both uppercase and lowercase alphabets as the same.
- Dictionary order is a way of ordering words or sequences of characters based on their alphabetical order.
</MultiLineNote>

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a string that is a word in the given sentence that comes first when the words are in dictionary order.

---

#### Explanation

For example, if the given sentence is `S = ""He is bit slow""`,

- The words in the given sentence are **He, is, bit,** and **slow**.
- The words in the given sentence in dictionary order are **bit, He, is** and **slow**.
- The word in the given sentence that comes first in the dictionary is **bit**.

The output should be **bit**.


Solution Code:s = input()

first_word = s
word = """"

for i in range(len(s)):
    char = s[i]
    word += char
    
    if char == "" "" or i == len(s)-1:
        if word.lower() < first_word.lower():
            first_word = word
        word = """"

print(first_word)"
241ec277-1f92-463b-b02f-9a26483f4b51,"Given a MxN matrix,write a program to print all Anti-Diagonals elements of matrix

**Input**

The first line of input will contain a M, N values separated by space.
The second line will contain matrix A of dimensions MxN.

**Output**

The output should contain anti-diagonal elements separated by a line.
**Explanation**

For example, if M = 4, N = 4
Matrix A:

![](https://res.cloudinary.com/learning-platform/image/fetch/dpr_auto,w_auto,f_auto,q_auto/https://nkb-backend-ccbp-media-static.s3.ap-south-1.amazonaws.com/prod/media/profile_pic/card-notes-attachment/3a175e7e-0365-4ac9-9620-fdda34c1ce31.png)
```
4 4
1 2 3 4
5 6 7 8
9 10 11 12
13 14 15 16
```
So the output should be

```
1
2 5
3 6 9
4 7 10 13
8 11 14
12 15
16
```

Solution Code:def covert_sting_into_int(list_a):
    new_list=[]
    for each in list_a:
        k=int(each)
        new_list.append(k)
    return new_list

def get_anti_diagonals(matrix,m,n):
    anti_diagonal_mat=[]
    max_sum=m+n-2
    for i in range(max_sum+1):
        for j in range(i+1):
            if(j < m)and(i - j)<n:
                print(str(matrix[j][i-j])+"" "",end="""") 
        print()

m,n=input().split()
m,n=int(m),int(n)
num_list=[]
for i in range(m):
    list_a=input().split()
    list_a=covert_sting_into_int(list_a)
    num_list.append(list_a)
get_anti_diagonals_elements=get_anti_diagonals(num_list,m,n)
"
e7f7555e-a947-46dc-8032-31e3f6da7b34,"You are given an integer `N` as input. Write a program to read `N` inputs and print a list containing the elements in the last half of the list.


---

#### Input

The first line of input is an integer `N`.
The second line contains `N` space-separated integers.



---

#### Explanation

##### Sample Output 1

In the example, we are given `6` numbers `1, 2, 3, 4, 5, 6` as input.

The last half of elements of the list are `4, 5, 6`.
So, the output should be `[4, 5, 6]`.

##### Sample Output 2

In the example, we are given `5` numbers `1, 11, 13, 21, 19` as input.
The last half of elements of the list are `21, 19`.
So, the output should be `[21, 19]`.

Solution Code:N = int(input())
numbers = input().split()
Length = len(numbers)
for i in range(N):
    numbers[i] = int(numbers[i])
if (N % 2 != 0):                        
    half_list = numbers[(N + 1)//2:]  
else:
    half_list = numbers[N//2:]
print(half_list)"
342b3387-f9ba-4c71-99ab-81b0339bb295,"A function is given in the prefilled code that takes a list `L` and a number `N` as arguments.

Write a program that returns the index of the first occurrence of the given number `N` in the list `L` using recursion.

---

#### Input

The first line of input contains space-separated integers.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the index of the first occurrence of the number `N` in the list `L`.

---

#### Explanation

For example, if the given space-separated numbers are **7 1 3 8 4 3 8** and the number is `N = 8`,

- The given numbers are **7**, **1**, **3**, **8**, **4**, **3**, and **8**.

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
    <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">Numbers</div>
    <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">7</div>
    <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">1</div>
    <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">3</div>
    <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">8</div>
    <div style=""font-family: 'Roboto';color: #808080;font-weight: bold;display: table-cell;vertical-align: inherit;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">4</div>
    <div style=""font-family: 'Roboto';color: #808080;font-weight: bold;display: table-cell;vertical-align: inherit;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">3</div>
    <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: bold;font-weight: 900;text-align: center;border-right: 0;padding: 8px 12px;"">8</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
    <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit; font-weight:bold;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">Indices</div>
    <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
    <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
    <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
    <div style=""font-family: 'Roboto';display: table-cell; font-weight: 900;vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
    <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
    <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
    <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell;vertical-align: inherit;border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">6</div>
</div>

- The indices of the occurrences of the number **8** are **3** and **6**.
- The index of the first occurrence of the number **8** is **3**.

The output should be **3**.

Solution Code:def get_index(numbers_list, number, index):
    if int(numbers_list[index]) == number:
        return index
    return get_index(numbers_list, number, (index + 1))

numbers_list = input().split()
number = int(input())

index = 0

number_index = get_index(numbers_list, number, index)

print(number_index)"
f873a4ad-cc5d-4327-8c7c-c654f6a9ab72,"Given the weekday of the first day of the month, determine the day of the week of the given date in that month.


---

#### Input

The first line is a string `D`.
The second line is an integer `N`.


---

#### Output

The output should be a string.

---


#### Explanation

In the given example, `D = Monday`. As the 1st of the day of the month is a Monday, it means the 7th and 14th of the month will be Sundays (A week has 7 days). So the `16th` day (`N = 16`) of the month will be a Tuesday.

So, the output should be `Tuesday`.


Solution Code:d = input()
N = input()
N = int(N)

if d == ""Sunday"":
    day = 0
elif d == ""Monday"":
    day = 1
elif d == ""Tuesday"":
    day = 2
elif d == ""Wednesday"":
    day = 3
elif d == ""Thursday"":
    day = 4
elif d == ""Friday"":
    day = 5
elif d == ""Saturday"":
    day = 6
    
target_day = day+N-1
target_day = target_day%7 

if target_day == 0:
    print(""Sunday"")
elif target_day == 1:
    print(""Monday"")
elif target_day == 2:
    print(""Tuesday"")
elif target_day == 3:
    print(""Wednesday"")
elif target_day == 4:
    print(""Thursday"")
elif target_day == 5:
    print(""Friday"")
elif target_day == 6:
    print(""Saturday"")
"
55938949-c0f0-41af-bacf-15d39d2538bc,"Write a program that reads a string and prints the first part of the string that has numbers.

<MultiLineNote>
The given string contains 2 parts

* The first part contains only digits.
* The second part contains only one character.

Example: 10y, 1a

</MultiLineNote>

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing an integer that is the first part of the string that has digits.

---

#### Explanation

For example, if the given string is **10y**,

* The first part of the string contains **10**.
* The second part of the string contains **y**.

The output should be **10**.

Solution Code:string = input()

no_of_characters = len(string)
end_index = no_of_characters - 1

number = string[:end_index]
number = int(number)

print(number)"
f2e55e45-af7a-4f3e-86d2-3a65853d7a16,"Given a string `S`, write a program that prints the character with the **Least Unicode Value** and the character with the **Highest Unicode Value** separated by a space.

<MultiLineNote>
Unicode values are unique numbers that are given to every character, symbol and digit.
</MultiLineNote>

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a string that has the character with the **Least Unicode Value** and the character with the **Highest Unicode Value** separated by a space.

---

#### Explanation

For example, if the given string is `S = ""Five""`,

| Character | Unicode value |
| --------- | ------------- |
| **F**     | **70**        |
| i         | 105           |
| **v**     | **118**       |
| e         | 101           |

- The character with the **Least Unicode Value** is **F** and the character with the **Highest Unicode Value** is **v**.

The output should be **""F v""**.


Solution Code:s=input()

small = ""z""
large = ""A""
character = """"

for i in range(0,len(s)):
  if s[i] < small:
    small = s[i]
  if s[i] > large: 
      large=s[i]

print(small + "" "" + large)  "
c7017583-b437-4936-91ab-7195bf64ca93,"Given a string, write a program to print a secret message that replaces characters with numbers 'a' with 1, 'b' with 2, ..., 'z' with 26 where characters are separated by '-'.

Note: You need to replace both uppercase and lowercase characters. You can ignore replacing all characters that are not letters.

a        b        c        d        e        f        g        h        i        j
1        2        3        4        5        6        7        8        9        10

k        l        m        n        o        p        q        r
11        12        13        14        15        16        17        18

s        t        u        v        w        x        y        z
19        20        21        22        23        24        25        26
Input

The input will be a string in the single line containing spaces and letters (both uppercase and lowercase).
Output

The output should be a single line containing the secret message. All characters in the output should be in lower case.
Explanation

For example, if the given input is ""python"", ""p"" should replaced with ""16"", similarly""y"" with ""25"",""t"" with ""20"",""h"" with ""8"",""o"" with ""15"",""n"" with ""14"". So the output should be ""16-25-20-8-15-14"".
Sample Input 1
python
Sample Output 1
16-25-20-8-15-14
Sample Input 2
Foundations
Sample Output 2
6-15-21-14-4-1-20-9-15-14-19

reference code
str1 = input().lower().split()
s = """"
for j in str1:
    for i in j:
            s += str(ord(i)-96) + ""-""
    s = s.strip(""-"")
    s += "" ""
print(s)"
d1586046-2e0b-4301-a603-9c1ddf25ca33,"You are given a word `W` as input. Print `W` by adding a hyphen (`-`) between each letter in the word.

---

#### Input

The first line of input is a string `W`.

---

#### Explanation

In the given example, the word is `Hello`.

So, the output should be `H-e-l-l-o`.

Solution Code:word = input()
hyphen_word = """"
for i in (word):
  hyphen_word = hyphen_word+str(i)+'-'
print(hyphen_word[:-1])"
b81b19e4-2461-43c2-a824-b240e2a3a545,"Given two numbers `M` and `N`. Write a program to print all the **Prime Numbers** in the range from `M` to `N` . If no **Prime Numbers** present in the given range print **No Prime Numbers Found**.

<MultiLineNote>
A **Prime Number** is a positive integer greater than **1** that has no factors other than **1** and itself.
</MultiLineNote>

---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing the **Prime Numbers** from `M` to `N` separated by a space. If no prime numbers are present in the given range then **No Prime Numbers Found** should be printed.

---

#### Explanation

For example, if the given numbers are `M = 3` and `N = 15`,

- The numbers from **3** to **15** are **3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,** and **15**.
- The numbers that has no factors other than **1** and itself from **3** to **15** are **3, 5, 7, 11,** and **13**.
- There is a space after each prime number.

The output should be **3 5 7 11 13**.
<br/>
For example, if the given numbers are `M = 20` and `N = 22`,

- The numbers from **20** to **22** are **20, 21,** and **22**.
- There is no numbers that has no factors other than **1** and itself from **20** to **22**.

The output should be, **No Prime Numbers Found**.

Solution Code:m = int(input())
n = int(input())

prime_numbers = """"

for number in range(m , n + 1):
 if number > 1:
 factors = 0
 else:
 factors = 1
 
 for i in range(2, number):
 if (number % i) == 0:
 factors = factors + 1
 
 if factors == 0:
 prime_numbers = prime_numbers + str(number) + "" ""

if len(prime_numbers) > 0:
 print(prime_numbers)
else:
 print(""No Prime Numbers Found"")"
8d160ff9-c329-4c92-8ee0-fea435ff4d4d,"Given space-separated numbers, write a program to print the list of numbers that occur an odd number of times.

Print the numbers in a sorted order.

---

#### Input

The input will be a single line containing space-separated integers.

---

#### Output

The output should be a single line containing a list of numbers in sorted order that occur an odd number of times in a list.

---

#### Explanation

For example, if the given space-separated numbers are **1 10 1 3 3 3**,

- The number **1** occurs **2** times.
- The number **10** occurs **1** time.
- The number **3** occurs **3** times.
- The numbers that occur an odd number of times are **10** and **3**.
- Ascending order of numbers that occur odd number of times are **3** and **10**.

The output should be,

```
[3, 10]
```

<br/>

For example, if the given space-separated numbers are **58 37 79**,

- The number **58** occurs **1** time.
- The number **37** occurs **1** time.
- The number **79** occurs **1** time.
- The numbers that occur an odd number of times are **58**, **37** and **79**.
- Ascending order of numbers that occur odd number of times are **37**, **58** and **79**.

The output should be,

```
[37, 58, 79]
```

Solution Code:numbers_list = input().split()
new_list = []
output_list = []

for number in numbers_list:
    if new_list.count(number) == 0:
        new_list.append(number)
        
for each_number in new_list:
    number_count = numbers_list.count(each_number)
    if number_count % 2 == 1:
        output_list.append(int(each_number))
output_list.sort()
print(output_list)"
a579bfd0-7311-4ec8-adcc-91471704271a,"Given a list of numbers, write a program to print the smallest positive integer missing in the given numbers.<hr><b>Input</b><br/><br/>The input will be a single line containing numbers separated by space.<hr><b>Output</b><br/><br/>The output should be a single line containing the smallest missing number from given numbers.<hr><b>Explanation</b><br/><br/>For example, if the input numbers are 3, 1, 2, 5, 3, 7, 7.<br/>The number 1, 2, 3 are present. But the number 4 is not. So 4 is the smallest positive integers that is missing from the given numbers.

Solution Code:list_a = list(map(int, input().split()))
set_a = set()
for i in list_a:
    set_a.add(i)
list_set = list(set_a)
max_num = max(list_set)
index = []
for j in range(1, max_num+1):
    index = index + [j]
    if j not in list_set:
        print(j)
        break
    if index == list_set:
        print(max_num + 1)
    "
a2a471de-d7d0-4613-a07b-819028a4c58f,"Write a program that reads a number `N` and checks if the number `N` is between **50** and **100** or if the first digit of `N` is equal to **7**.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the number `N` is between **50** and **100** or if the first digit of `N` is equal to **7**, otherwise **False** should be printed.

---

#### Explanation

For example, if the given number is `N = 54`,

✔ The number `N` is between **50** and **100**. (**54** is between **50** and **100**)
✖ The first digit of `N` is equal to **7**. (The first digit of **54** is **5**. **5** is not equal to **7**)

The output should be **True** as `N` is between **50** and **100**.


Solution Code:N =input()
first_digit = N[0]
first_digit = int(first_digit)
first_digit_equal_to = (first_digit == 7)

number_is_between = (50 < int(N) < 100)
result = (first_digit_equal_to or number_is_between)
print(result)"
26ec4236-5d23-461b-9c4a-8bcff4df1193,"You are given some abbreviations as input. Write a program to print the acronyms separated by a dot(`.`) of those abbreviations.

---

#### Input

The first line of input contains space-separated strings.

---



#### Explanation

Consider the given abbreviation, `Indian Administrative Service`. We need to consider the first character in each of the words to get the acronym. We get the letter `I` from the first string `Indian`, we get the letter `A` from the second word `Administrative`, and we get the letter `S` from the third word `Service`. 
So, the final output should be `I.A.S`. 


Solution Code:abbreviation = input().split()

first_letter_of_each_word = []

for word in abbreviation:
  first_letter = word[0]
  first_letter_of_each_word += first_letter

print (""."".join(first_letter_of_each_word))"
a8578639-993d-44fe-a036-a0a3231d5ab8,"You are given two numbers, `A` and `B` where 1 <= A <= B, Write a program to find the number of perfect squares in the range A to B (including A and B).

---

#### Input

The first line of input is an integer `A`.
The second line of input is an integer `B`.

---



#### Explanation

In the given example, `A = 9` and `B = 100`. The perfect squares in the range A to B are

```
3 * 3 = 9
4 * 4 = 16
5 * 5 = 25
6 * 6 = 36
7 * 7 = 49
8 * 8 = 64
9 * 9 = 81
10 * 10 = 100

```

So, the output should be `8`.

Solution Code:M = int(input())
N = int(input())

count = 0
for i in range(M, N + 1):
    result = i ** 0.5 
    if int(result) == i ** 0.5:
        count = count + 1 
print(count)"
163f7019-59ed-4edc-a4e3-e5b974409854,"Given two numbers `M` and `N`. Write a program to print the first prime number from `M` to `N`. If no prime numbers are present from `M` to `N` print `No prime numbers in the given range`.

<MultiLineNote>
- A **Prime Number** is a positive number greater than **1** that has no factors other than **1** and itself.
- **Factors of N:**

  - If a number `N` is divisible by `X`, then `X` is a factor of `N`.
      - **Example:**
            - If `N = 15` and `X = 3`, then **3** is a factor of **15** as **15** is divisible by **3**.
            - If `N = 15` and `X = 7`, then **7** is **not** a factor of **15** as **15** is not divisible by **7**.
</MultiLineNote>
---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `N`.


---

#### Output

The output should be a single line containing an integer representing the first prime number from `M` to `N`. If no prime numbers are present from `M` to `N`, the string `No prime numbers in the given range` should be printed.

---

#### Explanation

For example, if the given numbers are `M = 25` and `N = 50`,  

- The numbers that have no factors other than **1** and itself from **25** to **50** are **29**, **31**, **37**, **41**, **43** and **47**.
- The first number that has no factors other than **1** and itself from **25** to **50** is **29**.

The output should be **29**.
<br>
For example, if the given numbers are `M = 8` and `N = 10`, 

- There are no numbers that have no factors other than **1** and itself between **8** and **10**.

The output should be **No prime numbers in the given range**.

Solution Code:m = int(input())
n = int(input())

if not (m > 1):
    m = 2

no_primes = True

for i in range(m, n+1):
    is_prime = True
    for j in range(2, i):
        if i % j == 0:
            is_prime = False
            break
    if is_prime:
        print(i)
        no_primes = False
        break

if no_primes:
    print(""No prime numbers in the given range"")"
1aa296bc-503d-44ac-8bbe-33f193d62f77,"Write a program that reads the two words `S1` and `S2` and checks if `S2` is a rotation of `S1`.
Print the number of times `S1` rotates to match `S2`, if `S2` is a rotation of `S1`. Otherwise, print **No Match**.

---

#### Input
The first line of input contains a string representing `S1`.
The second line of input contains a string representing `S2`.

---

#### Output
The output should be a single line containing an integer that is the number of right rotations made by `S1` to match `S2`, if `S2` is a rotation of `S1`. 

Otherwise, the output should be a single line containing a string **No Match**.

---

#### Explanation
Example-1:
 - If the given strings are `S1 = python` and `S2 = onpyth`, after **2** right rotations, the string `S1` is **onpyth**, which is equal to the string `S2`. So the output should be **2**.

Example-2:
 - If the given strings are `S1 = Python` and `S2 = Python`, after **0** right rotations, the string `S1` is **Python**, which is equal to the string `S2`. So the output should be **0**.
```

Solution Code:s1 = input()
s2 = input()

for i in s2:
    if len(s1) != len(s2):
        result = ""No Match""
    elif s1[0] == i:
        result = s2.index(i)
        break
    else:
        result = ""No Match""
print(result)"
d409b4fe-ff7b-4250-868b-3a8e3f765393,"Write a program that reads two numbers `A` and `B` and check if any one of the below conditions is satisfied.

- The sum of `A` and `B` is less than **10**.
- The difference between `A` and `B` is less than **10**.
- `A` is between **5** and **30**.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if any one of the conditions is satisfied, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 12` and `B = 8`,

✗ The sum of `A` and `B` is less than **10**. (`12 + 8 = 20`, **20** is not less than **10**)
✔ The difference between `A` and `B` is less than **10**. (`12 - 8 = 4`, **4** is less than **10**)
✔ `A` is between **5** and **30**. (**12** is between **5** and **30**)

The output should be **True** as one of the conditions is satisfied.

Solution Code:first_number = input()
first_number = int(first_number)

second_number = input()
second_number = int(second_number)

sum = first_number + second_number
difference = first_number - second_number

first_condition = sum < 10
second_condition = difference < 10
third_condition = (first_number > 5) and (first_number < 30)

result = first_condition or second_condition or third_condition
print(result)"
0d55b0ce-4064-4f88-8bb2-2f002da8edb9,"Complete the given **Car** and **Truck** classes by adding new features by following the given instructions.

A **Truck** is a **Car** but with additional behaviours. Inherit the **Car** class into **Truck** class and add new features.

<details>

<summary>**Existing _Car_ class**</summary>

* Attributes
    * color
    * max\_speed
    * acceleration
    * tyre\_friction
    * is\_engine\_started
    * current_speed
* Methods
    * start\_engine
    * stop\_engine
    * accelerate
    * apply_brakes
    * sound_horn

</details>
<br/>
<details>

<summary>**Features to be added to the _Truck_ class**</summary>

- Add **max\_cargo\_weight** attribute
    - It represents the maximum capacity the truck can carry.

- Add **load** attribute:
    - It is the current load on the truck.
    - When a new Truck is created, the current load (**load**) should be **0**.

- Add **load_cargo** method:
    - This method receives an argument **cargo_weight**, which is the weight to be loaded on the truck.
    - The current load (**load**) cannot be more than the **max\_cargo\_weight**.
    
    - If the Truck engine is **off** and the **load_cargo** method is called,
        - The current load (**load**) should increase according to the **cargo_weight** argument passed to this method.
    - If the Truck engine is **on** and the **load_cargo** method is called,
        - Print **""Cannot load cargo during motion""** as the truck can be unloaded only when the engine is off.
    - If adding the **cargo_weight** to the current load is more than the  **max\_cargo\_weight**
        - Print **""Cannot load cargo more than max limit: {max\_cargo\_weight}""**
            - Replace **max\_cargo\_weight** in the print statement with the trucks maximum cargo weight.

- Add **unload_cargo** method:
    - This method receives an argument **cargo_weight**, which is the weight to be unloaded from the truck.
    - The current load (**load**) cannot be less than **0** while unloading. If the current load (**load**) is going negitive set the **load** to **0**.
    - If the Truck engine is **on** and the **unload_cargo** method is called,
        - Print **""Cannot unload cargo during motion""**
    - Truck can be unloaded, only when the truck engine is off.
    
- Override **sound_horn** method:
    - If the car engine is **on** and the **sound_horn** method is called,
        - Print **""Honk Honk""**
    - If the car engine is **off** and the **sound_horn** method is called,
        - Print **""Car has not started yet""**

- When a new Truck is created, the engine should be off by default and **current_speed**, current_load (**load**) should be **0**.
</details>

<MultiLineNote>
You can copy the code from the previous question and add new features on top of that code.
</MultiLineNote>

<br/>

**Points to Note**  

 - The output of the testcase **Checking Default Tests** is given by the `default_test` function in the prefilled code.
 - This coding question does not have the usual input/output testcases. The class defined by you will be tested internally whether the attributes are present or not. So in testcases results you will be shown the rough description of the tests that will be verified.

Solution Code:class Car:
 def __init__(self, color, max_speed, acceleration, tyre_friction):
 self.color = color
 self.max_speed = max_speed
 self.acceleration = acceleration
 self.tyre_friction = tyre_friction
 self.is_engine_started = False
 self.current_speed = 0

 def start_engine(self):
 self.is_engine_started = True

 def stop_engine(self):
 self.is_engine_started = False

 def accelerate(self):
 if not self.is_engine_started:
 print(""Car has not started yet"")
 else:
 self.current_speed += self.acceleration
 if self.current_speed > self.max_speed:
 self.current_speed = self.max_speed

 def apply_brakes(self):
 self.current_speed -= self.tyre_friction
 if self.current_speed < 0:
 self.current_speed = 0

 def sound_horn(self):
 if self.is_engine_started:
 print(""Beep Beep"")
 else:
 print(""Car has not started yet"")


class Truck(Car):
 def __init__(self, color, max_speed, acceleration, tyre_friction, max_cargo_weight):
 super().__init__(color, max_speed, acceleration, tyre_friction)
 self.max_cargo_weight = max_cargo_weight
 self.load = 0

 def load_cargo(self, cargo_weight):
 if self.is_engine_started:
 print(""Cannot load cargo during motion"")
 elif cargo_weight + self.load > self.max_cargo_weight:
 print(""Cannot load cargo more than max limit: {}"".format(
 self.max_cargo_weight))
 else:
 self.load += cargo_weight

 def unload_cargo(self, cargo_weight):
 if self.is_engine_started:
 print(""Cannot unload cargo during motion"")
 else:
 self.load -= cargo_weight
 if self.load < 0:
 self.load = 0

 def sound_horn(self):
 if self.is_engine_started:
 print(""Honk Honk"")
 else:
 print(""Car has not started yet"")


def default_test():
 truck = Truck(color=""Red"", max_speed=250, acceleration=10, tyre_friction=3, max_cargo_weight=100)
 print(truck.is_engine_started)
 truck.load_cargo(cargo_weight=50) # Loading cargo_weight 50 to the truck
 print(truck.load) # 0 + 50 => 50
 truck.unload_cargo(cargo_weight=25) # Unloading cargo_weight 25 from the truck
 print(truck.load) # 50 - 25 => 25
 truck.unload_cargo(cargo_weight=70) # Unloading cargo_weight 70 (more than load in the truck)
 print(truck.load) # 25 - 75 => 0 as load never be negative
 truck.load_cargo(cargo_weight=120) # Prints ""Cannot load cargo more than max limit: 100""

 truck.load_cargo(cargo_weight=20) # Loading cargo_weight 20 to the truck
 truck.start_engine()
 print(truck.is_engine_started) # True
 truck.load_cargo(cargo_weight=40) # Prints ""Cannot unload cargo during motion""
 truck.unload_cargo(cargo_weight=10) # Prints ""Cannot unload cargo during motion""

 truck.sound_horn() # Prints ""Honk Honk""
 truck.stop_engine()
 truck.sound_horn() # Prints ""Car has not started yet"""
cb2fd7dc-e9ac-4c7f-94ec-32b482d09730,"You are given a string, write a program to find whether the string is palindrome or not.

`Note:` Treat uppercase letters and lowercase letters as same when comparing letters. Ignore spaces and quotes within the string.

---

#### Input

The first line of input is a string.

---

#### Output

The output should be `True` or `False`.

---

#### Explanation

In the given example, the string `""No lemon no melon""` is a palindrome as we are ignoring spaces. So, the output should be `True`.

Solution Code:word = input()
word = word.replace("" "","""")   
word = word.replace(""'"","""")
revrves_word = """"
for i in word:
    revrves_word = i +revrves_word

if revrves_word.lower() == word.lower():
    print(""True"")
else:
    print(""False"")"
32deb8c8-9e13-4c26-a04b-e18a960f1fa5,"Given a sentence `S`, write a program to print the sentence by replacing the first letter of every word with its next letter based on its Unicode value.

<MultiLineNote>
Unicode values are unique numbers that are given to every character, symbol and digit.
</MultiLineNote>

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a sentence obtained by replacing the first letter of every word with its next letter based on its Unicode value.

---

#### Explanation

For example, if the given sentence is `S = ""East And West""`,

The sentence `""East And West""` has three words.

- The first letter of the word **East** is **E**.

  - The Unicode value of **E** is **69**.
  - The letter with the next Unicode value **70** is **F**.
  - Replace **E** with **F**.

- The first letter of the word **And** is **A**.

  - The Unicode value of **A** is **65**.
  - The letter with the next Unicode value **66** is **B**.
  - Replace **A** with **B**.

- The first letter of the word **West** is **W**.

  - The Unicode value of **W** is **87**.
  - The letter with the next Unicode value **88** is **X**.
  - Replace **W** with **X**.

The output should be **""Fast Bnd Xest""**.


Solution Code:string = input() 
string = string.split() 
length_of_string = len(string)
result ="""" 
for i in string: 
    if length_of_string > 0: 
        new_word = chr(ord(i[0]) + 1) +i[1:]  
        result += new_word + "" ""  
print(result) "
d8551e86-04df-4ff8-adc3-88efff7f2dac,"Write a program that reads an age `A` and guardian status `S`, and checks if the age `A` is between **12** and **60** or if the guardian status `S` is equal to **yes**.

<MultiLineNote>

The guardian status will be either **yes** or **no**
</MultiLineNote>

---

#### Input

The first line of input contains an integer representing the age `A`.
The second line of input contains a string representing the guardian status `S`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the age is between **12** and **60** or if the guardian status `S` is equal to **yes**, otherwise **False** should be printed.

---

#### Explanation

For example, if the given age `A = 15` and guardian status `S = ""no""`,

✔ `A` is between **12** and **60**. (**15** is between **12** and **60**)
✗ `S` is equal to **yes**.

The output should be **True** as the age is between **12** and **60**.

Solution Code:age = input()
age = int(age)

guardian_status = input()

is_valid_age = (age > 12) and (age < 60)
has_guardian = (guardian_status == ""yes"")

result = is_valid_age or has_guardian
print(result)"
2db4979f-f494-4b66-ac92-ace022fdc20d,"Write a program to compute the cumulative sum of the given N numbers after each input.<br/>Cumulative sum is the sum of all the previous inputs and the current input.<hr><b>Input</b><br/><br/>The first line of input will contain a positive integer (N).<br/>The following N lines will contain an integer in each line.<hr><b>Output</b><br/><br/>The output should be N lines printing the cumulative sum after each input in a new line.<hr><b>Explanation</b><br/><br/>For example, if the given number is 5, then read the inputs in the next 5 lines and print the cumulative sum after each input. If the given numbers in the next five lines are 8, 11, -96, 49, and 85, the cumulative sum after each input is<br/>8<br/>8 + 11 = 19<br/>8 + 11 + -96 = -77<br/>8 + 11 + -96 + 49 = -28<br/>8 + 11 + -96 + 49 + 85 = 57<br/><br/>So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">8
19
-77
-28
57
</code></pre>

Solution Code:n = int(input())

total = 0
for i in range(n):
 number = int(input())
 total = total + number
 print(total)"
e5ab46ff-36cf-4b04-9bd4-16686e02be1b,"Write a program that reads a three-digit number `N` and checks if both the given conditions are satisfied.

- Any of the digits of `N` is **equal** to **5**
- `N` is between **300** and **700**

Print **Valid Number** if both the given conditions are satisfied. Otherwise, print **Not a Valid Number**.
---

#### Input

The input will be a single line containing a three-digit integer representing `N`.

---

#### Output

The output should be a single line containing a string. **Valid Number** should be printed if both the given conditions are satisfied. Otherwise, **Not a Valid Number** should be printed.
---

<SolutionCodeForReferrence>
n=input()

not_equal_to_5=int(n[0])!=5 or int(n[1])!=5 or int(n[2])!=5
is_between=int(n)>300 and int(n)<700 

if not_equal_to_5 and is_between:
    print(""Valid Number"")
else:
    print(""Not a Valid Number"")
</SolutionCodeForReferrence>"
1998d3b2-1c88-41c8-a207-f044e357add7,"Given `N` numbers, and an index, write a program to store the numbers in a list and print the number at the given index. For this problem, each input will contain `T` test cases. Each test case will give an index `Ki` as input, which should be considered to print the number.

---

#### Input

The first line of input is an integer `N`.
The second line of input is an integer `T` representing the number of test cases.
The next `N` lines contain integers representing the numbers of the list.
The next `T` lines contain integer `Ki` for each line. 


#### Output
You need to print a number in a new line for each of the `K` test cases. 

---

#### Explanation

In the given example, there are `4` numbers `1, 2, 3, 4` as input
For the first test case, `K=0`, the number at the `0th` index is `1`. 
For the second test case, `K=3`, the number at the `3rd` index is `4`. 
So, the output should be 

| index | 0 | 1 | 2 | 3 |
|------|----|---|---|---|
| value |**1** |2 | 3 | **4**|

```
1
4
```

Solution Code:number = int(input())
test_cases = int(input())

new_list = []

for i in range(number):
    value = int(input())
    
    new_list += [value]

for i in range(test_cases):
    index = int(input())

    print(new_list[index])"
7e69824a-0657-4090-9191-a755971c2411,"Write a program that reads a sentence and prints the sum and average of the numbers that appear in the sentence, ignoring all other characters.

<MultiLineNote>
Round the average value to two decimal places.

For example, 

Average = (10 / 3) = 3.33333333333

Average = round(Average, 2) = 3.33

</MultiLineNote>

---

#### Input

The input will be a single line containing a string representing a sentence.

---

####Output

The first line of output should be an integer which is the sum of the numbers in the given sentence.

The second line of output should be a float that is the average of the numbers in the given sentence.


---

####Explanation

For example, if the given sentence is `I am 25 years and 10 months old`.

The numbers in the sentence are **25** and **10**. 

The sum of the numbers is **35**. (`25 + 10 = 35`)

The average of the numbers is **17.5**. (`35 / 2 = 17.5`)

The output should be,

```
35
17.5
```

---

For example, if the given sentence is `1time3 %times4`

The numbers in the sentence are **1**, **3**, and **4**.

The sum of numbers is **8**. (`1 + 3 + 4 = 8`)

The average of the numbers is **2.66666666667**. (`8 / 3 = 2.66666666667`)

<MultiLineNote>
Round the average value to two decimal places.

For example, 

Average = (10 / 3) = 3.33333333333

Average = round(Average, 2) = 3.33

</MultiLineNote>
After rounding the average value to two decimal places, the average is **2.67**.

So, the output should be,

```
8
2.67
```

Solution Code:input_string = input()
numbers = []
current_number = """"

for char in input_string:
    if char.isdigit():
        current_number += char
    else:
        if current_number:
            numbers.append(int(current_number))
            current_number = """"
if current_number:
    numbers.append(int(current_number))

total_sum = sum(numbers)
average = round(total_sum / len(numbers), 2)

print(total_sum)
print(average)"
137497a6-122d-4593-9c55-b3bdaf5e548a,"Given two strings `S1` and `S2` of equal length, write a program that prints a new string by appending characters from `S1` first and then from `S2` alternately.

---

#### Input

The first line of input contains a string representing `S1`.
The second line of input contains a string representing `S2`.

---

#### Output

The output should be a single line containing a string obtained by appending characters from `S1` first and then from `S2` alternately.

---

#### Constraints

The two strings `S1` and `S2` given as inputs will always have equal length.

#### Explanation

For example, if the given strings are `S1 = ""bring""` and `S2 = ""camel""`,

- Characters in `bring` are **b**, **r**, **i**, **n**, **g** and characters in `camel` are **c**, **a**, **m**, **e**, **l**.

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">b</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">r</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">i</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">n</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;padding: 8px 12px;"">g</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell; vertical-align: inherit; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
   <div style=""font-family: 'Roboto';display: table-cell; font-weight: 900;vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
   <div style=""font-family: 'Roboto';font-weight: 900;color: #808080;display: table-cell; font-weight: 900;vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
   <div style=""font-family: 'Roboto';display: table-cell;font-weight: 900;vertical-align: inherit;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
</div>

<br>

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">c</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">a</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">m</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">e</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;padding: 8px 12px;"">l</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell; font-weight: 900;vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
</div>

- New string by appending **1**st character from `bring` , **2**nd character from `camel` , **3**rd character from `bring`, **4**th character from `camel` and **5**th character from `bring` is **baieg**.


 The output should be **baieg**.

Solution Code:S1 = input()
S2 = input()
length = len(S1)
word = """"
for i in range(length) :
    if i % 2 == 0 :
        word = word + S1[i]
    else :
        word = word + S2[i]
print(word)"
25f7953a-4e71-4957-9b89-9c05c0b82a99,"Given a MxN matrix,write a program to print all Anti-Diagonals elements of matrix

**Input**

The first line of input will contain a M, N values separated by space.
The second line will contain matrix A of dimensions MxN.

**Output**

The output should contain anti-diagonal elements separated by a line.
**Explanation**

For example, if M = 4, N = 4
Matrix A:

![](https://res.cloudinary.com/learning-platform/image/fetch/dpr_auto,w_auto,f_auto,q_auto/https://nkb-backend-ccbp-media-static.s3.ap-south-1.amazonaws.com/prod/media/profile_pic/card-notes-attachment/3a175e7e-0365-4ac9-9620-fdda34c1ce31.png)
```
4 4
1 2 3 4
5 6 7 8
9 10 11 12
13 14 15 16
```
So the output should be

```
1
2 5
3 6 9
4 7 10 13
8 11 14
12 15
16
```

Solution Code:def covert_sting_into_int(list_a):
    new_list=[]
    for each in list_a:
        k=int(each)
        new_list.append(k)
    return new_list

def get_anti_diagonals(matrix,m,n):
    anti_diagonal_mat=[]
    max_sum=m+n-2
    for i in range(max_sum+1):
        for j in range(i+1):
            if(j < m)and(i - j)<n:
                print(str(matrix[j][i-j])+"" "",end="""") 
        print()

m,n=input().split()
m,n=int(m),int(n)
num_list=[]
for i in range(m):
    list_a=input().split()
    list_a=covert_sting_into_int(list_a)
    num_list.append(list_a)
get_anti_diagonals_elements=get_anti_diagonals(num_list,m,n)
"
eb4f6b58-40e0-44f8-a8bf-d347951479d0,"Given two integers M and N, write a program to print all the prime numbers from M to N.<hr><b>Input</b><br/><br/>The first line of input will contain a positive integer (M).<br/>The second line of input will contain a positive integer (N).<hr><b>Output</b><br/><br/>The output should be containing all the prime numbers from M to N, each in a new line.<hr><b>Explanation</b><br/><br/>For example, if the given numbers are M is 5 and N is 11, as all the prime numbers from 5 to 11 are 5, 7, and 11. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">5
7
11
</code></pre><br/><br/>Similarly, if the given numbers are M is 18 and N is 40, as all the prime numbers from 18 to 40 are 19, 23, 29, 31,and 37. So the output should<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">19
23
29
31
37
</code></pre>

Solution Code:m = int(input())
n = int(input())

if not (m > 1):
 m = 2

for number in range(m, n+1):
 factors = 0
 for i in range(2, number):
 if (number % i) == 0:
 factors = factors + 1

 if factors == 0:
 print(number)"
6dec633e-9a4b-4d14-89b1-f5791122a1ab,"Abhinav and Anjali are playing a game called **Rock-Paper-Scissors**. It's a hand game usually played between two people. In this game, they both show their hands in one of three ways: **Rock**, **Paper**, or **Scissors**. 

For example,

If Abhinav shows **Rock** and Anjali shows **Scissors**, Abhinav wins because **Rock** blunts **Scissors**. 
If Anjali shows **Paper** and Abhinav shows **Scissors**, Abhinav wins because **Scissors** cut **Paper**. 
If Abhinav shows **Paper** and Anjali shows **Rock**, Abhinav wins because **Paper** wraps **Rock**. 

If both players show the same thing, it's a tie. For example, if Abhinav and Anjali both show **Rock**, it's a tie. 

<Img imageSrc = 'https://s3.ap-south-1.amazonaws.com/new-assets.ccbp.in/frontend/content/programming-foundations/Screenshot+from+2023-04-13+12-58-46.png' widthPercent='50'/> 

Write a program that reads two strings representing what Abhinav and Anjali showed and prints the winner of the game based on the shapes the players choose.

---

####Input

The first line of input contains a string representing the shape chosen by Abhinav.

The second line of input contains a string representing the shape chosen by Anjali.

---

####Output

The output should be a single line containing a string. **Abhinav Wins** should be printed if Abhinav wins the game or **Anjali Wins** should be printed if Anjali wins the game. Otherwise, **Tie** should be printed.

---


####Explanation

For example, 

If Abhinav shows **Rock** and Anjali shows **Paper**, Anjali wins because **Paper** wraps **Rock**. 

So, the output should be **Anjali Wins**.

---

For example,

If Abhinav shows **Rock** and Anjali shows **Scissors**, Abhinav wins because **Rock** blunts **Scissors**. 

So, the output should be **Abhinav Wins**.

---

For example,

If Abhinav shows **Paper** and Anjali shows **Paper**, it's a tie. 

As both players show the same thing, it's a tie. 

So, the output should be **Tie**.

Solution Code:abhinav_input = input()
anjali_input = input()

if anjali_input == abhinav_input:        
    print(""Tie"")
elif anjali_input == ""Scissors"" and abhinav_input == ""Paper"":     
    print(""Anjali Wins"")
elif abhinav_input==""Rock"" and anjali_input==""Paper"":       
    print(""Anjali Wins"")
elif abhinav_input == ""Scissors"" and anjali_input==""Rock"":     
    print(""Anjali Wins"")
else:                                  
    print(""Abhinav Wins"")"
9b030a74-6b29-421e-b148-622a5f2bdc95,"Given a number of days (N) as input, write a program to convert N to years (Y), weeks (W), and days (D).<hr><b>Input</b><br/><br/>The input will be a single line containing a positive integer (N).<hr><b>Output</b><br/><br/>The output should be a single line containing years, weeks, days values separated by spaces.<hr><b>Explanation</b><br/><br/>For example, if the given number of days (N) is  1329.<br/>1329 = 365*3 + 33*7 + 3<br/>So the output is 3 years 33 weeks 3 days

Solution Code:N=int(input())

years=int(N/365)
N=N%365

weeks=int(N/7)
N=N%7

days=N
print(str(years)+"" years ""+str(weeks)+"" weeks ""+str(days)+"" days"")"
6a6a210b-676f-4096-8cb6-019958866707,"For this problem, the prefilled code will contain an MxN matrix. Write a program to print the lower triangle of the matrix.<br/>Lower triangular matrix is a matrix which contain elements below principle diagonal including principle diagonal elements.<hr><b>Input</b><br/><br/>The first line of input will contain two space-separated integers, denoting the M and N.<br/>The next M following lines will contain N space-separated integers, denoting the elements of each list.<hr><b>Output</b><br/><br/>The output should be M rows containing the elements in the form of a lower triangle.<hr><b>Explanation</b><br/><br/>For example, if the given M is 3 and N is 3, read the inputs in the next three lines. If the numbers given in the next three lines are the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">1 2 3
10 20 30
5 10 15
</code></pre><br/>The lower triangle of the above matrix is<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[1]
[10, 20]
[5, 10, 15]
</code></pre>

Solution Code:def print_lower_triangle(matrix):
 for i in range(len(matrix)):
 row_list = matrix[i][:i+1]
 print(row_list)


def convert_string_to_int(list_a):
 new_list = []
 for item in list_a:
 num = int(item)
 new_list.append(num)
 return new_list


m, n = input().split()
m, n = int(m), int(n)
num_list = []

for i in range(m):
 list_a = input().split()
 list_a = convert_string_to_int(list_a)
 num_list.append(list_a)

print_lower_triangle(num_list)"
71e35c56-7f7f-412e-bb1d-e26343147208,"Given two integers (M and N), write a program to print the first perfect square in a given range.<hr><b>Input</b><br/><br/>The first line of input will contain a positive integer (M).<br/>The second line of input will contain a positive integer (N).<hr><b>Output</b><br/><br/>The output should be a single line containing the first perfect square in a given range.<hr><b>Explanation</b><br/><br/>For example, if the given numbers are M is 4 and N is 16, the perfect squares from 4 to 16 are 4(2 * 2), 9(3 * 3), and 16(4 * 4), as the first perfect square is 4. So the output should be 4.

Solution Code:n = int(input())
m = int(input())
list_of_nums= []
for i in range(n,m+1):
    for j in range(1,i):
        if i ** 0.5 == j :
            list_of_nums.append(i)
if len(list_of_nums) == 0:
    print(""No Perfect Square"")
else:
    print(list_of_nums[0])"
ac17087c-f33a-4a93-b88f-9f097368c32e,"Write a program that reads a four-digit number and checks if the first two digits of the number is **19** and the last two digits of the number is between **30** and **60**.

---

#### Input

The input will be a single line containing a four-digit integer.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the first two digits of the number is **19** and the last two digits of the number is between **30** and **60**, otherwise **False** should be printed.

---

#### Explanation

For example, if the given number is **1947**, 

The first two digits is **19** and the last two digits is **47**.

✔ The first two digits of the number is **19**. (The first two digits, **19** is equal to **19**)
✔ The last two digits of the number is between **30** and **60**. (**47** is greater than **30** and less than **60**)

The output should be **True**.

Solution Code:number = input()

length = len(number)

first_two_digits = number[:2]
last_two_digits = number[length - 2:]

first_two_digits = int(first_two_digits)
last_two_digits = int(last_two_digits)

is_nineteen = first_two_digits == 19

is_greater_than = last_two_digits > 30
is_less_than = last_two_digits < 60
is_between_30_and_60 = is_greater_than and is_less_than

result = is_nineteen and is_between_30_and_60
print(result)"
9f775d78-9190-4062-a095-cff82abe3f2f,"Write a program that reads a distance `D` in km and calculates the score.

* For the first **50** km (`0 - 50 km`), the score for each km is **3**.
* For the next **50** km (`51 - 100 km`), the score for each km is **5**.
* For the next **100** km (`101 - 200 km`), the score for each km is **6**.
* For the distance above **200** km, the score for each km is **10**.
* Apart from the above scores, there is a bonus score of **100**

---

#### Input

The input will be a single line containing an integer representing `D`.

---

#### Output

The output should be a single line containing an integer that is the score.

---

#### Explanation

For example, if the given distance in km is **120**,


As `D` is greater than **100** km, the total score is the sum of the score of first **50** km, score of the next **50** km, score of the remaining distance after **100** km and the bonus score.

<details style=""margin:0;"">
      <summary style=""margin:0;padding:0;"">Detailed Explanation to calculate the score</summary>
        <ul>
          <li style=""margin:0;padding:0;"">The score for each km for the first **50** km is **3**. Then the score for **50** km is **150**. (`50 * 3 = 150`)</li>
          <li style=""margin:0;padding:0;"">The score for each km for the next **50** km is **5**. Then the score for **50** km is **250**. (`50 * 5 = 250`)</li>
          <li style=""margin:0;padding:0;"">The score for each km for the above **100** km is **6**. The remaining distance after **100** km is **20** (`120 - 100 = 20`). Then the score for **20** km is **120**. (`20 * 6 = 120`)</li>
          <li style=""margin:0;padding:0;"">Sum of the above scores is **520** (`150 + 250 + 120 = 520`). Then the **total score** is the sum of above scores and bonus score that is **620**. (`520 + 100 = 620`)</li>
        </ul>
</details>
<br/>

Score is **3** for each km for 0 to 50 km        =>  50 x 3  =  150
Score is **5** for each km for 51 to 100 km     =>  50 x 5  =  250
Score is **6** for each km for above 100 km   =>  20 x 6  =  120
-------------------------------------------------------------
Total                                                              =>                    520
Bonus Score                                                 =>                    100
-------------------------------------------------------------
Total Score                                                   =>                    620
-------------------------------------------------------------

The output should be **620**.

Solution Code:distance=int(input())
bonus=100
first_50=50*3
next_50_to_100=50*5
third_above_100=100*6
if distance<=50:
    score=distance*3
elif distance<=100:
    remaining_distance=distance-50
    remaining_distance_score=remaining_distance*5
    score=first_50+remaining_distance_score
elif distance<=200:
    remaining_distance=distance-100
    remaining_distance_score=remaining_distance*6
    score=first_50+next_50_to_100+remaining_distance_score
else:
    remaining_distance=distance-200
    remaining_distance_score=remaining_distance*10
    score=first_50+next_50_to_100+third_above_100+remaining_distance_score
score=score+bonus
print(score)"
3bc740ea-76df-4681-a2b5-088657edbdee,"A function is given in the prefilled code that takes two numbers `M` and `N` as arguments.

Write a program that returns all the prime numbers from `M` to `N` separated by a space.


---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing a string of prime numbers from `M` to `N` separated by space as shown in the sample output.        

---

#### Explanation

For example, if the given numbers are `M = 3` and `N = 10`,

- The prime numbers from **3** to **10** are **3**, **5**, and **7**.

The output should be,

```
3 5 7
```

Solution Code:def check_is_prime(m, n):
    prime_numbers = """"
    for num in range(m, n + 1):
        is_prime = True
        if num == 1 or num == 0:
            is_prime = False
        for num1 in range(2, num):
            if num % num1 == 0:
                is_prime = False
        if is_prime:
            prime_numbers = prime_numbers + str(num) + "" ""
    return prime_numbers
            
m = int(input())
n = int(input())

prime_numbers = check_is_prime(m, n)

print(prime_numbers)"
ae68ca4a-f34a-4037-858e-e9e80341235d,"Complete the given **Car** class by adding new features according to the instructions provided.

**Existing _Car_ class**:

In the previous question, you added the attributes below to the Car class:

 * color
 * max\_speed
 * acceleration 
 * tyre\_friction

<br/>
Now, let's add a few more new features to the _Car_ class.
 
<details>

<summary>**Features to be added to the **_Car_** class**</summary>

- Add **is\_engine\_started** attribute
    - When a new car is created, the value of the **is\_engine\_started** attribute should be **False**. This indicates that the engine is off by default.
- Add **start_engine** method
    - When the **start_engine** method is called, the value of the **is\_engine\_started** attribute should be set to **True**. This indicates that the car engine is turned on.
- Add **stop_engine** method
    - When the **stop_engine** method is called, the value of the **is\_engine\_started** attribute should be set to **False**. This indicates that the car engine is turned off.

</details>

<MultiLineNote>
You can copy the code from the previous question and add new features on top of that code.
</MultiLineNote>

<br/>

**Points to Note**  

 - The output of the testcase **Checking Default Tests** is given by the `default_test` function in the prefilled code.
 - This coding question does not have the usual input/output testcases. The class defined by you will be tested internally whether the attributes are present or not. So in testcases results you will be shown the rough description of the tests that will be verified.

Solution Code:class Car:
    def __init__(self, color, max_speed, acceleration, tyre_friction):
        self.color = color
        self.max_speed = max_speed
        self.acceleration = acceleration
        self.tyre_friction = tyre_friction
        self.is_engine_started = False

    def start_engine(self):
        self.is_engine_started = True

    def stop_engine(self):
        self.is_engine_started = False


def default_test():
    car = Car(color=""Red"", max_speed=250, acceleration=10, tyre_friction=3)
    print(car.is_engine_started)  # As car is not yet started, it should print False
    car.start_engine()  # Starting the engine
    print(car.is_engine_started)  # As engine is on, it should print True
    car.stop_engine()  # Stopping the engine
    print(car.is_engine_started)  # As engine is off, it should print False
"
1c1af905-8f84-4b91-afb1-f34adc42d925,"Now we need a **RaceCar** in our cars world.  

You are given two incomplete classes **Car** and **RaceCar**.

A **RaceCar** is a **Car** but with the additional behaviours.
Inherit the **Car** class into **RaceCar** class and build the additional features.

Go through the comments in the prefilled code to implement the Car and RaceCar classes with the described attributes and methods  

**Points to Note**  
  
 - The output of the testcase **Checking Default Tests** is given by the `default_test` function in the prefilled code.
 - This Coding question does not have the usual input/output testcases. The class defined by you will be tested internally whether the attributes are present or not. So in testcases results you will be shown the rough description of the tests that will be verified.    
 - You can copy the implementation of Car class from the previous set and add new features on top of that code.

Solution Code:class Car:
    def __init__(self, color, max_speed, acceleration, tyre_friction):
        self.color = color
        self.max_speed = max_speed
        self.acceleration = acceleration
        self.tyre_friction = tyre_friction
        self.is_engine_started = False
        self.current_speed = 0

    def start_engine(self):
        self.is_engine_started = True

    def stop_engine(self):
        self.is_engine_started = False

    def accelerate(self):
        if not self.is_engine_started:
            print(""Car has not started yet"")
        else:
            self.current_speed += self.acceleration
            if self.current_speed > self.max_speed:
                self.current_speed = self.max_speed

    def apply_brakes(self):
        self.current_speed -= self.tyre_friction
        if self.current_speed < 0:
            self.current_speed = 0

    def sound_horn(self):
        if self.is_engine_started:
            print(""Beep Beep"")
        else:
            print(""Car has not started yet"")


class RaceCar(Car):
    def __init__(self, color, max_speed, acceleration, tyre_friction, nitro):
        super().__init__(color, max_speed, acceleration, tyre_friction)
        self.nitro = nitro

    def accelerate(self):
        if self.nitro > 0 and self.is_engine_started:
            self.current_speed += 20
            self.nitro -= 1
        super().accelerate()

    def sound_horn(self):
        if self.is_engine_started:
            print(""Peep Peep\nBeep Beep"")
        else:
            print(""Car has not started yet"")


def default_test():
    racecar = RaceCar(color=""Red"", max_speed=250, acceleration=50, tyre_friction=30, nitro=4)
    racecar.start_engine()
    racecar.accelerate()  # Calling the accelerate method when the is_engine_started is True
    print(racecar.current_speed)  # 0 + (50 + 20) => 70
    print(racecar.nitro)  # 4 - 1 => 3
    racecar.accelerate()  # 70 + (50 + 20) => 140
    print(racecar.current_speed)  # 140
    print(racecar.nitro)  # 3 - 1 => 2
    racecar.accelerate()  # 140 + (50 + 20) => 210
    print(racecar.current_speed)  # 210
    print(racecar.nitro)  # 2 - 1 => 1
    racecar.apply_brakes()  # 210 - 30 => 180
    print(racecar.current_speed)  # 180
    print(racecar.nitro)  # 1
    racecar.accelerate()  # 180 + (50 + 20) => 250
    print(racecar.current_speed)  # 250
    print(racecar.nitro)  # 1 - 1 => 0
    racecar.sound_horn()"
8992e831-cd89-4ef2-8642-cf7dc9b9097d,"Given a number `N`, write a program to read `N` inputs and print the first **Prime number** among the given `N` inputs.

<MultiLineNote>
A **Prime Number** is a positive integer greater than **1** that has no factors other than **1** and itself.
</MultiLineNote>
---

#### Input

The first line of input contains an integer representing `N`.
The next `N` lines of input contain integers.

---

#### Output

The output should be a single line containing an integer that is the first **Prime** number among the given `N` inputs.

---

#### Explanation

For example, if the given number is `N = 5`,

- The given **5** numbers are 

```
1
10
4
3 
2
```

- The prime numbers in the given numbers are **3** and **2**.
- The first prime number input among the given inputs is **3**.

The output should be **3**.

Solution Code:def isPrime(n):
    if(n==1):
        return False
    for i in range(2,int(n**0.5)+1):
        if(n%i==0):
            return False
    return True

number_of_digits = int(input())

numbers=[]
for num in range( number_of_digits):
    numbers.append(int(input()))

for num in numbers:
    if(isPrime(num)):
        print(num)
        break"
c2a3ca9c-efb1-4611-a7c4-fcbf067553c4,"Given two numbers `M` and `N`, write a program to print all the composite numbers starting from `M` to `N`.

<MultiLineNote>
- **1** is neither prime nor composite.
- Composite numbers are numbers that have more than two factors.

For example, if the given number is **4**.

The factors of **4** are **1**, **2** and **4**.
There are more than two factors to **4**. So, **4** is a composite number.
</MultiLineNote>

---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should contain all the composite numbers from `M` to `N`, each on a new line.

---

#### Explanation

For example, if the given numbers are `M = 2` and `N = 9`,

- The composite numbers present in the range **2** to **9** are **4, 6, 8, 9**.
- The factors of **4** are **1, 2, and 4**, **4** has more than **2** factors.
- The factors of **6** are **1, 2, 3, and 6**, **6** has more than **2** factors.
- The factors of **8** are **1, 2, 4, and 8**, **8** has more than **2** factors.
- The factors of **9** are **1, 3, and 9**, **9** has more than **2** factors.

The output should be,

```
4
6
8
9

```

Solution Code:m = int(input())
n = int(input())

for i in range(m,n+1) :
    count = 0 
    for j in range(2,i) :
        if (i%j) == 0 :
            count = i 
    if count > 1 :
        print(i)"
c4a97f05-06fb-48d1-8e41-c99a4e9a1682,"Given a string, write a program to return the sum and average of the digits of all numbers that appear in the string, ignoring all other characters.<hr><b>Input</b><br/><br/>The input will be a single line containing a string.<hr><b>Output</b><br/><br/>The output should contain the sum and average of the digits of all numbers that appear in the string.<br/> Note: Round the average value to two decimal places.<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;I am 25 years and 10 months old&quot;, the digits of all numbers that appear in the string are 2, 5, 1, 0. Your code should print the sum of all digits(8) and the average of all digits(2.0) in the new line.

Solution Code:string = input()
digits = 0
count = 0
for char in string :
    if char.isdigit() :
        digits += int(char)
        count += 1 
 
average = digits / count

print(digits)
print(round(average,2))"
e8f36831-0380-41dd-810a-a200704f9df8,"Given a M x N matrix, write a program to print the matrix after ordering all the elements of the matrix in increasing order.<hr><b>Input</b><br/><br/>The first line of input will contain two space-separated integers, denoting the M and N.<br/>The next M following lines will contain N space-separated integers, denoting the elements of each list.<hr><b>Output</b><br/><br/>The output should be M lines containing the ordered matrix.<br/>Note: There is a space at the end of each line.<hr><b>Explanation</b><br/><br/>For example, if the given M is 3 and N is 3, read the inputs in the next three lines if the numbers given in the next three lines are the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">1 20 3
30 10 2
5 11 15
</code></pre><br/>By ordering all the elements of the matrix in increasing order, the ordered matrix should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">1 2 3
5 10 11
15 20 30
</code></pre>

Solution Code:def convert_str_to_int(num_list):
    new_list = []
    for item in num_list:
        num = int(item)
        new_list.append(num)
    return new_list

m, n = input().split()
m, n = int(m), int(n)

nums_list = []
for i in range(m):
    list_a = input().split()
    num_list = convert_str_to_int(list_a)
    nums_list.extend(num_list)
nums_list.sort()
x = 0
for i in range(m):
    row = """"
    for j in range(n):
        row += str(nums_list[x]) + "" ""
        x += 1 
    print(row)
"
25596966-2613-405b-9b74-63848b903fb0,"Given a time `T` in either Minutes (`M`) or Seconds (`S`). Example: `220M`, `3S`.

If the last character in the `T` is `M`, it is Minutes.
If the last character in the `T` is `S`, it is Seconds. 

Write a program to convert the given time `T` in Minutes (`M`) or Seconds (`S`) into Hours (`H`) rounded up to **2** decimals.

The last character of the output should be `H` representing time in Hours.

<MultiLineNote>
1 Minute = 1/60 Hours.

1 Second = 1/3600 Hours.
</MultiLineNote>

---

#### Input

The input will be a single line containing a string representing `T`.

---

#### Output

The output should be a single line containing a string obtained by converting Minutes (`M`) or Seconds (`S`) into Hours (`H`) as shown in the sample output.

---

#### Explanation

For example, if the given time is `T = 80M`,

- The given time is in Minutes (**M**).
- Converting from **Minutes** to **Hours**.
- 80 Minutes = (80 / 60) Hours since, [1 Minute = 1 / 60 Hours] = 1.333333333 Hours.
- **1.333333333** Hours rounded up to **2** decimal places is **1.33** Hours.

The output should be **1.33H**.

For example, if the given time is `T = 4200S`,

- The given time is in Seconds (**S**).
- Converting from **Seconds** to **Hours**.
- 4200 Seconds= (4200 / 3600) Hours since, [1 Second = 1/3600 Hours] = 1.16666666667 Hours.
- **1.16666666667** Hours rounded up to **2** decimal places is **1.17** Hours.

The output should be **1.17H**.

Solution Code:given_time = input()

is_seconds = given_time[-1] == ""S""

given_time = given_time[:-1]
given_time = int(given_time)

if is_seconds:
    seconds_to_hours = given_time/3600
    seconds_to_hours = round(seconds_to_hours,2)
    hours = str(seconds_to_hours)+""H""
else:
    minutes_to_hours = given_time/60 
    minutes_to_hours = round(minutes_to_hours,2)
    hours = str(minutes_to_hours)+""H""
    
print(hours)"
4f917605-da92-4f82-8520-5eb06fcba548,"Given comma-separated numbers, write a program to find the **Mode** of the given numbers.

<MultiLineNote>
**Mode** is the number that occurs more times than other numbers in the list.

For example, if the given list of numbers are **6**, **3**, **9**, **3**, **6**, **6**, **5**, **9**, **3**,

The number **6** occurred **3** times.
The number **3** occurred **3** times.
The number **9** occurred **2** times.
The number **5** occurred **1** time.
 
The **Modes** are **6** and **3**, as they occurred more times than the other numbers in the given list.
 
If there are multiple modes, print the mode that occurs first in the given numbers.

Among **6** and **3**, **6** occurs first in the given numbers.
</MultiLineNote>

---

#### Input

The input will be a single line containing comma-separated integers.

---

#### Output

The output should be a single line containing an integer that is the **Mode** of the given numbers.

---

#### Explanation

For example, if the given comma-separated numbers are **1,5,9,1,4,7,5,3,5,6,8,5**.

- The numbers with their respective number of occurrences,

| Number | Number of Occurrences |
| ------ | --------------------- |
| 1      | 2                     |
| **5**  | **4**                 |
| 9      | 1                     |
| 4      | 1                     |
| 7      | 1                     |
| 3      | 1                     |
| 6      | 1                     |
| 8      | 1                     |

- The number **5** occured **4** times that is more than other numbers occurrences.

The output should be **5**.

---

For example, if the given comma-separated numbers are **6,3,9,3,6,6,5,9,3**.

- The numbers with their respective number of occurrences,

| Number | Number of Occurrences |
| ------ | --------------------- |
| **6**  | **3**                 |
| **3**  | **3**                 |
| 9      | 2                     |
| 5      | 1                     |


- The numbers **6** and **3** occured **3** times that is more than other numbers occurrences.

- If there are multiple modes, print the mode that occurs first in the given numbers.
 
- Among **6** and **3**, **6** occurs first in the given numbers.

The output should be **6**.

Solution Code:numbers_list = input().split("","")

largest_frequency = 0
mode = 0

for number in numbers_list:
    each_frequency = numbers_list.count(number)
    if each_frequency > largest_frequency:
        largest_frequency = each_frequency
        mode = number
        
print(mode)
"
e359e188-0c1b-40d7-b09e-025c02152281,"Write a program that reads a string `S` and checks if the length of `S` is between **2** and **7** or the first character of `S` is **not equal** to **""a""**.

Print **Valid String** if the length of `S` is between **2** and **7** or the first character of `S` is **not equal** to **""a""**. Otherwise, print **Not a Valid String**.

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a string. **Valid String** should be printed if the length of `S` is between **2** and **7** or the first character of `S` is **not equal** to **""a""**. Otherwise, **Not a Valid String** should be printed.

---

#### Explanation

For example, if the given string `S = ""apple""`,

✔ The length of `S` is between **2** and **7**. (The length of **apple** is **5**. **5** is between **2** and **7**)
✖ The first character of `S` is **not equal** to **""a""**. (The first character of **apple** is **equal** to **a**)

The output should be **Valid String** as the length of `S` is between **2** and **7**.

Solution Code:string = input()

string_length = len(string)

is_between = (string_length > 2) and (string_length < 7)
is_not_equal = string[0] != ""a""

if (is_between or is_not_equal):
 print(""Valid String"")
else:
 print(""Not a Valid String"")"
3e527814-6dc8-4322-9f72-480eeb0e5b0b,"Write a program that reads two numbers and prints the sum of two numbers in the given format.

---

#### Input

The first line of input contains a float.
The second line of input contains a float.

---

#### Output

The output should be a single line containing a string in the format shown in the sample output.

---

#### Explanation

For example, if the given numbers are **3.0** and **4.0**,

* The sum of **3.0** and **4.0** (`3.0 + 4.0`) is **7.0**.
* Add the string **\""Sum: \""** before **7.0** (sum of two numbers).

The output should be **Sum: 7.0**

Solution Code:first_number = input()
second_number = input()

first_number = float(first_number)
second_number = float(second_number)

result = first_number + second_number

print(""Sum: "" + str(result))"
ec60682e-feeb-4092-9ca7-1ee220216c34,"Write a program that prints a simple rectangle using stars (\*).

#### Explanation

Print two stars on the first line, two stars on the second line and two stars on the third line.

<MultiLineNote>
There is a space after every star
</MultiLineNote>

Solution Code:# Print two stars on the first line
print(""* *"")

# Print two stars on the second line
print(""* *"")

# Print two stars on the third line
print(""* *"")"
e3690b03-bfda-43fd-ab59-ea1c5adbecfc,"Given date-time D, write a program to print the time left for the next New Year.<hr><b>Input</b><br/><br/>The input will be a single line containing the date-time in the string format similar to &quot;Dec 30 2020 02:43 PM&quot;.<hr><b>Output</b><br/><br/>The output should be a single line containing hours and minutes left for the next new year in the format similar to &quot;33 hours 17 minutes&quot;.<hr><b>Explanation</b><br/><br/>For example, if the given date-time is &quot;Dec 30 2020 02:43 PM&quot;, the difference between &quot;Dec 30 2020 02:43 PM&quot; and &quot;Jan 1 2021 00:00 AM&quot; is 1 day 9 hours 17 minutes. The difference in hours and minutes is  1 * 24 + 9 hours and 17 minutes. So the output should be &quot;33 hours 17 minutes&quot;.

Solution Code:from datetime import datetime

date_string = input()
date_obj = datetime.strptime(date_string, ""%b %d %Y %I:%M %p"")
next_year = date_obj.year + 1
new_year_obj = datetime(next_year,1,1)
duration = new_year_obj - date_obj

total_seconds = (duration.days)*24*3600 + (duration.seconds)
hours = total_seconds // 3600
minutes = (total_seconds % 3600)//60
print(""{} hours"".format(hours),""{} minutes"".format(minutes))"
d0821345-b760-4acf-9d0e-f7b74e06651f,"Given an integer N, write a program which reads N inputs and prints the sum of the given input integers.<hr><b>Input</b><br/><br/>The first line of input will contain a positive integer, N.<br/>The next N lines will contain the integers, each in a line.<hr><b>Output</b><br/><br/>The output should be the sum of the given input integers.<hr><b>Explanation</b><br/><br/>For example, if the given N is 3, then read the inputs in the next 3 lines and print the sum of the three input integers. If the given input integers in the next three lines are 8, 11, and 25, the output should be 44.

Solution Code:number_of_inputs = int(input())

counter = 0
sum = 0
while counter < number_of_inputs:
 number = int(input())
 sum = (sum + number)
 counter = (counter + 1)

print(sum)"
1672341a-9240-45b8-b1f1-4407773a8c8f,"Write a program that reads a number `N` and prints the number **0** `N` times on `N` lines.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be `N` lines containing an integer **0** on each line.

---

#### Explanation

For example, if the given number is `N = 4`,

* The number **0** should be printed **4** times.

The output should be,

```
0
0
0
0
```


Solution Code:number = int(input())

counter = 0

while counter < number:
    print(0)
    counter = counter + 1"
00e07cb4-fb6c-42a9-90d7-fa9b29073fb7,"Write a program that reads two numbers `M` and `N` and prints the **sum** of `N` numbers from `M`.

---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the **sum** of `N` numbers from `M`.

---

#### Explanation

For example, if the given numbers are `M = 7` and `N = 3`,

* The **3** numbers from **7** are **7**, **8** and **9**.
* The **sum** of **3** numbers from **7** is **24**. (`7 + 8 + 9 = 24`)

|Number | Previous Sum | Previous Sum + Number = Current Sum |
|---|---|---|
|7 | 0| 0 + 7 = 7 |
|8 | 7 | 7 + 8 = 15 |
|9 | 15 | 15 + 9 = 24 |

The output should be **24**.

Solution Code:m = int(input())
n = int(input())

counter = 0
sum_of_numbers = 0

while counter < n:
    number = counter + m
    sum_of_numbers = sum_of_numbers + number
    counter = counter + 1

print(sum_of_numbers)"
7f02f87b-5643-4070-8692-d9aee117712f,"Given two numbers `X` and `N`, write a program to print the **sum** of `N` terms in the given series.

**Series:**

<div style=""background-color: #3c4257; padding: 15px; color: #f8f8f2;border-radius: 4px;margin: 10px;font-size: 18px;font-family:Monaco, Menlo, 'Ubuntu Mono', Consolas, source-code-pro, monospace"">
X, -X<sup>3</sup>, X<sup>5</sup>, -X<sup>7</sup>, X<sup>9</sup>, ... N terms
</div>

<br/>

**Terms in the given series:**

| Term Number | Term             | Power |
| ----------- | ---------------- | ----- |
| First Term  | X                | 1     |
| Second Term | -(X<sup>3</sup>) | 3     |
| Third Term  | X<sup>5</sup>    | 5     |
| Fourth Term | -(X<sup>7</sup>) | 7     |
| ..          | ..               | ..    |

---

#### Input

The first line of input contains an integer representing `X`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the **sum** of the series from the **first term** to the **Nth term**.

---

#### Explanation

For example, if the given numbers are `X = 2` and `N = 5`,

- The **first term** to the **fifth term** in the given series are **2** (2<sup>1</sup>), **-8** (-2<sup>3</sup>), **32** (2<sup>5</sup>), **-128** (-2<sup>7</sup>) and **512** (2<sup>9</sup>).

  **Terms in the given series:**

  | Term Number | Term (X = 2)              | Power |
  | ----------- | ------------------------- | ----- |
  | First Term  | 2<sup>1</sup> (2)         | 1     |
  | Second Term | -2<sup>3</sup> (-8)    | 3     |
  | Third Term  | 2<sup>5</sup> (32)        | 5     |
  | Fourth Term | -2<sup>7</sup> (-128)   | 7     |
  | Fifth Term  | 2<sup>9</sup> (512)     | 9    |

- Sum of terms from **first term** to **fifth term** is **410**. (`2 + (-8) + 32 + (-128) + 512 = 410`)

The output should be **410**.

Solution Code:X = int(input())
N = int(input())
sum_of_N_terms = 0 
power = 1
for i in range(N) :
    if i % 2 == 0 :
        sum_of_N_terms = sum_of_N_terms + (X ** power)
    else :
        sum_of_N_terms = sum_of_N_terms - (X ** power)
    power = power + 2
print(sum_of_N_terms)"
d1cd2e77-b6f0-4457-954f-4bd1a283231a,"Given space-separated numbers, write a program that creates a list using space-separated numbers and prints the first half of the numbers of the list as a new list.

<MultiLineNote>
If the given number of words is an odd number, add one to it such that it becomes an even number and count half of the number of words.
</MultiLineNote>

---

#### Input

The input will be a single line containing space-separated integers.

---

#### Output

The output should be a single line containing a list of first half of the numbers.

---

#### Explanation

For example, if the given numbers are **1 3 9 0 8 2 7**.

- Given **7** numbers are **1**, **3**, **9**, **0**, **8**, **2**, and **7**.
- Half of the given **7** numbers are **4** numbers **1**, **3**, **9**, and **0**.

The output should be,

```
[1, 3, 9, 0]
```

Solution Code:numbers = input().split()

length = len(numbers)

for each_num_index in range(length):
 numbers[each_num_index]=int(numbers[each_num_index])

if length % 2 == 0:
 half_list_length = length // 2
else:
 half_list_length = (length // 2) + 1

first_half_list = numbers[:half_list_length]

print(first_half_list)"
732f9d19-cb2c-4911-873d-0ac684052ebc,"A function is given in prefilled code that takes a number `N` as an argument.

Write a program that checks if `N` is less than **1000**.

Return **5%** of the `N` if `N` is less than **1000**. Otherwise, return **10%** of the `N`.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing the float returned by the function. **5%** of the `N` should be printed if `N` is less than **1000**. Otherwise, **10%** of `N` should be printed.

---

#### Explanation

For example, if the given number is `N = 500`,

- The given number **500** is less than **1000**. (`500 < 1000`)
- **5%** of **500** is **25.0**. (`(5 / 100) * 500 = 25.0`)

The output should be **25.0**.


Solution Code:def calculate_percentage(number):
 if number < 1000:
 value = ((5 / 100) * number)
 else:
 value = ((10 / 100) * number)
 
 return value
 
number = int(input())

result = calculate_percentage(number)

print(result)"
add2545a-4599-40f8-b692-e990507a222b,"Complete the given **Car** class by adding new features by following the given instructions.

**Existing _Car_ class**:

In the previous questions, you have added the attributes and methods below in the _Car_ class. 

* Attributes
    * color
    * max\_speed
    * acceleration
    * tyre\_friction
    * is\_engine\_started
* Methods
    * start\_engine
    * stop\_engine


Now, let's add a few new features to the _Car_ class. 


<details>

<summary>**Features to be added to the _Car_ class**</summary>

- Add **current_speed** attribute
    - When a new car is created, the engine should be off by default and **current_speed** should be **0**.
- Add **accelerate** method
    - If **accelerate** method is called when the car engine is off,
        - The **current_speed** of the car should not increase.
        - Print the message **""Car has not started yet""** if the car engine is off.
        
    - If **accelerate** method is called when the car engine is on,
        - The **current_speed** of the car should increase according to its acceleration value
        - A car cannot accelerate more than its **max_speed**.

</details>

<MultiLineNote>
You can copy the code from the previous question and add new features on top of that code.
</MultiLineNote>

<br/>

**Points to Note**  

 - The output of the testcase **Checking Default Tests** is given by the `default_test` function in the prefilled code.
 - This coding question does not have the usual input/output testcases. The class defined by you will be tested internally whether the attributes are present or not. So in testcases results you will be shown the rough description of the tests that will be verified.

Solution Code:class Car:
    def __init__(self, color, max_speed, acceleration, tyre_friction):
        self.color = color
        self.max_speed = max_speed
        self.acceleration = acceleration
        self.tyre_friction = tyre_friction
        self.is_engine_started = False
        self.current_speed = 0

    def start_engine(self):
        self.is_engine_started = True

    def stop_engine(self):
        self.is_engine_started = False

    def accelerate(self):
        if not self.is_engine_started:
            print(""Car has not started yet"")
        else:
            self.current_speed += self.acceleration
            if self.current_speed > self.max_speed:
                self.current_speed = self.max_speed


def default_test():
    car = Car(color=""Red"", max_speed=50, acceleration=10, tyre_friction=3)
    car.accelerate()  # Calling the accelerate method when the is_engine_started is False
    # The above line will print ""Car has not started yet""
    print(car.current_speed)
    car.start_engine()  # Starting the car engine
    print(car.current_speed)  # Car engine is started but not yet accelerated => 0
    car.accelerate()  # Calling the accelerate method when the is_engine_started is True
    print(car.current_speed)  # current_speed value has increased by acceleration value (0 + 10 => 10)
    car.accelerate()
    print(car.current_speed)  # current_speed value is 10 and increasing again by acceleration value (10 + 10 => 20)
    car.accelerate()
    car.accelerate()
    car.accelerate()
    print(car.current_speed)
    car.accelerate()  # Accelerating the car more than its max_speed
    print(car.current_speed)  # Any car cannot accelerate more than its max_speed => 50
"
fbfd54da-3638-4d22-aaa0-8661bd656662,"Write a program to create a menu-driven calculator that performs basic arithmetic operations (+, -, *, /, and %).<hr><b>Input</b><br/><br/>The input will be a single line containing two integers and operator(+, -, *, /, and %) similar to 3 + 5.<hr><b>Output</b><br/><br/>If the given operator is &quot;+&quot;, print the sum of two numbers.<br/>If the given operator is &quot;-&quot;, print the result of the subtraction of the two numbers.<br/>If the given operator is &quot;*&quot;, print the multiplication of the two numbers.<br/>If the given operator is &quot;/&quot;, print the result of the division of the two numbers.<br/>If the given operator is &quot;%&quot;, print the result of the modulus operation of the two numbers.<hr><b>Explanation</b><br/><br/>For example, if the given operator is &quot;+&quot; and the two numbers are 3 and 5. As it is an addition operator, your code should print the sum of the given two numbers (3 + 5), which is 8.<br/>Similarly, if the given operator is &quot;*&quot; and the two numbers are 2 and 5.<br/>As it is a multiplication operator, your code should print the result of the multiplication of the given two numbers (2 * 5), which is 10.<br/>Similarly, if the given operator is &quot;-&quot; and the two numbers are 10 and 9.<br/>As it is a subtraction operator, your code should print the result of the subtraction of the given two numbers (10 - 9), which is 1.

Solution Code:a, operator, b = input().split()
a, b = int(a), int(b)

if operator == ""+"":
    result = a + b 
elif operator == ""-"":
    result = a - b 
elif operator == ""*"":
    result = a * b 
elif operator == ""/"":
    result = a / b 
elif operator == ""%"":
    result = a % b 
print(result)"
653a294f-6cbb-452f-afc9-581fe340f02f,"Write a program that reads comma-separated numbers and the number `K` and then finds all the unique pairs in the given numbers whose sum is equal to `K`.

---

#### Input  

The first line of input contains comma-separated integers.
The second line of input contains an integer representing `K`.

---

#### Output  

The output should contain all the unique pairs whose sum is equal to `K`, each on a new line.

---

#### Explanation  

If the given comma-separated integers are `5,3,7,9,5` and `K = 12`. 

Following are the possible pairs from the given numbers.

| Possible Pairs | Sum |         
| :--: | :--:|
|5 + 3 | 8|
|`5 + 7` | **12**|
|5 + 9 | 14|
|5 + 5 | 10|
|3 + 7 | 10|
|`3 + 9` | **12**|
|3 + 5 | 8|
|`9 + 3` | **12**|
|7 + 9 | 16|
|`7 + 5` | **12**|
|9 + 5 | 14|

From the above, the `pairs` whose sum is equals to `12` are,

- `5 + 7 = 12`
- `3 + 9 = 12`
- `9 + 3 = 12`
- `7 + 5 = 12`

`Sort` the above pairs and print each `unique pair` as a **tuple**. 

So, the output should be,

```
(3, 9)
(5, 7)
```

Solution Code:def get_unique_pairs(int_list, pair_sum):
    stop_index = len(int_list) - 1
    unique_pairs_set = set()
    for cur_index in range(stop_index):
        num_1 = int_list[cur_index]
        num_2 = pair_sum - num_1
        remaining_list = int_list[cur_index+1:]
        if num_2 in remaining_list:
            pair = (num_1, num_2)
            # avoid duplicates like (5,7) & (7,5)
            sorted_pair = tuple(sorted(pair))
            unique_pairs_set.add(sorted_pair)
    return unique_pairs_set

def convert_string_to_int(str_num_list):
    new_list = []
    for item in str_num_list:
        num = int(item)
        new_list.append(num)
    return new_list

str_num_list = input().split("","")
pair_sum = int(input())
int_list = convert_string_to_int(str_num_list)
unique_pairs = get_unique_pairs(int_list, pair_sum)
unique_pairs = list(unique_pairs)
unique_pairs.sort()  # sort the tuples according to the first element
for pair in unique_pairs:
    print(pair)"
c97bd919-7f4e-450c-98cb-a1023a973006,"For this problem, the prefilled code will contain a set. Write a program to check the following relations with the given set.<br/>   1. Superset<br/>   2. Subset<br/>   3. Disjoint Set<hr><b>Input</b><br/><br/>The input will be a single line containing the space-separated integers.<hr><b>Output</b><br/><br/>The output should be a single line containing either &quot;Superset&quot; or &quot;Subset&quot; or &quot;Disjoint Set&quot;.<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;2 3 4&quot;, the output should be &quot;Superset&quot;, as all the values in the given set are present in the original set.

Solution Code:def convert_string_to_int(list_a):
 new_list = []
 for item in list_a:
 num = int(item)
 new_list.append(num)
 return new_list


num_set = {1, 2, 3, 4, 5, 6, 7, 8, 9}

num_list = input().split()
num_list = convert_string_to_int(num_list)
set_a = set(num_list)

if num_set.issuperset(set_a):
 print(""Superset"")
elif num_set.issubset(set_a):
 print(""Subset"")
elif num_set.isdisjoint(set_a):
 print(""Disjoint Set"")"
10018cbc-31af-45b9-a60d-746d24f1e25e,"Given a sentence as input, print all the unique combinations of two words in lexicographical order.<hr><b>Input</b><br/><br/>The input will be a single line containing a sentence.<hr><b>Output</b><br/><br/>The output should be multiple lines, each line containing the unique combination of two words in lexicographical order.<hr><b>Explanation</b><br/><br/>For example, if the given sentence is &quot;raju plays cricket&quot;, the possible unique combination of two are (cricket, plays), (cricket, raju), (plays, raju). So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">cricket plays
cricket raju
plays raju
</code></pre>

Solution Code:def generate_2_combinations(words):
    words = sorted(words)
    items = list(range(len(words)))
    combinations_1 = []
    for item in items:
        combinations_1.append([item])  # Generating one word combinations
    # Generating two words combinations by adding one more word to one word combinations
    combinations_2 = []
    for combination in combinations_1:
        for item in items:
            if item > combination[-1]:
                combinations_2.append(combination + [item])

    word_combinations = []
    for combination in combinations_2:
        word_combination = []
        for index in combination:
            word_combination.append(words[index])
        word_combinations.append(tuple(word_combination))
    return sorted(set(word_combinations))


words = input().split()
all_combinations = generate_2_combinations(words)
for combination in all_combinations:
    print(' '.join(combination))
"
30bde4a6-3701-4aa8-9866-96014801845f,"Given a sentence as input, print all the unique combinations of three words in lexicographical order.<hr><b>Input</b><br/><br/>The input will be a single line containing a sentence.<hr><b>Output</b><br/><br/>The output should be multiple lines, each line containing the unique combination of three words in lexicographical order.<hr><b>Explanation</b><br/><br/>For example, if the given sentence is &quot;apple is a fruit&quot;, the possible unique combination of three are (a, apple, fruit), (a, apple, is), (a, fruit, is), (apple, fruit, is). So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">a apple fruit
a apple is
a fruit is
apple fruit is
</code></pre>

Solution Code:def generate_3_combinations(words):
    words = sorted(words)
    items = list(range(len(words)))
    combinations_1 = []
    for item in items:
        combinations_1.append([item])  # Generating one word combinations

    # Generating two words combinations by adding one more word to one word combinations
    combinations_2 = []
    for combination in combinations_1:
        for item in items:
            if item > combination[-1]:
                combinations_2.append(combination + [item])

    combinations_3 = []
    for combination in combinations_2:
        for item in items:
            if item > combination[-1]:
                combinations_3.append(combination + [item])

    word_combinations = []
    for combination in combinations_3:
        word_combination = []
        for index in combination:
            word_combination.append(words[index])
        word_combinations.append(tuple(word_combination))
    return sorted(set(word_combinations))


words = input().split()
all_combinations = generate_3_combinations(words)
for combination in all_combinations:
    print(' '.join(combination))
"
cf3b0499-025b-41e7-99f0-43946c5ca8ce,"Write a program that reads all the match outcomes and summarizes the information of all the matches. <br/>Points are given to the teams based on the outcome of the match.<br/>A win earns a team 3 points. A draw earns 1. A loss earns 0. <br/>The following information is expected:<br/>MP: Matches Played<br/>W: Matches Won<br/>D: Matches Drawn (Tied)<br/>L: Matches Lost<br/>P: Points<br/><br/>The team information should be displayed in descending order of points.<hr><b>Input</b><br/><br/>The first line contains a single integer N, denoting the total no. of matches played. <br/>The following N lines contain outcomes of N matches. <br/>Each of those lines has information on the teams (T1, T2) which played and the outcome (O) in format T1;T2;O. <br/>The outcome (O) is one of &#x27;win&#x27;, &#x27;loss&#x27;, &#x27;draw&#x27; and refers to the first team listed. <br/>See Sample Input/Output for better understanding.<br/>The team name may contain spaces.<hr><b>Output</b><br/><br/>The output should contain summarized information of all the matches in a format similar to &#x27;Team: CSK, Matches Played: 4, Won: 2, Lost: 1, Draw: 1, Points: 7&#x27; for each team in a new line.<br/>If there are no teams to print in summary, print ""No Output"".<hr><b>Constraints</b><br/><br/>Names of teams may contain spaces but will be less than 24 characters<br/>100 &gt;= N &gt;= 0

Solution Code:reverse_outcomes = {'win': 'loss', 'loss': 'win', 'draw': 'draw'}

def update_match_outcome(team_stats, team, outcome):
    outcomes = ['win', 'loss', 'draw']
    if not team_stats.get(team):
        team_stats[team] = {'win': 0, 'loss': 0, 'draw': 0}
    for possible_outcome in outcomes:
        if outcome == possible_outcome:
            team_stats[team][outcome] += 1
        else:
            team_stats[team][outcome] += 0

def get_points(team_stats, team):
    return team_stats[team]['win'] * 3 + team_stats[team]['draw']

def store_game_result(team_stats):
    t1, t2, match_outcome = input().split(';')
    update_match_outcome(team_stats, t1, match_outcome)
    update_match_outcome(team_stats, t2, reverse_outcomes[match_outcome])

def print_points_table(team_points, team_stats):
    team_fmt = 'Team: {}, Matches Played: {}, Won: {}, Lost: {}, Draw: {}, Points: {}'
    for points, team in team_points:
        won, lost, draw = team_stats[team]['win'], team_stats[team]['loss'], team_stats[team]['draw']
        matches_played = won + lost + draw
        output = team_fmt.format(team, matches_played, won, lost, draw, points)
        print(output)

def main():
    n = int(input())
    if n == 0:
        print(""No Output"")
        return
    team_stats = dict()
    for i in range(n):
        store_game_result(team_stats)
    team_points = []
    for team in team_stats:
        team_points.append((get_points(team_stats, team), team))
    team_points.sort(reverse=True)
    print_points_table(team_points, team_stats)

main()"
d6e15492-fa37-4ffc-9fc2-0c72feb2ad4b,"Given an MxN matrix filled with `X`'s and `O`'s, find the largest square containing only `X`'s and return its area.
If there are no `X`s in the entire matrix print 0.


___

#### Input

The first line of input will be containing two space-separated integers, denoting M and N.
The next M lines will contain N space-separated integers, denoting the elements of the matrix.


___

#### Output

The output should be a single line containing the area of the maximum square.


___

#### Explanation

For example, if the given M, N and elements of matrix are as the following

```
4 5
X O X O O
X O X X X
X X O X X
X O O X O
```

The matrix from indices (1, 3) to (2, 4) has the maximum square with `X`. So the output should be the area of the maximum rectangle with `X`, which is 4.


Solution Code:def read_matrix(rows):
    matrix = []
    for i in range(rows):
        row = input().split()
        matrix.append(row)
    return matrix

def check_if_sub_matrix_contains_zero(matrix, i, j, k, l):
    for m in range(0, k + 1):
        for n in range(0, l + 1):
            if (matrix[i + m][j + n] == ""O""):
                return True
    return False
    
def get_max_sub_matrix_area(matrix, rows, columns, i, j):
    max_sub_matrix_area = 0
    for k in range(0, rows - i):
        for l in range(0, columns - j):
            if(k != l): # if k != l, then it is a rectangle but not square
                continue
            is_sub_matrix_contains_zero = check_if_sub_matrix_contains_zero(matrix, i, j, k, l)
            # If the submatrix does not contain zero, then it is possible that the submatrix may contain the maximum area
            if not is_sub_matrix_contains_zero:
                # Here, (k + 1) * (l + 1) provides the newly discovered sub matrix area
                max_sub_matrix_area = max(max_sub_matrix_area, (k + 1) * (l + 1))
    return max_sub_matrix_area

def get_max_area_of_square(matrix, rows, columns):
    max_area_of_square = 0
    for i in range(rows):
        for j in range(columns):
            if (matrix[i][j] == ""X""): 
                # When the current element is ""X"", start finding the maximum submatrix area 
                # on the bottom right that starts with the current element.
                max_sub_matrix_area = get_max_sub_matrix_area(matrix, rows, columns, i, j)
                max_area_of_square = max(max_area_of_square, max_sub_matrix_area)
    return max_area_of_square 
    
def main():
    rows, columns = map(int, input().split("" ""))
    matrix = read_matrix(rows)
    max_area_of_square = get_max_area_of_square(matrix, rows, columns)
    print(max_area_of_square)
    
main()"
83896137-0dc2-4537-8208-1c9126da50b9,"You are given a string `S`. Write a program to replace each letter of the string with the next letter that comes in the English alphabet.

**Note:** Ensure that while replacing the letters, uppercase should be replaced with uppercase letters, and lowercase should be replaced with lowercase letters.

---

#### Input

The first line of input is a string.

---

#### Explanation

In the given example, `Hello World`.

If we replace each letter with the letter that comes next in the English alphabet, `H` becomes `I`, `e` becomes `f` and so on ... 
So, the output should be `Ifmmp Xpsme`. 

Solution Code:word = input()
length = len(word)

new_word = """"

for i in range(length) :
    sentence = ord(word[i])
    if chr(sentence) != "" "" :
        value = sentence + 1 
        new_word = new_word + chr(value)
    else :
        new_word = new_word + "" ""
print(new_word)"
e4e762d5-6a2e-4157-abc4-685a15853e43,"You are given cofficients `a`, `b` and `c` of a quadratic equation ax<sup>2</sup> + bx + c = 0. Find the roots `r1`, `r2` of the equation.

**Note:** `r1` and `r2` should be rounded upto 2 decimal places.

---

#### Input

The first line of input is an integer `a`.
The second line of input is an integer `b`.
The third line of input is an integer `c`.

---

#### Explanation

In the given example, a = 1, b = -5, c = 6. Then the equation is x<sup>2</sup> - 5x + 6 = 0

``` 
r1 = (-b + (b^2 - 4*a*c)^0.5)/2*a 
r1 = (5 + (25 - 24))/2
r1 = 3

```

and 

```
r2 = (-b - (b^2 - 4*a*c)^0.5)/2*a
r2 = (5 - (25 - 24))/2
r2 = 2

```

So, the output should be 

```
3
2

```

Solution Code:a = int(input())
b = int(input())
c = int(input())
root_1 = (-b + ((b**2) - (4*a*c)) ** 0.5)/(2 * a)
root_2 = (-b - ((b**2) - (4*a*c)) ** 0.5)/(2 * a)
print(round(root_1,2))
print(round(root_2,2))"
66bca2f2-6d4d-4f37-a90c-bcdcc5566e22,"A function is given in the prefilled code that takes two numbers `X` and `N` as arguments.

Write a program that returns the **sum** of the given series up to `N` terms using Recursion.

**Series:**

<div style=""background-color: #3c4257; padding: 15px; color: #f8f8f2;border-radius: 4px;margin: 10px;font-size: 18px;font-family:Monaco, Menlo, 'Ubuntu Mono', Consolas, source-code-pro, monospace"">
X, X-2, X-4, X-6, ... N terms
</div>

<br/>

**Terms in the given series:**

| Term Number | Term             | 
| ----------- | -----------------| 
| First Term  | (X)              |            
| Second Term | (X - 2)          |         
| Third Term  | (X - 4)          | 
| ..          | ..               |          
| Nth Term    | (X - 2 * (N - 1))|           


---

#### Input

The first line of input contains an integer representing `X`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the sum of the series **(X, X - 2, X - 4, ...)** up to `N` terms.

---

#### Explanation

For example, if the given numbers are `X = 8` and `N = 3`,

- The number of terms is **3**.
- The **First term** to **Third term** in the given series are **8** (8 - 0), **6** (8 - 2) and **4** (8 - 4).

  **Terms in the given series:**
  
  | Term Number | Term                     |
  | ----------- | ------------------------ |
  | First Term  | 8 - 0 (8)  |
  | Second Term | 8 - 2 (6)  | 
  | Third Term  |8 - 4 (4) |



- The sum of the series from **First** to **Third** is **18**. (`8 + 6 + 4 = 18`)

The output should be **18**.

Solution Code:def get_sum_of_series(number, number_of_terms):
    # Complete this recursive function
    each_num = 0
    result = 0
    
    for i in range(number_of_terms):
        result += number - each_num 
        each_num += 2
    return result
            
        
number = int(input())
number_of_terms = int(input())

series_sum = get_sum_of_series(number, number_of_terms) # Call the get_sum_of_series function
print(series_sum)"
2d1c884c-d80d-43c4-9084-86135b606c74,"A list `L` is given in the prefilled code.

Write a program that reads a number `N` and prints the index of the given number `N` in the list `L`. If there are multiple occurrences of `N`, print all indices separated by a space.

```
L = [5, 4, 10, 2, 3, 2, 5, 15, 4, 4]
```

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing space-separated integers representing the indices of of the given number `N` in the list `L`.

---

#### Explanation

For example, if the given number is `N = 10`,

- Integers in the list `L` and their respective indices are,

   <div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
    <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">Numbers</div>
       <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">5</div>
       <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">4</div>
       <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">10</div>
       <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">2</div>
       <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">3</div>
       <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">2</div>
       <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">5</div>
       <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">15</div>
       <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">4</div>
       <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; text-align: center;padding: 8px 12px;"">4</div>
   </div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
       <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;color: #808080;font-weight: bold;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">Indices</div>
       <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
       <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
       <div style=""font-family: 'Roboto';display: table-cell; font-weight: 900;vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
       <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc; 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
       <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
       <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
       <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">6</div>
       <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">7</div>
       <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">8</div>
       <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">9</div>
   </div>
  

- The index value of **10** is **2**.

The output should be **2**
<br>
For example, if the given number is `N = 2`,

- Integers in the list `L` and their respective indices are,

   <div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
       <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">Numbers</div>
       <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">5</div>
       <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">4</div>
       <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">10</div>
       <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900; text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">2</div>
       <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">3</div>
       <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">2</div>
       <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">5</div>
       <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">15</div>
       <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">4</div>
       <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; text-align: center;padding: 8px 12px;"">4</div>
   </div>

   <div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
       <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;color: #808080;font-weight: bold;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">Indices</div>
       <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
       <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
       <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
       <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;font-weight: 900; 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
       <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
       <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;font-weight: 900;1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
       <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">6</div>
       <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">7</div>
       <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">8</div>
       <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">9</div>
   </div>

 
- Value **2** is present at two different indices **3** and **5**.

The output should be **3 5**


Solution Code:list_a = [5, 4, 10, 2, 3, 2, 5, 15, 4, 4]
n = int(input())
index = []
for i in range(len(list_a)):
    if list_a[i] == n:
        index.append(str(i))

print(' '.join(index))"
e35abbd2-35f2-40b2-b429-a1ea2ebdba2d,"Write a program that reads two three-digit numbers `A` and `B` and checks if the first digit of `A` is less than the last digit of `B`.

---

#### Input

The first line of input contains a three-digit integer representing `A`.

The second line of input contains a three-digit integer representing `B`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the first digit of `A` is less than the last digit of `B`, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 123` and `B = 378`,

- The first digit of **123** is **1** and the last digit of **378** is **8**.
- The digit **1** is less than **8**.

The output should be **True** as the first digit of **A** is less than the last digit of **B**.

---

For example, if the given numbers are `A = 215` and `B = 572`,

- The first digit of **215** is **2** and the last digit of **572** is **2**.
- The digit **2** is not less than **2**.(**2** is equal to **2**)

The output should be **False** as the first digit of **A** is not less than the last digit of **B**.

Solution Code:first_number = input()
second_number = input()

first_digit_of_a = int(first_number[0])
third_digit_of_b = int(second_number[2])

result = first_digit_of_a < third_digit_of_b 
print(result)"
08d6303c-8403-420a-9d18-d0373445d672,"Write a program that reads a three-digit number and checks if any of the below conditions is satisfied.

* Each digit of the given number is greater than **7**.
* The product of any two digits is **always** less than or equal to **30**.

---

#### Input

The input will be a single line containing a three-digit integer.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if each digit of the given number is greater than **7** or the product of any two digits is always less than or equal to **30**, otherwise **False** should be printed.

---

#### Explanation

For example, if the given number is **832**,

<ul style=""list-style-type: none;padding:0;"">
  <li style=""margin:0;"">
    <details style=""margin:0;"">
      <summary style=""margin:0;padding:0;"">✖ Each digit is greater than **7**.</summary>
        <ul style=""list-style-type: none;"">
          <li style=""margin:0;padding:0;"">✔ The first digit is greater than **7**. (**8** is greater than **7**)</li>
          <li style=""margin:0;padding:0;"">✖ The second digit is greater than **7**. (**3** is not greater than **7**)</li>
          <li style=""margin:0;padding:0;"">✖ The third digit is greater than **7**. (**2** is not greater than **7**)</li>
        </ul>
    </details>
  </li>
  <li style=""margin:0;"">
    <details style=""margin:0;"">
      <summary style=""margin:0;"">✔ The product of any two digits is **always** less than or equal to **30**.</summary>
        <ul style=""list-style-type: none;"">
          <li style=""margin:0;"">The product of first, second digits and second, third digits and third, first digits is always less than or equal to **30**.</li>
          <li style=""margin:0;"">✔ The product of the first and second digits is less than or equal to **30**. (`8 * 3 = 24`, **24** is less than or equal to **30**)</li>
          <li style=""margin:0;"">✔ The product of the second and third digits is less than or equal to **30**. (`3 * 2 = 6`, **6** is less than or equal to **30**)</li>
          <li style=""margin:0;"">✔ The product of the third and first digits is less than or equal to **30**. (`2 * 8 = 16`, **16** is less than or equal to **30**)</li>
       </ul>
    </details>
  </li>
</ul>

The output should be **True** as the product of any two digits is **always** less than or equal to **30**.

Solution Code:number = input()

first_digit = number[0]
first_digit = int(first_digit)

second_digit = number[1]
second_digit = int(second_digit)

third_digit = number[2]
third_digit = int(third_digit)

is_greater = (first_digit > 7) and (second_digit > 7) and (third_digit > 7)

is_first_second_product_lesser = (first_digit * second_digit) <= 30
is_second_third_product_lesser = (second_digit * third_digit) <= 30
is_third_first_product_lesser = (third_digit * first_digit) <= 30

is_product_lesser = is_first_second_product_lesser and is_second_third_product_lesser and is_third_first_product_lesser

result = is_greater or is_product_lesser
print(result)"
43739775-9e33-4a24-88ad-5d9b4e37d2b6,"Write a program that reads two coupon codes `A` and `B` and checks if the first three characters of **one of the coupon codes** is equal to ""**DIS**"".

Print **Discount** if the first three characters of **one of the coupon codes** is equal to ""**DIS**"". Otherwise, print **No Discount**.

---

#### Input

The first line of input contains a string representing `A`.
The second line of input contains a string representing `B`.

---

#### Output

The output should be a single line containing a string. **Discount** should be printed if the first three characters of **one of the coupon codes** is equal to ""**DIS**"". Otherwise, **No Discount** should be printed.

---

#### Explanation

For example, if the given coupon codes are `A = ""DISA9#5""` and `B = ""6BY@X""`,

✔ The first three characters of `A` is equal to ""**DIS**"". (The first three characters of ""**DISA9#5**"" is ""**DIS**"". ""**DIS**"" is equal to ""**DIS**"")
✖ The first three characters of `B` is equal to ""**DIS**"". (The first three characters of ""**6BY@X**"" is ""**6BY**"". ""**6BY**"" is **not** equal to ""**DIS**"")

The output should be **Discount** as the first three characters of `A` is equal to ""**DIS**"".


Solution Code:a = input()
b = input()

first_three_characters_of_a = a[:3]
first_three_characters_of_b = b[:3]

if (first_three_characters_of_a == ""DIS"") or (first_three_characters_of_b == ""DIS""):
    print(""Discount"")
else:
    print(""No Discount"")"
891c335c-b6cd-4e9c-9be3-1be8bc12abb1,"Write a program that reads two words `A`, `B`, and an index `I`.

Check if `B` starts at index `I` in `A`.

---

#### Input

The first line of input contains a string representing `A`.
The second line of input contains a string representing `B`.
The third line of input contains an integer representing `I`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the word `B` starts at index `I` of the word `A`, otherwise **False** should be printed.

---

#### Constraints

Length of `B` is less than or equal to the length of `A`.

---

#### Explanation

For example, if the given words are `A = Repeat`, `B = pea`, and the index is `I = 2`,

   <div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">R</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">e</div>
     <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">p</div>
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;font-weight: 900; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">e</div>
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;font-weight: 900; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">a</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;padding: 8px 12px;"">t</div>
   </div>
   <div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;font-weight: 900;"">2</div>
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;font-weight: 900;"">3</div>
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;font-weight: 900;"">4</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
   </div>
   <br/>

* The word **Pea** is a part of the word **Repeat**.
* The word **Pea** starts at the 2nd index of the word **Repeat**.

The output should be **True** as the string **pea** starts from the index **2** of the string **Repeat**.


Solution Code:first_string = input()
second_string = input()

start_index = input()
start_index = int(start_index)

second_string_length = len(second_string)

end_index = start_index + second_string_length
part = first_string[start_index:end_index]

result = part == second_string
print(result)"
1a150a0e-d8a4-4ad4-a4a2-583f14c56518,"Write a program that reads a number and converts it to a positive number.

If the given number is negative, convert it to a positive number and print it. Otherwise, print the given number.

---

#### Input

The input will be a single line containing an integer.

---

#### Output

The output should be a single line containing a positive integer.

---

#### Explanation

For example, if the given number is **-5**,

* **-5** is a negative number.
* **-5** should be converted to a positive number which is **5**.

The output should be **5**.

For example, if the given number is **39**,

* **39** is a positive number.

The output should be **39**.

Solution Code:number = int(input())

if number < 0:
 number = number * (-1)
 
print(number)"
e86b0e9e-3b5c-4e17-b823-267d721a0830,"Write a program that reads two numbers `A` and `B`, and checks if both `A` and `B` are greater than **35** or `A` is greater than `B`.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if both `A` and `B` are greater than **35** or `A` is greater than `B`, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 45` and `B = 25`,

✖ `A` and `B` are greater than **35**. (**45** is greater than **35** but **25** is less than **35**)
✔ `A` is greater than `B`. (**45** is greater than **25**)

The output should be **True** as `A` is greater than `B`.


Solution Code:first_number = input()
first_number = int(first_number)

second_number = input()
second_number = int(second_number)

are_greater_than = (first_number > 35) and (second_number > 35)
is_first_number_greater = first_number > second_number

result = are_greater_than or is_first_number_greater

print(result)"
c9fa74a0-6df5-444d-88d0-6fd559798773,"Write a program that reads two numbers `A` and `B` and checks if `A` is greater than or equal to `B`. Print the result as shown in the sample output.

---

#### Input

The first line of input contains a float.
The second line of input contains a float.

---

#### Output

The output should be a single line containing a string as shown in the sample output.

---

#### Explanation

For example, if the given numbers are `A = 4.3` and `B = 3.2`, 

* `A` is greater than or equal to `B`: **True**. (**4.3** is greater than or equal to **3.2**)
* Add the string **""A >= B is ""** before **True**. 

The output should be **A >= B is True**.

Solution Code:a = input()
a = float(a)
b = input()
b = float(b)

result = a >= b
result = str(result)

print(""A >= B is "" + result)"
c4279c22-952d-479f-8db9-6169e6a4d910,"Write a program that reads two numbers `A` and `B` and checks if one of the given numbers is negative and product of the numbers is greater than or equal to **-46**.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if one of the given numbers is negative and product of the numbers is greater than or equal to **-46**, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are `A = -10` and `B = 1`,

✔ One of the given numbers is negative. (**-10** is negative)
✔ Product of the numbers is greater than or equal to **-46**. (`-10 * 1 = -10`, **-10** is greater than or equal to **-46**)

The output should be **True** as one of the given numbers is negative and product of the numbers is greater than or equal to **-46**.


Solution Code:first_number = input()
first_number = int(first_number)

second_number = input()
second_number = int(second_number)

is_first_number_negative = first_number < 0
is_second_number_negative = second_number < 0
product = first_number * second_number

is_negative = is_first_number_negative or is_second_number_negative
is_greater_than_or_equal = product >= -46

result = is_negative and is_greater_than_or_equal
print(result)
"
3c8e3c0b-c5d3-426e-8c0e-686351ff9e7c,"Write a program that reads a string and prints the second half part of the string.


---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing a string that is the second half part of the string.

---

#### Explanation

For example, if the given string is **Football**,

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""color: #808080;display: table-cell; vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">F</div>
   <div style=""color: #808080;display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">o</div>
   <div style=""color: #808080;display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">o</div>
   <div style=""color: #808080;display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">t</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">b</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">a</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">l</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 0;padding: 8px 12px;"">l</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""color: #808080;display: table-cell; vertical-align: inherit; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
   <div style=""color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
   <div style=""color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
   <div style=""color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
   <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
   <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
   <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">6</div>
   <div style=""display: table-cell; vertical-align: inherit;border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">7</div>
</div>

* The first half part of the string contains **Foot**.
* The second half part of the string contains **ball**.

The output should be **ball**.

Solution Code:Word=input()
length_of_the_word=len(Word)
index =int(length_of_the_word/2)
print(Word[index:])"
3c82ae5f-53a1-4838-be33-5b982c967eae,"You are given a side of a square as input. Write a program to find the perimeter and area of the square.

---

#### Input

The input is an integer representing the length of the side of the square.

---

#### Output

The first line of the output should contain area of the square, and the second line of the output should contain the perimeter of the square as per the format shown in the sample output. 

---

#### Explanation

Given the length of the side is `2`. 

As the area of square is `side*side` and the perimeter of the square is `4*side`.

Then output should be

```
Area of the square is: 4
Perimeter of the square is: 8
```

Solution Code:side = input()
side = int(side)

area = side * side
perimeter = 4 * side

print(""Area of the square is:"",area)
print(""Perimeter of the square is:"",perimeter)"
fb42a0b4-109b-4963-ae26-d3ea99a8f447,"Write a program that reads a number `N`. `N` is divided into two parts `X` and `Y`. 

* `X` is **30** percent of `N`. 
* `Y` is the remaining percentage of `N`. Print `Y`.

<MultiLineNote>
Total Percentage of X and Y is 100.

The Percentage (P) of Number (N) can be calculated as:

value = (percentage / 100) * number

</MultiLineNote>

---

#### Input

The input will be a single line containing an integer.

---

#### Output

The output should be a single line containing an integer that is the `Y` percentage of `N`.

---

#### Explanation

For example, if the given number is **N = 50**,

* Total Percentage of X and Y is 100.
* `X` is **30** percent of `N`. 
* `Y` is the remaining percentage of `N`. The remaining percentage is **70** (`100 - 30`).
* The **70** percent of **50** is,

```
Y = (percentage / 100) * number
Y = (70 / 100) * 50
Y = 0.7 * 50
Y = 35.0
```

The output should be **35.0**.


Solution Code:n=int(input())

y = 100 - 30
y_percentage_of_n=(y/100)*n
print(y_percentage_of_n)"
c78ed163-ff9e-431a-a56d-7955553e02e2,"Write a program that reads a word and two indices (X, Y) and prints a part of the word from the index X to the index Y.

---

#### Input

The first line of input contains a string.
The second line of input contains an integer X.
The third line of input contains an integer Y.

---

#### Output

The output should be a single line containing a string that is part of the word.

---

#### Constraints

**Y** is always greater than or equal to **X**.


#### Explanation

For example, if the given word is **Growing**, index **X** is **3** and index **Y** is **6**,

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: 900; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">G</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">r</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">o</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">w</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">i</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">n</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 0;padding: 8px 12px;"">g</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
   <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;font-weight: 900;"">3</div>
   <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;font-weight: 900;"">4</div>
   <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;font-weight: 900;"">5</div>
   <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;font-weight: 900;"">6</div>
</div>

<br/>

The output should be **wing** as the slicing starts from the **3rd** index and stops at the **6th** index.

Solution Code:word = input()
start_index = input()
start_index = int(start_index)

end_index = input()
end_index = int(end_index)

part = word[start_index:end_index + 1]
print(part)"
d851cb9c-29d9-4834-bf46-704f8b8ed75b,"Write a program that reads a word and prints the first two and the last two letters of the word and prints the stars (`*`) instead of the remaining letters.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing a string that has the first two and the last two letters of the word and stars (`*`) instead of the remaining letters.

---

#### Explanation

For example, if the given word is **message**, 

* The number of letters in the word **message** is **7**. 
* The first two and the last two letters are **me**, **ge**.
* The number of letters excluding the first two and last two letters in a word is **3**.
* **3** stars should be printed between the first two and the last two letters.

The output should be **me\*\*\*ge**.

Solution Code:word = input()

word_length = len(word)
number_of_stars = word_length - 4

first_two_characters = word[:2]
last_two_characters = word[word_length - 2:]

result = first_two_characters + ""*"" * number_of_stars + last_two_characters
print(result)"
95633405-e356-431e-b4ec-983a1d078839,"You're given a word and an index position of a character. You need to write a program that prints the given word without the character at the given index.<hr><b>Input</b><br/><br/>The first line of input contains a word.<br/>The second line of input contains the index location.<hr><b>Output</b><br/><br/>The output should be a single line containing the word skipping the character at the given index location.<hr><b>Explanation</b><br/><br/>For example, if the given word is &quot;Combine&quot;, the character at the index location 4, is &quot;i&quot;, so the output without the character at the given index location is &quot;Combne&quot;

Solution Code:word = input()
n = int(input())
before = word[:n]
after = word[n+1:]
result = before + after
print(result)"
ddb42446-800d-47c6-ac6f-ceed50121e1f,"Write a program that reads a string and prints the first half part of the string.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing a string that is half of the given string.

---

#### Explanation

For example, if the given string is **Amazon**,

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""display: table-cell; vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">A</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">m</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">a</div>
   <div style=""color: #808080;display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">z</div>
   <div style=""color: #808080;display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">o</div>
   <div style=""color: #808080;display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 0;padding: 8px 12px;"">n</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""display: table-cell; vertical-align: inherit; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
   <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
   <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
   <div style=""color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
   <div style=""color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
   <div style=""color: #808080;display: table-cell; vertical-align: inherit;border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
</div>

* The first half part of the string contains **Ama**.
* The second half part of the string contains **zon**.

The output should be **Ama**.

Solution Code:word = input()
length_of_the_word = len(word)
half_length = length_of_the_word/2
half_length = int(half_length)
half_word = word[:half_length]
print(half_word)"
11a53e13-e811-4026-92ea-5fb48e7e8014,"A List `L` is given in the prefilled code. Write a program that reads the two indices `I1` and `I2`.

- Replace the element in the `I1`th index with the element in `I2`th index
- Replace the element in the `I2`th index with the element in `I1`th index

Print the updated list.

```
L = [1, ""two"", 9, 5.09, ""Three"", -558, ""four"", -93.7, ""six""]
```

---

#### Input

The first line of input contains an integer representing `I1`.
The second line of input contains an integer representing `I2`.

---

#### Output

The output should be a single line containing a list obtained by replacing the element at `I1` with the element at `I2` and the element at `I2` with the element at `I1`.

---

#### Explanation

For example, if the given numbers are `I1 = 2` and `I2 = 6`,

- The elements in the given prefilled list `L` are **1**, **""two""**, **9**, **5.09**, **""Three""**, **-558**, **""four""**, **-93.7**, and **""six""**.
- The element at index **2** is **9**, and the element at index **6** is **""four""**.

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';color: #808080;font-weight: 900; display: table-cell; vertical-align: inherit; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">1</div>
   <div style=""font-family: 'Roboto';color: #808080;font-weight: 900; display: table-cell;vertical-align: inherit;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">""two""</div>
   <div style=""font-family: 'Roboto';display: table-cell;font-weight: 900; vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">9</div>
   <div style=""font-family: 'Roboto';color: #808080;font-weight: 900; display: table-cell;vertical-align: inherit;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">5.09</div>
   <div style=""font-family: 'Roboto';color: #808080;font-weight: 900; display: table-cell;vertical-align: inherit; text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;""> ""Three""</div>
   <div style=""font-family: 'Roboto';color: #808080;font-weight: 900; display: table-cell;vertical-align: inherit;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">-558</div>
   <div style=""font-family: 'Roboto';display: table-cell;font-weight: 900; font-weight: 900;vertical-align: inherit;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">""four""</div>
   <div style=""font-family: 'Roboto';color: #808080;font-weight: 900; display: table-cell;vertical-align: inherit;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">-93.7</div>
   <div style=""font-family: 'Roboto';color: #808080;font-weight: 900; display: table-cell;vertical-align: inherit;text-align: center;border-right: 0;padding: 8px 12px;"">""six""</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit;font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">6</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">7</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit;text-align: center;border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">8</div>
</div>

- Replace **9** with **""four""** and **""four""** with **9**.

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';color: #808080;font-weight: 900; display: table-cell; vertical-align: inherit; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">1</div>
   <div style=""font-family: 'Roboto';color: #808080;font-weight: 900; display: table-cell;vertical-align: inherit;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">""two""</div>
   <div style=""font-family: 'Roboto';display: table-cell;font-weight: 900; vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">""four""</div>
   <div style=""font-family: 'Roboto';color: #808080;font-weight: 900; display: table-cell;vertical-align: inherit;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">5.09</div>
   <div style=""font-family: 'Roboto';color: #808080;font-weight: 900; display: table-cell;vertical-align: inherit; text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;""> ""Three""</div>
   <div style=""font-family: 'Roboto';color: #808080;font-weight: 900; display: table-cell;vertical-align: inherit;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">558</div>
   <div style=""font-family: 'Roboto';display: table-cell;font-weight: 900; font-weight: 900;vertical-align: inherit;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">9</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;font-weight: 900; vertical-align: inherit;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">93.7</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;font-weight: 900; vertical-align: inherit;text-align: center;border-right: 0;padding: 8px 12px;"">""six""</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit;font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">6</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">7</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit;text-align: center;border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">8</div>
</div>

The output should be,

```
[1, ""two"", ""four"", 5.09, ""Three', -558, 9, -93.7, ""six""]
```

Solution Code:L = [1, ""two"", 9, 5.09, ""Three"", -558, ""four"", -93.7, ""six""]

#Write your code here
l1 = int(input())
l2 = int(input())
a1 = L[l2]
a2 = L[l1]
L[l1] = a1
L[l2] = a2
print(L)"
1c86b967-1580-4b70-9a8b-10de79cfeb03,"Aman loves solving matrix problems. In one problem, he was given a **M x N** matrix and instructed to:

- Identify the zeros and replace them with the sum of neighbouring elements (top, bottom, left and right elements).

- Once all the zeroes are replaced, all the other elements in the corresponding row and column of those identified zeroes should be set to zero (excluding the elements which were previously zeros).

Aman got stuck with this problem and your task is to help Aman solve this matrix problem.

Write a program that reads the **M x N** matrix and prints the final matrix by following the above instructions.
 
---

#### Input

The first line of input contains two space-separated integers representing `M` and `N` respectively.

The next `M` lines of input contain `N` space-separated integers representing the matrix.

---

#### Output

The output should be `M` lines containing `N` space-separated integers representing the final `M x N` matrix by following the above instructions.

#### Explanation

**Test Case: 1** If the given `M = 3` and `N = 3`, the matrix is as follows:

```
1   4   3
5   0   2
2   2   8
```

The position of `0` is `(1, 1)`. Replace `(1, 1)` with the sum of neighbouring elements.

| Positions | Neighbour Elements | Sum |
|--|--|-- |
| (1, 1) | 4 + 2 + 5 + 2 | 13 |

All the other elements in the corresponding row and column of the identified zero should be set to `0` (excluding the element which is previously zero). 

The output should be,

```
1   0   3
0  13   0
2   0   8
```

**Test Case: 2** If the given `M = 4` and `N = 3`, the matrix is as follows:

```
0   1   2
2   1   0
0   2   3
1   0   1
```

The position of zeroes are `(0, 0)`, `(1, 2)`, `(2, 0)`, `(3, 1)`. Replace them with the sum of neighbouring elements.

| Positions | Neighbour Elements | Sum |
|--|--|-- |
| (0, 0) | 1 + 2 | 3 |
| (1, 2) | 2 + 1 + 3 | 6 |
| (2, 0) | 2 + 2 + 1 | 5 |
| (3, 1) | 2 + 1 + 1 | 4 |

All the other elements in the corresponding row and column of those identified zeroes should be set to `0` (excluding the elements which were previously zeroes). 

The output should be,

```
3   0   0
0   0   6
5   0   0
0   4   0
```

Solution Code:def read_matrix(rows):
 matrix = []
 for i in range(rows):
 row = list(map(int, input().split()))
 matrix.append(row)
 return matrix
 
def create_matrix_copy(matrix):
 temp_matrix = []
 for row in matrix:
 temp_matrix.append(row.copy())
 return temp_matrix

def set_row(temp_matrix, i):
 for column_index in range(len(temp_matrix[0])):
 temp_matrix[i][column_index] = 0

def set_column(temp_matrix, j):
 for row_index in range(len(temp_matrix)):
 temp_matrix[row_index][j] = 0

def sum_of_neighbours(matrix, i, j):
 matrix_length = len(matrix)
 matrix_row_length = len(matrix[0])
 neighbour_sum = 0
 if (i - 1 >= 0):
 neighbour_sum += matrix[i - 1][j]
 if (i + 1 < matrix_length):
 neighbour_sum += matrix[i + 1][j]
 if (j - 1 >= 0):
 neighbour_sum += matrix[i][j - 1]
 if (j + 1 < matrix_row_length):
 neighbour_sum += matrix[i][j + 1]
 return neighbour_sum

def replacing_zeros(matrix, temp_matrix, rows, columns):
 neighbour_sum_dict = dict()
 for i in range(rows):
 for j in range(columns):
 if (matrix[i][j] == 0):
 set_row(temp_matrix, i)
 set_column(temp_matrix, j)
 neighbour_sum_dict[(i, j)] = sum_of_neighbours(matrix, i, j)
 for each_set in neighbour_sum_dict:
 temp_matrix[each_set[0]][each_set[1]] = neighbour_sum_dict[each_set]
 return temp_matrix

def print_matrix(modified_matrix, rows, columns):
 for i in range(rows):
 row = """"
 for j in range(columns):
 row += str(modified_matrix[i][j]) + "" ""
 print(row)
 
def main():
 rows, columns = map(int, input().split())
 matrix = read_matrix(rows)
 temp_matrix = create_matrix_copy(matrix)
 modified_matrix = replacing_zeros(matrix, temp_matrix, rows, columns) 
 print_matrix(modified_matrix, rows, columns)

main()"
22688e76-7c8e-444c-bcdd-1c7bca841338,"Given two dates D1 and D2, write a program to count the number of Saturdays and Sundays from D1 to  D2 (including D1 and D2).<br/>The date in string format is like &quot;8 Feb 2021&quot;.<hr><b>Input</b><br/><br/>The first line of input will contain date D1 in the string format.<br/>The second line of input will contain date D2 in the string format.<hr><b>Output</b><br/><br/>The output should be a single line containing two integers separated by space.<hr><b>Explanation</b><br/><br/>For example, if the given dates are &quot;25 Jan 2021&quot; and &quot;14 Feb 2021&quot;, the Saturdays and Sundays dates from &quot;25 Jan 2021&quot; to &quot;14 Feb 2021&quot; are <br/>&quot;30 Jan 2021&quot; is a Saturday<br/>&quot;31 Jan 2021&quot; is a Sunday<br/>&quot;6 Feb 2021&quot; is a Saturday<br/>&quot;7 Feb 2021&quot; is a Sunday<br/>&quot;13 Feb 2021&quot; is a Saturday<br/>&quot;14 Feb 2021&quot; is a Sunday<br/>So the output should be 
Saturday: 3
Sunday: 3

Solution Code:import datetime
# print()
date_start_str = input()
date_end_str = input()
date_start = datetime.datetime.strptime(date_start_str, '%d %b %Y')
date_end = datetime.datetime.strptime(date_end_str, '%d %b %Y')
# initialization of the initial number of weekends
day = datetime.timedelta(days=1)
count_saturday = 0
count_sunday = 0
# iteration over all dates in the range
while date_start <= date_end:
    if date_start.isoweekday() == 6:
        count_saturday += 1
    if date_start.isoweekday() == 7:
        count_sunday += 1
    date_start += day
# output a single line containing two space-separated integers
print(""Saturday:"", count_saturday)
print(""Sunday:"", count_sunday)"
d5eef3cf-e59d-4ad6-9ae6-aec322878403,"Write a program that reads a number `N` and prints the count of numbers from **1** to `N` that are divisible by both **6** and **8**.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the count of numbers from **1** to `N` that are divisible by both **6** and **8**.

---

#### Explanation

For example, if the given number is `N = 50`,

- Numbers from **1** to **50** that are divisible by both **6** and **8** are **24** and **48**.
- So, the count of numbers from **1** to **50** that are divisible by both **6** and **8** is **2**.

The output should be **2**.


Solution Code:n = int(input())
count = 0
for i in range(1, n):
    if i %6== 0 and i%8 == 0:
        count = count + 1
print(count"
e04e20bd-46da-42bf-ba76-ac1d143d5742,"Given a sentence `S`. Write a program to remove all the vowels in the given sentence. 

<MultiLineNote>
Vowels are **A, E, I, O, U, a, e, i, o, u**.
Consider both uppercase and lowercase vowels.
</MultiLineNote>

---

#### Input
The input will be a single line containing a string.

---

####Output

The output should be a single line containing a string obtained by removing vowels from the given sentence.

---

#### Explanation

For example, if the given `S = ""Hello World""`

- The vowels in `S` are **e**, **o**.
- The string after removing the vowels in `S` is **Hll Wrld**.

The output should be **Hll Wrld**.

Solution Code:word = input()
vowels = ""a"",""e"",""i"",""o"",""u"",""A"",""E"",""I"",""O"",""U""
for char in word:
  if char in vowels:
    word = word.replace(char,"""")
print(word)"
e8dfd982-f08a-4777-8922-75ac48d625dd,"Given a number `N`, write a program that reads `N` inputs and prints the average of the given `N` inputs.

<MultiLineNote>
The average of `N` numbers can be calculated as, 
Average = Sum of `N` numbers / N

Example: If **3** numbers are **2**, **3**, and **7**. 

The average of **3** numbers is, 
Average = (2 + 3 + 7) / 3 = 4.0

Use **For** loop for iteration.
</MultiLineNote>

---

#### Input

The first line of input contains an integer representing `N`.
The next `N` lines of input contain integers.

---

#### Output

The output should be a single line containing a float that is the average of the given `N` inputs.

---

#### Explanation

For example, if the given number is `N = 4`,

- The **4** inputs are **3**, **4**, **6** and **7**.

- The sum of **3**, **4**, **6** and **7** is **20**. (`3 + 4 + 6 + 7 = 20`)
- The average of **3**, **4**, **6** and **7** is **5.0**. (`20 / 4 = 5.0`)

The output should be **5.0**.


Solution Code:n = int(input()) 
total = 0 
for i in range(n): 
    numbers = int(input()) 
    total = total+numbers 
average = total / n
print(average)"
a2a789d2-71d5-4300-bf1f-db9a6ea412a0,"Given a number `N`, write a program that reads `N` numbers as input and prints the **product** of the given `N` numbers.

---

#### Input

The first line of input contains an integer representing `N`.
The next `N` lines of input contain integers.

---

#### Output

The output should be the **product** of the given `N` inputs.

---

#### Explanation

For example, if the given number is `N = 3`,

* The **3** inputs are **2**, **3**, and **7**.
* The **product** of **2**, **3**, and **7** is **42**. (`2 * 3 * 7 = 42`)

|Number | Previous Product | Previous Product * Number = Current Product |
|---|---|---|
|2 | 1 | 1 * 2 = 2 |
|3 | 2 | 2 * 3 = 6|
|7 | 6 | 6 * 7 = 42|

The output should be **42**.

----

For example, if the given number is `N = 4`,

* The **4** inputs are **11**, **2**, **4**, and **9**.
* The **product** of **11**, **2**, **4**, and **9** is **792**. (`11 * 2 * 4 * 9 = 792`)

|Number | Previous Product | Previous Product * Number = Current Product |
|---|---|---|
| 11 | 1 | 1 * 11 = 11 |
| 2 | 11 | 11 * 2 = 22 |
| 4 | 22 | 22 * 4 = 88 |
| 9 | 88 | 88 * 9 = 792 |

The output should be **792**.

Solution Code:n = int(input())
product = 1

counter = 0
while(counter < n):
 number = int(input())
 product = product * number
 counter = counter + 1

print(product)"
3939f6fb-cd2e-4675-ac09-fce504e69411,"Given an integer N, write a program which reads N inputs and prints them.<hr><b>Input</b><br/><br/>The first line of input will contain a positive integer, N.<br/>The following N lines will contain an integer in each line.<hr><b>Output</b><br/><br/>The output should be N lines, containing an integer per line.<hr><b>Explanation</b><br/><br/>For example, if the given N is 3, then read the inputs in the next 3 lines and print them. If the given input integers in the next three lines are 8, 11, and 25, the output should be<br/><br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 0em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255, 0.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">8
11
25
</code></pre>

Solution Code:number_of_inputs = int(input())

counter = 0
while counter < number_of_inputs:
 number = int(input())
 print(number)
 counter = (counter + 1)"
26da5b89-2a7c-49a4-a23e-db9cf113554d,"Write a program that reads a number `N` and prints the average of `N` numbers from **1**.

<MultiLineNote>

The average of `N` numbers from **1** can be calculated as,

Average = Sum of `N` numbers from **1** / Count of numbers (`N`)

Example: If `N = 3`, the average of **3** numbers from **1** 
Average = (1 + 2 + 3) / 3 = 2.0

</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing a float that is the average of `N` numbers from **1**.

---

#### Explanation

For example, if the given number is `N = 4`,

* The **4** numbers from **1** are **1**, **2**, **3** and **4**.
* The sum of the numbers is **10**. (`1 + 2 + 3 + 4 = 10`)
* The average of the numbers is **2.5**. (`10 / 4 = 2.5`)

The output should be **2.5**.


Solution Code:number = int(input())

sum_of_numbers = 0
counter = 0

while counter < number:
    counter = counter + 1
    sum_of_numbers = sum_of_numbers + counter

average = sum_of_numbers / number
print(average)"
c8a2c1a4-1013-448c-8ec9-193f07ef8127,"Write a program to check whether the given password is valid or not.<br/>Consider the password to be valid if it contains at least one uppercase letter, one lowercase letter, and one digit.<hr><b>Input</b><br/><br/>The input will be a single line containing a string.<hr><b>Output</b><br/><br/>The output should be a single line containing either &quot;Valid Password&quot; or &quot;Invalid Password&quot;.<hr><b>Explanation</b><br/><br/>For example, if the given password is &quot;Qwerty00&quot;, the output should be &quot;Valid Password&quot; as it contains an uppercase letter, a lowercase letter, and a digit.<br/><br/>Whereas, if the given password is &quot;Dashboard&quot;, the output should be &quot;Invalid Password&quot; as it does not contain a digit.

Solution Code:password = input()

contains_digit = False
for character in password:
 is_digit = character.isdigit()
 if is_digit:
 contains_digit = True

is_all_lower = password.lower() == password
is_all_upper = password.upper() == password
contains_lower_and_upper = (not is_all_lower) and (not is_all_upper)

is_valid_password = contains_digit and contains_lower_and_upper

if is_valid_password:
 print(""Valid Password"")
else:
 print(""Invalid Password"")"
52ac07bc-7a33-493a-893a-79583d07becf,"Given a string, write a program to modifiy the string as given below.

- Add a space before each uppercase character excluding the first uppercase character.

Print the modified string.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing a string obtained by adding space before the uppercase characters.

---

#### Explanation

For example, if the given string is **TitleCase**,

- The uppercase characters in the given string **TitleCase** are **T** and **C**.
- The modified string after adding space before each uppercase character excluding the first uppercase character is **Title Case**.

The output should be **Title Case**.


Solution Code:string = input()

length = len(string)
result_string = string[0]

for each_number in range(1, length):
 each_character = string[each_number]
 upper_case = each_character.upper()

 if each_character == upper_case:
 result_string = result_string + "" "" + each_character
 else:
 result_string = result_string + each_character

print(result_string)"
e0dfa897-f4e5-4785-9e4d-a49d5b5d302f,"Write a program to print the smallest among the given N numbers.<hr><b>Input</b><br/><br/>The first line of input will contain a positive integer (N).<br/>The following N lines will contain an integer in each line.<hr><b>Output</b><br/><br/>The output should be a single line containing the smallest among the given numbers.<hr><b>Explanation</b><br/><br/>For example, if the given number is 5, then read the inputs in the next 5 lines and print the smallest among the given five numbers. If the given input integers in the next five lines are 8, 11, 96, 49, and 25, the output should be 8.

Solution Code:number_of_inputs = int(input())

first_input = int(input())
smallest_number = first_input

for i in range(number_of_inputs - 1):
 number = int(input())
 if number < smallest_number:
 smallest_number = number

print(smallest_number)"
d40550ad-5848-4a5e-8c4c-0016e4879631,"Given two numbers `M` and `N`, write a program to print the count of the total number of digits from `M` to `N`.

---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the count of the total number of digits from `M` to `N`.

---

#### Explanation

For example, if the given numbers are `M = 4` and `N = 13`,

- Numbers from **4** to **13** are **4**, **5**, **6**, **7**, **8**, **9**, **10**, **11**, **12**, and **13**.
- The number of digits in each number from **4** to **9** is **1**. So, the total count of digits from **4** to **9** is **6**.
- The number of digits in each number from **10** to **13** is **2**. So, the total count of digits from **10** to **13** is **8**.
- The total number of digits is **14**. (`6 + 8 = 14`)

The output should be **14**.


Solution Code:m = int(input())
n = int(input())

total_digits_count = 0

for number in range(m, n + 1):
 
 digits_count = len(str(number))
 total_digits_count = total_digits_count + digits_count

print(total_digits_count)"
c03dfae0-c9ef-41d9-9295-91bbb67fcd7c,"Given two numbers `M` and `N`, write a program to find the count of numbers from `M` to `N` that are divisible by **6**.

Print **No Numbers Found** if the count of numbers from `M` to `N` that are divisible by **6** is **0**. Otherwise, print the numbers from `M` to `N` that are divisible by **6** separated by a space.

---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing the string. **No Numbers Found** should be printed if the count of numbers from `M` to `N` that are divisible by **6** is **0**. Otherwise, space-separated numbers from `M` to `N` that are divisible by **6** should be printed.

---

#### Explanation

For example, if the given numbers are `M = 6` and `N = 23`,

- The numbers from **6** to **23** that are divisible by **6** are **6**, **12**, and **18**.
- So, the count of numbers from **6** to **23** that are divisible by **6** is **3**.
- The string obtained after joining the numbers from **6** to **23** that are divisible by **6** with a space is **6 12 18**.

The output should be **6 12 18**.

<br/>

For example, if the given numbers are `M = 2` and `N = 5`,

- There are no numbers from **2** to **5** that are divisible by **6**.
- So, the count of numbers from **2** to **5** that are divisible by **6** is **0**.

The output should be **No Numbers Found**.


Solution Code:m = int(input())
n = int(input())

count = 0
numbers_divisible_by_6 = """"

for number in range(m, n + 1):
 
 if number % 6 == 0:
 count = count + 1
 numbers_divisible_by_6 = numbers_divisible_by_6 + str(number) + "" ""
 
if count == 0:
 print(""No Numbers Found"")
else:
 print(numbers_divisible_by_6)"
b9c96354-875b-4f31-aa50-b6ef43a8ab93,"Write a program that reads a string and prints the first character of the given string on `N` lines, where `N` is the length of the given string.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be `N` lines, with each line containing a string that is the first character of the given string. Here, `N` is the length of the given string.

---

#### Explanation

For example, if the given string is **Cool**,

* The first character in the string is **C**.
* The length of the given string is **4**
* **C** should be printed **4** times.

The output should be,

```
C
C
C
C
```


Solution Code:string = input()

counter = 0
length = len(string)
first_character = string[0]

while counter < length:
 print(first_character)
 counter = counter + 1"
22eb45ca-1e71-4d6d-8920-46f0bcd3de13,"Write a program that reads a number `N` and checks if the last digit of `N` is equal to the last digit of the square of `N`.

Print **Equal** if the last digit of `N` is equal to the last digit of the square of `N`. Otherwise, print **Not Equal**.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing a string. **Equal** should be printed if the last digit of `N` is equal to the last digit of the square of `N`. Otherwise, **Not Equal** should be printed.

---

#### Explanation

For example, if the given number is `N = 15`,

- The square of `N` is **225** (**15<sup>2</sup> = 225**).
- The last digit of `N` (**15**) is **5**.
- The last digit of square of `N` (**225**) is **5**.
- **5** (last digit of **15**) is equal to **5** (last digit of **225**).

The output should be **Equal** as the last digit of `N` is equal to the last digit of the square of `N`.


Solution Code:number = int(input())
square = number ** 2

number = str(number)
number_length = len(number)

square = str(square)
square_length = len(square)

number_last_digit = number[number_length - 1]
square_last_digit = square[square_length - 1]

is_last_digit_equal = (number_last_digit == square_last_digit)

if is_last_digit_equal:
 print(""Equal"")
else:
 print(""Not Equal"")"
a9415f23-4111-4d70-bffe-5bc5e2fd833e,"Write a program that reads a four-digit number `N` and checks if `N` is an Armstrong Number.

<MultiLineNote>

**Armstrong Number**

A number is said to be an **Armstrong Number** if the sum of powers of all the digits of the number is the number itself.

**Example:**

**1634** is an **Armstrong Number** as the sum of powers of all digits of `N` is equal to **1634**. (**1<sup>4</sup>+ 6<sup>4</sup>+ 3<sup>4</sup>+ 4<sup>4</sup> = 1634**)

</MultiLineNote>

Print **Armstrong Number** if `N` is an Armstrong number. Otherwise, print **Not an Armstrong Number**.

---

#### Input

The input will be a single line containing a four-digit integer representing `N`.

---

#### Output

The output should be a single line containing a string. **Armstrong Number** should be printed if `N` is an Armstrong number. Otherwise, **Not an Armstrong Number** should be printed.

---

#### Explanation

For example, if the given four-digit number is `N = 1634`,

- The digits in **1634** are **1**, **6**, **3**, and **4**.
- Number of digits in **1634** is **4**.
- The sum of powers of all the digits of `N` is **1634**. (**1<sup>4</sup>+ 6<sup>4</sup>+ 3<sup>4</sup>+ 4<sup>4</sup> = 1634**)
- **1634** (Sum of powers of all digits of `N`) is equal to **1634**. So, `N` is an Armstrong number.

The output should be **Armstrong Number**.

Solution Code:number = input()

length = len(number)
first_digit = number[0]
second_digit = number[1]
third_digit = number[2]
fourth_digit = number[3]

sum_is = (int(first_digit)** length) + (int(second_digit)** length) + (int(third_digit)** length) + (int(fourth_digit)** length)

if sum_is == int(number):
    print(""Armstrong Number"")
else:
    print(""Not an Armstrong Number"")"
b6e83573-686a-4e39-a278-b2c599724694,"Write a program that reads two sides `A` and `B` of a right-angled triangle and prints the **Hypotenuse** `H` of the right-angled triangle.

<MultiLineQuickTip>

According to Pythagoras's theorem, the **Hypotenuse** of a right-angled triangle is **(A<sup>2</sup> + B<sup>2</sup>)<sup>0.5</sup>**
</MultiLineQuickTip>

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing an integer that is the **Hypotenuse** of the right-angled triangle.

---

#### Explanation

For example, if the given sides are `A = 3`, and `B = 4`,

   **Hypotenuse** = **(A<sup>2</sup> + B<sup>2</sup>)<sup>0.5</sup>**

- The square of `A` is **9** (**3<sup>2</sup>**).
- The square of `B` is **16** (**4<sup>2</sup>**).
- The sum of squares of `A` and `B` is **25** (`9 + 16 = 25`).
- The hypotenuse is equal to **5**. (**25<sup>0.5</sup>**)

The output should be **5**.

Solution Code:a=int(input())
b=int(input())
hypotenuse=(a ** 2 + b ** 2)**(1/2)
print(int(hypotenuse))"
204c3639-75b3-4612-a5e1-5f6586b672c7,"Write a program to print the given input word N times in a single line separated by space.<hr><b>Input</b><br/><br/>The first line of the input containing a string.<br/>The second line of the input containing a integer (N).<hr><b>Output</b><br/><br/>The output should be a single line containing the word printed N times separated by space.<hr><b>Explanation</b><br/><br/>For example, if the given input is &quot;pen&quot;, and N is 2 then you should print &quot;pen pen&quot; separated by space.

Solution Code:word = input()
number = int(input())
result = ((word + "" "") * number)
print (result)"
130206af-3374-4428-874e-0b5176d0f3d9,"Given an amount, write a program to find a minimum number of currency notes of different denominations that sum to the given amount. Available note denominations are 1000, 500, 100, 50, 20, 5, 1.<hr><b>Input</b><br/><br/>The input contains single integer N.<hr><b>Output</b><br/><br/>The first line of output should contain the number of 1000 notes, print &quot;1000:a&quot;<br/>The second line of output should contain the number of 500 notes, print &quot;500:b&quot;<br/>The third line of output should contain the number of 100 notes, print &quot;100:c&quot;.<br/>The fourth line of output should contain the number of 50 notes, print &quot;50:d&quot;.<br/>The fifth line of output should contain the number of 20 notes., print &quot;20:e&quot;.<br/>The sixth line of output should contain the number of 5 notes, print &quot;5:f&quot;.<br/>The seventh line of output should contain the number of 1 notes, print &quot;1:g&quot;.<br/>In place of (a, b, c, d, e, f, g), print the count of corresponding notes.<hr><b>Explanation</b><br/><br/>For example, if the given amount is 8593, in this problem you have to give the minimum number of notes that sum up to the given amount. Since we only have notes with denomination 1000, 500, 100, 50, 20, 5 and 1, we can only use these notes.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">Number of 1000 notes =&gt; 1000 x 8 = 8000  
Number of 500 notes  =&gt;  500 x 1 =  500  
Number of 100 notes  =&gt;  100 x 0 =    0  
Number of 50 notes   =&gt;   50 x 1 =   50  
Number of 20 notes   =&gt;   20 x 2 =   40  
Number of 5 notes    =&gt;    5 x 0 =    0  
Number of 1 notes    =&gt;    1 x 3 =    3  
----------------------------------------  
Total                =&gt;            8593  
----------------------------------------
</code></pre><br/>So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">1000:8
500:1
100:0 
50:1 
20:2
5:0
1:3
</code></pre>

Solution Code:amount = int(input())
note_1000 = 0 
note_500 = 0 
note_100 = 0 
note_50 = 0 
note_20 = 0 
note_5 = 0 
note_1 = 0 
if amount>=1000:
    note_1000= int(amount/1000)
    amount = amount%1000
if amount>=500:
    note_500 = int(amount/500)
    amount = amount%500
if amount>= 100:
    note_100 = int(amount/100)
    amount = amount%100
if amount>=50:
    note_50 = int(amount/50)
    amount = amount%50
if amount>=20:
    note_20 = int(amount/20)
    amount =amount%20
if amount>=5:
    note_5 = int(amount/5)
    amount = amount%5 #correction
if amount>=1:
    note_1 = int(amount/1)
    amount = amount%1
print(""1000:""+str(note_1000))
print(""500:""+str(note_500))
print(""100:""+str(note_100))
print(""50:""+str(note_50))
print(""20:""+str(note_20))
print(""5:""+str(note_5))
print(""1:""+str(note_1))"
26024f5a-5a9e-4c65-a670-8f3a364ed0c8,"Given an integer between 0 and 10000, write a program to print the sum of its digits.<hr><b>Input</b><br/><br/>The first line of input will contain an integer.<hr><b>Output</b><br/><br/>The first line of output should be the sum of the digits.<hr><b>Explanation</b><br/><br/>For example, if the given number is 25, your code should print the sum of the digits (2 + 5), which is 7.<br/><br/>Similarly, if the given number is 692, your code should print the sum of the digits (6 + 9 + 2), which is 17.<br/><br/>Similarly, if the given number is 9999, your code should print the sum of the digits (9 + 9 + 9 + 9), which is 36.

Solution Code:number = input()

is_one_digit = (len(number) == 1)
is_two_digit = (len(number) == 2)
is_three_digit = (len(number) == 3)

if is_one_digit:
    print(number)
elif is_two_digit:
    first_digit = int(number[0])
    second_digit = int(number[1])
    print(first_digit + second_digit)
elif is_three_digit:
    first_digit = int(number[0])
    second_digit = int(number[1])
    third_digit = int(number[2])
    print(first_digit + second_digit + third_digit)
else:
    first_digit = int(number[0])
    second_digit = int(number[1])
    third_digit = int(number[2])
    fourth_digit = int(number[3])
    print(first_digit + second_digit + third_digit + fourth_digit)"
70737998-769c-4c59-9181-c9f089273538,"Write a program that reads an amount `A` and prints the minimum number of **100**, **50**, **20** and **10** rupee notes required for the given amount.

---

#### Input

The input will be a single line containing an integer representing the amount `A`.

---

#### Output

The first line of output should be a string containing the minimum number of **100** rupee notes required as shown in the sample output.

The second line of output should be a string containing the minimum number of **50** rupee notes required as shown in the sample output.

The third line of output should be a string containing the minimum number of **20** rupee notes required as shown in the sample output.

The fourth line of output should be a string containing the minimum number of **10** rupee notes required as shown in the sample output.

---

#### Explanation


For example, if the given amount `A = 370`,

* The number of **100** rupee notes required for **370** is **3**. (`370 / 100 = 3.7`)
  * The remaining amount is **70**. (`370 - (100 * 3) = 70`)
* The number of **50** rupee notes required for **70** is **1**. (`70 / 50 = 1.4`)
  * The remaining amount is **20**. (`370 - (100 * 3) - (50 * 1) = 20`)
* The number of **20** rupee notes required for **20** is **1**. (`20 / 20 = 1`)

Number of **100** rupee notes => 100 x 3 = 300
Number of **50** rupee notes   =>   50 x 1 =    50
Number of **20** rupee notes   =>   20 x 1 =    20
Number of **10** rupee notes    =>   10 x 0 =      0
-----------------------------------------------
Total                                        =>                   370
-----------------------------------------------

The output should be,

```
100 Notes: 3
50 Notes: 1
20 Notes: 1
10 Notes: 0
```

Solution Code:amount=int(input())
notes_100=0
notes_50=0
notes_20=0
notes_10=0
if amount>=100:
    notes_100=int(amount / 100)
    amount =(amount % 100)
if amount >= 50:
    notes_50=int(amount/50)
    amount=(amount%50)
if amount >= 20:
    notes_20=int(amount / 20)
    amount=(amount % 20)
notes_10=int(amount/10)
print(""100 Notes: ""+ str(notes_100))
print(""50 Notes: ""+ str(notes_50))
print(""20 Notes: ""+ str(notes_20))
print(""10 Notes: ""+ str(notes_10))"
366845c3-e3f6-4b00-aed7-e12ecc8daed6,"Complete the given **Car** class by adding new features by following the given instructions.

**Existing _Car_ class**:

In the previous questions, you have added the attributes and methods below in the _Car_ class. 

* Attributes
    * color
    * max\_speed
    * acceleration
    * tyre\_friction
    * is\_engine\_started
    * current_speed
* Methods
    * start\_engine
    * stop\_engine
    * accelerate


Now, let's add a new feature to the _Car_ class. 


<details>

<summary>**Features to be added to the _Car_ class**</summary>

- Add **apply_brakes** method
    - When **apply_brakes** method is called,
        - The **current_speed** value should be decreased by **tyre_friction** value.
        - The **current_speed** value should never be less than **0**.

</details>

<MultiLineNote>
You can copy the code from the previous question and add new features on top of that code.
</MultiLineNote>

<br/>

**Points to Note**  

 - The output of the testcase **Checking Default Tests** is given by the `default_test` function in the prefilled code.
 - This coding question does not have the usual input/output testcases. The class defined by you will be tested internally whether the attributes are present or not. So in testcases results you will be shown the rough description of the tests that will be verified.

Solution Code:class Car:
 def __init__(self, color, max_speed, acceleration, tyre_friction):
 self.color = color
 self.max_speed = max_speed
 self.acceleration = acceleration
 self.tyre_friction = tyre_friction
 self.is_engine_started = False
 self.current_speed = 0

 def start_engine(self):
 self.is_engine_started = True

 def stop_engine(self):
 self.is_engine_started = False

 def accelerate(self):
 if not self.is_engine_started:
 print(""Car has not started yet"")
 else:
 self.current_speed += self.acceleration
 if self.current_speed > self.max_speed:
 self.current_speed = self.max_speed

 def apply_brakes(self):
 self.current_speed -= self.tyre_friction
 if self.current_speed < 0:
 self.current_speed = 0


def default_test():
 car = Car(color=""Red"", max_speed=250, acceleration=10, tyre_friction=3)
 car.start_engine()
 car.accelerate() # Calling the accelerate method when the is_engine_started is True
 print(car.current_speed) # 10
 car.apply_brakes() # Calling the apply_brakes method
 # current_speed of the car should decrease according to the tyre_friction value.
 print(car.current_speed) # (10 - 3 => 7)
 car.apply_brakes()
 print(car.current_speed) # 7 - 3 => 4
 car.apply_brakes()
 print(car.current_speed) # 4 - 3 => 1
 car.apply_brakes()
 print(car.current_speed) # 1 - 3 => 0 (current_speed should never go behind 0.)"
53cf5b67-a52d-4836-a43a-3de120ff752a,"Complete the given **Car** class by adding new features by following the given instructions.

**Existing _Car_ class**:

In the previous questions, you have added the attributes and methods below in the _Car_ class. 

* Attributes
    * color
    * max\_speed 
    * acceleration 
    * tyre\_friction
    * is\_engine\_started
    * current_speed
* Methods
    * start\_engine
    * stop\_engine
    * accelerate
    * apply_brakes


Now, let's add a new feature to the _Car_ class. 


<details>

<summary>**Features to be added to the _Car_ class**</summary>

- Add **sound_horn** method
    - If the car engine is **on** and the **sound_horn** method is called,
        - Print **""Beep Beep""**
    - If the car engine is **off** and the **sound_horn** method is called,
        - Print **""Car has not started yet""**

</details>

<MultiLineNote>
You can copy the code from the previous question and add new features on top of that code.
</MultiLineNote>

<br/>

**Points to Note**  

 - The output of the testcase **Checking Default Tests** is given by the `default_test` function in the prefilled code.
 - This coding question does not have the usual input/output testcases. The class defined by you will be tested internally whether the attributes are present or not. So in testcases results you will be shown the rough description of the tests that will be verified.

Solution Code:class Car:
    def __init__(self, color, max_speed, acceleration, tyre_friction):
        self.color = color
        self.max_speed = max_speed
        self.acceleration = acceleration
        self.tyre_friction = tyre_friction
        self.is_engine_started = False
        self.current_speed = 0

    def start_engine(self):
        self.is_engine_started = True

    def stop_engine(self):
        self.is_engine_started = False

    def accelerate(self):
        if not self.is_engine_started:
            print(""Car has not started yet"")
        else:
            self.current_speed += self.acceleration

    def apply_brakes(self):
        self.current_speed -= self.tyre_friction
        if self.current_speed < 0:
            self.current_speed = 0

    def sound_horn(self):
        if self.is_engine_started:
            print(""Beep Beep"")
        else:
            print(""Car has not started yet"")


def default_test():
    car = Car(color=""Red"", max_speed=250, acceleration=10, tyre_friction=3)
    car.sound_horn()  # Calling the accelerate method when the is_engine_started is False
    car.start_engine()  # Starting the engine
    car.sound_horn()  # Calling the accelerate method when the is_engine_started is True
"
e230c9e0-f852-4273-9b84-58d79e0d9fbe,"Given two numbers `N` and `K`, write a program to print the `K`th largest factor of the given number `N`.

<MultiLineNote>

**Factors of N:**

If a number `N` is divisible by `X`, then `X` is a factor of `N`.

**Example:**

If `N = 15` and `X = 3`, then **3** is a factor of **15** as **15** is divisible by **3**.

If `N = 15` and `X = 7`, then **7** is **not** a factor of **15** as **15** is not divisible by **7**.

</MultiLineNote>

---

#### Input

The first line of input contains an integer representing `N`.
The second line of input contains an integer representing `K`.

---

#### Output

The output should be a single line containing an integer representing the `K`th largest factor of the given number `N`.

---

#### Explanation

For example, if the given numbers are `N = 12` and `K = 2`,

- The factors of **12** are **1**, **2**, **3**, **4**, **6**, and **12**.
- The second largest factor of **12** is **6**.

So the output should be **6**.

Solution Code:number = int(input())
k = int(input())

for each_number in range(number):
 if number % (number - each_number) == 0:
 largest_factor = number - each_number
 k = k - 1
 if k == 0:
 break
 
print(largest_factor)"
250fd05b-626d-47ec-9b32-2811127c74e7,"Given two numbers `M` and `N`, write a program to print the **Least Common Multiple (L.C.M)** of the numbers `M` and `N`.

<MultiLineNote>
- The least common multiple (L.C.M) of two numbers is the smallest positive factor that is perfectly divisible by the two given numbers.

- A multiple of a number is a number that is the product of a given number and some other number.
  - **Example** : 7 X 2 = 14 , **14** is a multiple of **7**.

</MultiLineNote>

<MultiLineQuickTip>
A least common multiple always starts from the maximum number of the given two numbers.
</MultiLineQuickTip>

---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the **LCM** of the numbers `M` and `N`.

---

#### Explanation

For example, if the given numbers are `M = 2` and `N = 3`,

- The multiples of **2** are **2**, **4**, **6**, **8**, **10**, **12**, **18**,....
- The multiples of **3** are **3**, **6**, **9**, **12**, **15**, **18**,....
- The common multiples of the two numbers **2** and **3** are **6**, **12**, **18**, ....
- The least common multiple of the two numbers **2** and **3** is **6** (`6 < 12 < 18 < ..`).

The output should be **6**.

Solution Code:m = int(input())
n = int(input())

if m > n:
 greatest_number = m
else:
 greatest_number = n



for number in range(greatest_number, (m*n + 1)):
 if ((number % m) == 0) and ((number % n) == 0):
 lcm = number
 break

print(lcm)"
5f3ba863-7375-42bc-b38c-6010477c01ee,"Given a number `N`, write a program to print the count of triplets containing numbers `A`, `B` and `C` from **1** to `N` such that the sum of the numbers is equal to `N`, where `A` < `B` < `C`.

`A` is the first number, `B` is the second number, and `C` is the third number in a triplet.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing an integer which is the count of triplets whose sum is equal to `N`.

---

#### Explanation

For example, if the given number is `N = 10`,

- The triplets from **1** to **10**, such that `A + B + C = N` where `A < B < C` are

```
(1, 2, 7)
(1, 3, 6)
(1, 4, 5)
(2, 3, 5)
```

- The count of triplets whose sum is equal to **10** is **4**.

The output should be **4**.


Solution Code:n = int(input())

number_of_pairs = 0
for first_number in range(1, n):
    for second_number in range(first_number + 1, n):
        if n - (first_number + second_number) < n and first_number < second_number < n - (first_number + second_number):
            number_of_pairs = number_of_pairs + 1 
print(number_of_pairs)"
89774138-dda7-4548-8a8c-67dea8f562ea,"Given a number `N`, write a program to print the count of **Pythagorean triplets** containing numbers `A`, `B` and `C` from **1** to `N` such that the sum of squares of the numbers `A` and `B` is equal to the square of `C`, where `A` < `B` < `C`.

`A` is the first number, `B` is the second number, and `C` is the third number in a triplet.

<MultiLineNote>
A Pythagorean triplet is a set of three integers `A`, `B`, and `C` such that **A<sup>2</sup>+ B<sup>2</sup> = C<sup>2</sup>**
</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing an integer which is the count of **Pythagorean triplets** whose sum of squares of numbers `A` and `B` is equal to the square of `C`.

---

#### Explanation

For example, if the given number is `N = 20`,

- The **Pythagorean triplets** such that **A<sup>2</sup>+ B<sup>2</sup> = C<sup>2</sup>** where `A < B < C` are,

```
(3, 4, 5),
(6, 8, 10),
(5, 12, 13),
(9, 12, 15),
(8, 15, 17),
(12, 16, 20)
```

- The count of **Pythagorean triplets** whose sum of squares of numbers `A` and `B` is equal to the square of `C` is **6**.

The output should be `6`.

Solution Code:n = int(input())

count = 0 

for first_number in range(1, n):
    for second_number in range(first_number + 1, n + 1):
        sum_of_squares = first_number ** 2 + second_number ** 2
        third_number = first_number ** 2 + second_number ** 2
        third_number = int(third_number ** 0.5)
        condition_1 = third_number * third_number == sum_of_squares
        condition_2 = third_number <= n
        condition_3 = first_number < second_number < third_number
        if condition_1 and condition_2 and condition_3:
            count += 1
print(count)"
b9a268ef-b2f3-43fb-8676-da9c4a90794a,"Write a program to print the sum of non-primes in the given N numbers. The numbers which are not primes are considered as non-primes.<hr><b>Input</b><br/><br/>The first line of input will contain a positive integer (N).<br/>The following N lines will contain an integer in each line.<hr><b>Output</b><br/><br/>The output should be the sum of non-primes in the given numbers.<hr><b>Explanation</b><br/><br/>For example, if the given number is 5, then read the inputs in the next 5 lines and print the sum of non-primes in the given five numbers. If the given input integers in the next five lines are 8, 11, 96, 49, and 25 the output should be 8 + 96 + 49 + 25 is 178.

Solution Code:n = int(input())
sum_of_non_primes = 0
for i in range(1,n+1):
    m = int(input())
    count = 0
    for j in range(2,m):
        if(m%j==0):
            count = count +1 

    if(count>=1):
        sum_of_non_primes = sum_of_non_primes + m 

print(sum_of_non_primes)      "
19a142a9-636c-4e3b-9099-703e41959071,"Given a string in camel case, write a python program to convert the given string from camel case to snake case.<hr><b>Input</b><br/><br/>The input will be a single line contain a string.<hr><b>Output</b><br/><br/>The output should contain the given word in snake case.<hr><b>Explanation</b><br/><br/>For example, if the given word is &quot;PythonLearning&quot; in camel case, your code should print given word in snake case &quot;python_learning&quot;.

Solution Code:camelcase=input()
result=""""
for i in camelcase:
    if i==i.upper():
        result=result+""_""+i.lower()
    else:
        result=result+i
print(result[1:])
    "
96c0edc5-233d-40f4-bfb6-ca9037bf921a,"Write a program to check the overlapping of one string&#x27;s suffix with the prefix of another string.<hr><b>Input</b><br/><br/>The first line of the input will contain a string A.<br/>The second line of the input will contain a string B.<hr><b>Output</b><br/><br/>The output should contain overlapping word if present else print &quot;No overlapping&quot;.<hr><b>Explanation</b><br/><br/>For example, if the given two strings, A and B, are &quot;ramisgood&quot; &quot;goodforall&quot; <br/>The output should be &quot;good&quot; as good overlaps as a suffix of the first string and prefix of next.

Solution Code:a = str(input())
b = str(input())
answer = """"
len1, len2 = len(a), len(b)
for i in range(len1):
    match = """"
    for j in range(len2):
        if (i + j < len1 and a[i + j] == b[j]):
            match += b[j]
        else:
            if (len(match) > len(answer)):
                answer = match
                match = """"
if answer == """" or answer[0] != b[0]:
    print(""No overlapping"")
else:
    print(answer)"
b78f433f-8bf3-4ee5-abb7-6ddf5caa062a,"Given a string, write a program to remove all the words with K length.<hr><b>Input</b><br/><br/>The first line of the input will contain a string A.<br/>The second line of the input will contain an integer K.<hr><b>Output</b><br/><br/>The output should contain a string after removing all the words whose length is equal to K.<hr><b>Explanation</b><br/><br/>For example, string A is &quot;Tea is good for you&quot;, k is 3 then output should be &quot;is good.&quot;<br/>Here words &quot;Tea&quot;, &quot;for&quot;, &quot;you&quot; length is equal to 3, so these words are removed from string.

Solution Code:word=input().split()
length=int(input())

required=""""
for i in word:
    if len(i)!=length:
        required+=i+"" ""
print(required)"
16fc69a9-72e6-4356-bc75-5cb4fc0c6985,"For this problem, the prefilled code will contain an MxN matrix. Write a program to print the maximum, minimum and sum for each column in the matrix.<hr><b>Input</b><br/><br/>The first line of input will contain two space-separated integers, denoting the M and N.<br/>The next M following lines will contain N space-separated integers, denoting the elements of each list.<hr><b>Output</b><br/><br/>The first line of output should contain the list of the maximum number in each column.<br/>The second line of output should contain the list of minimum number in each column.<br/>The third line of output should contain the list of the sum of each column.<hr><b>Explanation</b><br/><br/>For example, if the given M is 3 and N is 3, read the inputs in the next three lines. If the numbers given in the next three lines are the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">1 2 3
10 20 30
5 10 15
</code></pre><br/>The first line of output should contain the list of maximum numbers in each column, which are (10, 20, 30).<br/>The second line of output should contain the list of minimum numbers in each column, which are (1, 2, 3).<br/>The third line of output should contain the list of sums of each column, which are (16, 32, 48).<br/>So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[10, 20, 30]
[1, 2, 3]
[16, 32, 48]
</code></pre>

Solution Code:def get_transpose_of_matrix(matrix, m, n):
 transpose_matrix = []
 for i in range(n):
 row = []
 for j in range(m):
 row.append(matrix[j][i])
 transpose_matrix.append(row)
 return transpose_matrix


def print_max_min_sum_for_row_wise(num_list):
 max_list = []
 min_list = []
 sum_list = []
 for each_row in num_list:
 max_list.append(max(each_row))
 min_list.append(min(each_row))
 sum_list.append(sum(each_row))

 print(max_list)
 print(min_list)
 print(sum_list)


def convert_string_to_int(list_a):
 new_list = []
 for item in list_a:
 num = int(item)
 new_list.append(num)
 return new_list


m, n = input().split()
m, n = int(m), int(n)
num_list = []

for i in range(m):
 list_a = input().split()
 list_a = convert_string_to_int(list_a)
 num_list.append(list_a)

num_list = get_transpose_of_matrix(num_list, m, n)
print_max_min_sum_for_row_wise(num_list)"
0b28cce4-0e7b-4d65-a00e-1c589aea8ac1,"Write a program to compute the frequency of characters other than space.<hr><b>Input</b><br/><br/>The input will be a single line containing a string.<br/>Note: <br/>  1. The input string will contain only alphabets and white space.<br/>  2. Ignore the case-sensitivity.<hr><b>Output</b><br/><br/>The output should be M lines equal to unique characters in the given string sorted in alphabetical order.<br/>Each line should contain the character and its frequency separated by a colon (:). <hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;Pop up&quot;, all the unique characters in the given string are (p, o, u). The characters (p, o, u) are with frequency (3, 1, 1) respectively. Your code should print each unique character and its frequency separated by a colon(:) in alphabetical order. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">o: 1
p: 3
u: 1
</code></pre>

Solution Code:def print_char_count(line):
 line = line.lower()
 unique_chars = set(line)
 unique_chars.discard("" "")
 for char in sorted(unique_chars):
 print(""{}: {}"".format(char, line.count(char)))


line = input()
print_char_count(line)"
0aef3e30-fead-49eb-8fe3-ed2aa9205443,"Given two polynomials **A** and **B**, write a program that adds the given two polynomials `A` and `B` and prints the result in the standard form of **Cix^Pi + Ci-1x^Pi-1 + .... + C1x + C0**.

---

#### Input  
- The first line of input contains an integer `M` representing the number of terms in polynomial **A**.
- The next `M` lines of input contain two space-separated integers in each line, representing the Power `Pi` and Coefficient `Ci` of polynomial **A**.
- The next line of input contains an integer `N` representing the number of terms in polynomial **B**.
- The next `N` lines of input contain two space-separated integers in each line, representing the Power `Pj` and Coefficient `Cj` of polynomial **B**.

---

#### Output  
The output should be in the form of **Cix^Pi + Ci-1x^Pi-1 + .... + C1x + C0**.

- If the coefficient is `0`, then the term should not be printed.
- If the term with the highest power is negative, it should be represented as **-Cix^Pi**.
- If the term where power is `1`, it should be represented as **C1x** instead of **C1x^1**.
- If the polynomial power is `0` and the constant term is also `0`, then print `0` to represent the polynomial.
- For term **Cix^Pi**, if the coefficient of the term **Ci** is `1`, then print **x^Pi** instead of **1x^Pi**.

---

#### Constraints  
- `M` and `N` are less than or equal to **100**.  
- `Pi` and `Pj` are greater than or equal to **0** and less than **1000**.  
- `Ci` and `Cj` are greater than or equal to **-1000** and less than or equal to **1000**.

---

#### Explanation 

For example, If `M = 4` and for polynomial **A**:

- For power `0`, the coefficient is `5`.
 - **5x^0** (The coefficient of `x^0` is `5`, and `x^0` is equivalent to `1`)
 - **5 * 1 = 5**
- For power `1`, the coefficient is `0`.
 - **0x^1** (If the coefficient of `x^1` is `0`, then the term should not be printed)
- For power `2`, the coefficient is `10`.
 - **10x^2** (The coefficient of `x^2` is `10`)
- For power `3`, the coefficient is `6`.
 - **6x^3** (The coefficient of `x^3` is `6`)

If `N = 3` and for polynomial **B**:

- For power `0`, the coefficient is `1`.
 - **1x^0** (The coefficient of `x^0` is `1`)
 - **1 * 1 = 1**
- For power `1`, the coefficient is `2`.
 - **2x^1** (The coefficient of `x^1` is `2`)
 - **2 * x = 2x**
- For power `2`, the coefficient is `4`.
 - **4x^2** (The coefficient of `x^2` is `4`)

Then polynomial `A` represents **6x^3 + 10x^2 + 5**, the polynomial `B` represents **4x^2 + 2x + 1**, and the addition of `A` and `B` is **6x^3 + 14x^2 + 2x + 6**.

Solution Code:# Store polynomial as a dict with power as key and coefficient as value
def read_polynomial():
    n = int(input())
    polynomial_dict = {}
    for i in range(n):
        power, coefficient = map(int, input().split())
        polynomial_dict[power] = coefficient
    return polynomial_dict

# Returns a polynomial term with given degree and coefficient excluding sign
def get_term(coefficient, power):
    coefficient = abs(coefficient)
    if coefficient == 1 and power != 0:
            coefficient = ''
    if power > 1:
        term = ""{}x^{}"".format(coefficient, power)
    elif power == 1:
        term = ""{}x"".format(coefficient)
    elif power == 0:
        term = ""{}"".format(coefficient)
    return term

def get_polynomial_expression_string(polynomial):
    expression = """"
    degree = max(polynomial.keys())
    for power in sorted(polynomial.keys(), reverse=True):
        coefficient = polynomial[power]
        term = get_term(coefficient, power)
        if power == degree:
            if coefficient > 0:
                expression = term
            elif coefficient < 0:
                expression = '-{}'.format(term)
        else:
            if coefficient > 0:
                expression = ""{} + {}"".format(expression, term)
            elif coefficient < 0:
                expression = ""{} - {}"".format(expression, term)
    if expression == """":
        expression = 0
    return expression

def get_coefficient(polynomial, power):
    try:
        return polynomial[power]
    except KeyError:
        return 0

def add(p1, p2):
    result = dict()
    for power in (set(p1.keys()) | set(p2.keys())):
        result[power] = get_coefficient(p1, power) + get_coefficient(p2, power)
    return result

def main():
    p1 = read_polynomial()
    p2 = read_polynomial()
    result = add(p1, p2)
    print(get_polynomial_expression_string(result))

main()
"
154c24e5-e672-42a2-94b9-d8e5ce7e7b16,"Given comma-separated numbers and an index `I`, write a program to print the **Smallest** number among the numbers from the given index `I` to the end of the list.

---

#### Input

The first line of input contains comma-separated integers.
The second line of input contains an integer representing `I`.

---

#### Output

The output should be a single line containing an integer representing the **Smallest** number among the numbers from the given index `I` to the end of the list.

---

#### Explanation

For example, if the given comma-separated numbers are `1,9,3,1,2,7,4,8` and `I = 2`,

- The numbers and their respective index values are,

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">Numbers</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">1</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">9</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">3</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">1</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">2</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">7</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">4</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;padding: 8px 12px;"">8</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
  <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;color: #808080;font-weight: bold;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">Indices</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell;font-weight: 900; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell; font-weight: 900;vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell; font-weight: 900;vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell;font-weight: 900; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell;font-weight: 900; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">6</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell;font-weight: 900; vertical-align: inherit;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">7</div>
</div>

- The numbers from index **2** are **3**, **1**, **2**, **7**, **4**, and **8**.
- The **Smallest** number from index **2** is **1**.

The output should be **1**.


Solution Code:numbers = input()
numbers_list = numbers.split("","")
index = int(input())
for i in range(len(numbers_list)):
    numbers_list[i] = int(numbers_list[i])
sliced_list = numbers_list[index:]
print(min(sliced_list))
"
43f27634-30aa-4081-b05a-6e13ca9114c6,"A function is given in the prefilled code that takes a list `L` as an argument.

Write a program to find the largest of the squares of the numbers in the list `L`  using Recursion.

---

#### Input

The input will be a single line containing space-separated integers.

---

#### Output

The output should be a single line containing an integer that is the largest of the squares of the numbers in the list `L` that is passed as an argument.

---

#### Explanation

For example, if the given space-separated numbers are `2 3 5 4`,

- The squares of the given numbers are **4**, **9**, **25**, and **16**.
- The largest of the squares of the given numbers is **25**.

The output should be **25**.

Solution Code:def get_largest_square(numbers):
    square=int(numbers[0])**2
    if len(numbers)==1:
        return square
    return max(square,get_largest_square(numbers[1:]))

numbers = input().split()

result = get_largest_square((numbers))# call the get_largest_square function
print(result)"
d2a10fa7-5544-473e-9d71-a9c3ced790a3,"Given comma-separated numbers, write a program to print a list containing given numbers in **Descending** order. 

---

#### Input

The input will be a single line containing comma-separated integers.

---

#### Output

The output should be a single line containing a list that has the given numbers in **Descending** order.

---

#### Explanation

For example, if the given comma-separated numbers are `16,25,1,5`,

- The given numbers are **16**, **25**, **1**, and **5**.
- The **Descending** order of numbers is **25**, **16**, **5**, and **1**.

The output should be,

```
[25, 16, 5, 1]
```

Solution Code:numbers_list = input().split("","")
new_list = []

for each_number in numbers_list:
 number = int(each_number)
 new_list += [number]

reverse_sorted_list = sorted(new_list, reverse = True)

print(reverse_sorted_list)"
fe1d7c65-61cf-4929-ba0d-2496ff27a167,"Write a program to print the square of given list numbers in ascending order.<hr><b>Input</b><br/><br/>The input will be a single line containing the comma-separated integers.<hr><b>Output</b><br/><br/>The output should be a single line containing the list with the square of the numbers in ascending order.<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;2, 4, 1, 3, 5&quot;, your code should print the square of the numbers in ascending order. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[1, 4, 9, 16, 25]
</code></pre>

Solution Code:list_a = input().split("","")
list_x = []

for num in list_a:
 list_x += [int(num)**2]

list_x = sorted(list_x)
print(list_x)"
90f247c2-fb54-4582-96ba-3dac663cb5a1,"Write a program to recursively find the Nth term in the Fibonacci series.<br/>A Fibonacci sequence is the integer sequence of 0, 1, 1, 2, 3, 5, 8...<br/>The first two terms are 0 and 1. All other terms are obtained by adding the preceding two terms.<hr><b>Input</b><br/><br/>The input will be a single line containing a positive integer (N).<hr><b>Output</b><br/><br/>The output should be a single line containing the Nth term in the  Fibonacci Series.<hr><b>Explanation</b><br/><br/>For example, if the given N is 5, your code should print the 5th term in the Fibonacci Series.<br/>
<table style=""background-color: transparent;border-collapse: collapse;border-spacing: 0;"">
<thead>
<tr>
<th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">Term</th>
<th style=""border-right: 0;padding: 8px 12px;"">Number</th>
</tr>
</thead>
<tbody>
<tr>
<td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</td>
<td style=""border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</td>
</tr>
<tr>
<td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</td>
<td style=""border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</td>
</tr>
<tr>
<td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</td>
<td style=""border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</td>
</tr>
<tr>
<td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</td>
<td style=""border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</td>
</tr>
<tr>
<td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</td>
<td style=""border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</td>
</tr>
<tr>
<td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</td>
<td style=""border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</td>
</tr>
</tbody>
</table>
So the output should be 5.

Solution Code:def fibonacci(n):
 if n <= 1:
 return n
 else:
 return fibonacci(n - 1) + fibonacci(n - 2)


n = int(input())
result = fibonacci(n)
print(result)"
06c4bd69-9fe0-4cf9-b999-6ee1619083af,"For this problem, the prefilled code will contain a list. Write a program to remove all the occurrences of the given number (N) in a list.<hr><b>Input</b><br/><br/>The input will be a single line containing an integer (N).<hr><b>Output</b><br/><br/>The output should be a single line containing the list without the number (N).<br/>Note: The order of numbers in the output list should be same as in the input list.<hr><b>Explanation</b><br/><br/>For example, if the given N is 5, your code should print the list by removing 5 at all the occurrences. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[10, 20, 35, 50, 20, 100, 200, 10, 150, 100, 100]
</code></pre>

Solution Code:nums_list = [5, 10, 20, 35, 5, 50, 20, 100, 200, 10, 150, 100, 100]
number = int(input())

count_of_occurrences = nums_list.count(number)

for i in range(count_of_occurrences):
 nums_list.remove(number)

print(nums_list)"
d935a52b-ae14-4000-bd60-6064ed15bc7c,"Write a program to recursively create a list of N Fibonacci terms.<br/>A Fibonacci sequence is the integer sequence of 0, 1, 1, 2, 3, 5, 8...<br/>The first two terms are 0 and 1. All other terms are obtained by adding the preceding two terms.<hr><b>Input</b><br/><br/>The first line of input will contain a positive integer (N).<hr><b>Output</b><br/><br/>The output should be a single line containing a list with N Fibonacci terms.<hr><b>Explanation</b><br/><br/>For example, if the given N is 5, your code should print the list of five Fibonacci terms. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[0, 1, 1, 2, 3]
</code></pre>

Solution Code:def fibonacci(n):
 if n <= 1:
 return n
 else:
 return fibonacci(n-1)+fibonacci(n-2)


def get_fibonacci_series(n):
 fibonacci_series = []
 for i in range(n):
 term = fibonacci(i)
 fibonacci_series.append(term)
 return fibonacci_series


n = int(input())
result = get_fibonacci_series(n)
print(result)"
3c378e0d-d93b-4f71-b1cd-1897ec1d1c8e,"Given lists `A` and `B` of space-separated elements, each on a new line of the same length. Write a program to insert the elements of list `B` into list `A` at odd indices.

---

#### Input

The first line of input contains space-separated elements.
The second line of input contains space-separated elements.

---

#### Output

The output should be a single line containing list `A` after inserting the elements of list `B` into list `A` at odd indices.

---

#### Explanation

For example, if the given space-separated elements of list `A = apple mango jackfruit` and list ` B = kiwi grapes peach`,

- The elements and their respective index values in list `A` are,

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">Elements</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">apple</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">mango</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;padding: 8px 12px;"">jackfruit</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
<div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;color: #808080;font-weight: bold;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">Indices</div>
   <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;font-weight: 900;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
   <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;font-weight: 900;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell;font-weight: 900; vertical-align: inherit;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
</div>

- The elements and their respective index values in list `B` are,

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">Elements</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">kiwi</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">grapes</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;padding: 8px 12px;"">peach</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
<div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;color: #808080;font-weight: bold;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">Indices</div>
   <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;font-weight: 900;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
   <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;font-weight: 900;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell;font-weight: 900; vertical-align: inherit;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
</div>

- After inserting elements of list `B` into list `A` at odd indices, list `A = [""apple"", ""kiwi"", ""mango"", ""grapes"", ""jackfruit"", ""peach""]`.

The output should be,

```
 [""apple"", ""kiwi"", ""mango"", ""grapes"", ""jackfruit"", ""peach""]
```

Solution Code:first_list = input().split()
second_list = input().split()

length = len(first_list)
odd_index = 1
for index in range(length):
    first_list.insert(odd_index, second_list[index])
    odd_index += 2

print(first_list)"
83a63bbb-b0cc-42c8-bf14-b88e057bc326,"Given space-separated numbers, write a program to find even numbers and odd numbers among the given numbers and print the even numbers in one list sorted in ascending order and print odd numbers in another list sorted in ascending order.

---

#### Input

The input will be a single line containing space-separated integers.

---

#### Output

The first line of output should be a list of integers containing even numbers sorted in ascending order.
The second line of output should be a list of integers containing odd numbers sorted in ascending order.

---

#### Explanation

For example, if the given space-separated numbers are `3 8 5 7 1 6`,

- The even numbers are **8** and **6**.
- The ascending order of even numbers is **6** and **8**.
- The odd numbers are **3**, **5**, **7**, and **1**.
- The ascending order of odd numbers is **1**, **3**, **5** and **7**.

The output should be,

```
[6, 8]
[1, 3, 5, 7]
```

Solution Code:list_a = input().split()

new_list = []

for i in list_a:
    number = int(i)
    new_list += [number]

empty_str = []
empty_string = []

for j in new_list:
    if (j%2)==0:
        empty_str = empty_str + [j]
    else:
        empty_string = empty_string + [j]
        
result = (sorted(empty_str))
results =(sorted(empty_string))

print(result)
print(results)"
a36afd65-c081-4117-85ef-7ca2c664ebee,"Write a program that reads two numbers `A` and `B` and checks if both the sum and the product of the given numbers have less than three digits.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if both the sum and the product of the given numbers have less than three digits, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 17` and `B = 4`,

✔ The sum of `A` and `B` has less than three digits. (`17 + 4 = 21`, **21** has less than three digits)
✔ The product of `A` and `B` has less than three digits. (`17 * 4 = 68`. **68** has less than three digits)

The output should be **True** as both the sum and the product of the given numbers have less than three digits.

Solution Code:first_number = input()
first_number = int(first_number)

second_number = input()
second_number = int(second_number)

sum_of_numbers = first_number + second_number
sum_of_numbers = str(sum_of_numbers)
sum_digits_count = len(sum_of_numbers)
is_sum_length_less_than_three = sum_digits_count < 3

product_of_numbers = first_number * second_number
product_of_numbers = str(product_of_numbers)
product_digits_count = len(product_of_numbers)
is_product_length_less_than_three = product_digits_count < 3

result = is_sum_length_less_than_three and is_product_length_less_than_three
print(result)"
f46a4dc6-3516-4678-88d6-26989428d4a3,"Write a program that reads a three-digit number and checks if the given number contains **0**.

---

#### Input

The input will be a single line containing a three-digit integer.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the given number contains **0**, otherwise **False** should be printed.

---

#### Explanation

For example, if the given number is **120**,

✖ The first digit is equal to **0**. (**1** is not equal to **0**)
✖ The second digit is equal to **0**. (**2** is not equal to **0**)
✔ The third digit is equal to **0**. (**0** is equal to **0**)

The output should be **True** as the given number contains **0**.


Solution Code:number = input()

first_digit = number[0]
second_digit = number[1]
third_digit = number[2]

first_digit = int(first_digit)
second_digit = int(second_digit)
third_digit = int(third_digit)

result = (first_digit == 0) or (second_digit == 0) or (third_digit == 0)
print(result)"
2f563c45-8aef-4cff-a0e9-d4fa916600dd,"Write a program that reads a three-digit number and checks if each digit is greater than **4** or the first digit is equal to **6**.

---

#### Input

The input will be a single line containing a three-digit integer.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if each digit is greater than **4** or the first digit is equal to **6**, otherwise **False** should be printed.

---

#### Explanation

For example, if the given number is **612**,

✖ Each digit is greater than **4**. (All the digits should be greater than **4** but **1** and **2** are not greater than **4**)
✔ The first digit is equal to **6**. (The first digit of **612** is equal to **6**)

The output should be **True** as the first digit of the given number **612** is equal to **6**.


Solution Code:number = input()

first_digit = number[0]
second_digit = number[1]
third_digit = number[2]

first_digit = int(first_digit)
second_digit = int(second_digit)
third_digit = int(third_digit)

is_greater_than = (first_digit > 4) and (second_digit > 4) and (third_digit > 4)
is_first_digit_six = first_digit == 6

result = is_greater_than or is_first_digit_six
print(result)"
1182ace5-1586-4c9c-a04d-5b7b447f520b,"Write a program that reads the marks `M` in Maths, marks `P` in Physics and marks `C` in Chemistry and checks if any of the below conditions is satisfied.

* `M >= 60` and `P >= 50` and `C >= 45` and `M + P + C >= 180`.
* `M + P >= 120` or `C + P >= 110`.

---

#### Input

The first line of input contains an integer representing marks `M` in Maths.
The second line of input contains an integer representing marks `P` in Physics.
The third line of input contains an integer representing marks `C` in Chemistry.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if any of the given conditions is satisfied, otherwise **False** should be printed.

---

#### Explanation

For example, if the given marks are `M = 72`, `P = 65` and `C = 51`,<br/><br/>
<ul style=""list-style-type: none;padding:0;"">
  <li style=""margin:0;padding:0;"">
    <details style=""margin:0;padding:0;"">
      <summary style=""margin:0;padding:0;"">✔ `M >= 60` and `P >= 50` and `C >= 45` and `M + P + C >= 180`</summary>
        <ul style=""list-style-type: none;"">
          <li style=""margin:0;padding:0;"">✔ `M` is greater than **60**. (**72** is greater than **60**)</li>
          <li style=""margin:0;padding:0;"">✔ `P` is greater than **50**. (**65** is greater than **50**)</li>
          <li style=""margin:0;padding:0;"">✔ `C` is greater than **45**. (**51** is greater than **45**)</li>
          <li style=""margin:0;padding:0;"">✔ `M + P + C` is greater than **180**. (`M + P + C = 188` is greater than **180**)</li>
        </ul>
    </details>
  </li>
  <li style=""margin:0;padding:0;"">
    <details style=""margin:0;padding:0;"">
      <summary style=""margin:0;padding:0;"">✔ `M + P >= 120` or `C + P >= 110`</summary>
        <ul style=""list-style-type: none;"">
          <li style=""margin:0;padding:0;"">✔ The sum of M and P is greater than or equal to 120. (`72 + 65 = 137`, **137** is greater than **120**)</li>
          <li style=""margin:0;padding:0;"">✔ The sum of C and P is greater than or equal to 110. (`65 + 51 = 116`, **116** is greater than **110**)</li>
       </ul>
    </details>
  </li>
</ul>

The output should be **True** as any of the given conditions is satisfied.

Solution Code:M = int(input())
P = int(input())
C = int(input())

if ((M >=60) and ( P >= 50) and (C >= 45)) and (M+P+C >= 180) or (M + P >= 120) or (C + P >=110) :
    print(""True"")
else:
    print(""False"")"
cf9012d7-f60a-492f-9a74-7d74d1ab692e,"Write a program that reads two numbers `A` and `B` and checks if both the below conditions are satisfied.

* One of `A` and `B` is less than **20**.
* One of `A` and `B` is greater than **30**.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if one of `A` and `B` is less than **20** and one of `A` and `B` is greater than **30**, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 15` and `B = 35`,

✔ One of `A` and `B` is less than **20**. (**15** is less than **20**)
✔ One of `A` and `B` is greater than **30**. (**35** is greater than **30**)

The output should be **True** as both the given conditions are satisfied.

Solution Code:a=input()
a=int(a)
b=input()
b=int(b)


result_1=(a<20 or b<20) 
result_2=(b>30 or a>30) 


print(result_1 and result_2)"
8fb42bfa-e648-4ad3-88c0-1d5f4beb62bf,"Write a program that reads two numbers `A` and `B`, and checks if one of the below conditions is satisfied.

* One of `A` and `B` is less than **20**.
* The sum of `A` and `B` is between **30** and **50**.

Print the sum of `A` and `B` if one of the given conditions is satisfied. Otherwise, print `A` and `B` on each line.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

If one of the given conditions is satisfied,

The output should be a single line containing an integer that is the sum of `A` and `B`.

Otherwise, 

The first line of output should be an integer containing `A`.
The second line of output should be an integer containing `B`.

---

#### Explanation

For example, if the given numbers are `A = 45` and `B = 7`,

✔ One of `A` and `B` is less than **20**. (**7** is less than **20**)
✖ The sum of `A` and `B` is between **30** and **50**. (`45 + 7 = 52`, **52** is **not** between **30** and **50**)

The output should be **52** (sum of `A` and `B`) as one of the given conditions is satisfied.

<br/>

For example, if the given numbers are `A = 30` and `B = 100`,

✖ One of `A` and `B` is less than **20**. (**30** and **100** are **not** less than **20**)
✖ The sum of `A` and `B` is between **30** and **50**. (`30 + 100 = 130`, **130** is **not** between **30** and **50**)

The output should be,

```
30
100
```

Solution Code:first_number = int(input())
second_number = int(input())

is_less_than = (first_number < 20) or (second_number < 20)

sum_of_numbers = first_number + second_number
is_sum_between = (sum_of_numbers > 30) and (sum_of_numbers < 50)

if (is_less_than or is_sum_between):
 print(sum_of_numbers)
else:
 print(first_number)
 print(second_number)"
f29e98d0-9390-4fc4-ab93-81183c8993f4,"Write a program that reads a Room Number and checks if the **Number** in the given Room Number is less than **30**.  

The Room Numbers are in the format of `R1`, `R35`, etc. 

Print **Ground Floor** if the **Number** is less than **30**. Otherwise, print **Not Ground Floor**.

<MultiLineNote>

In the Room Number, 

- The first character contains the character ""**R**"".
- The remaining characters contain a **Number**. 

**Example:** `R1`, `R35`, etc.

- If the Room Number is `R35`, the **Number** in Room Number is **35**.

</MultiLineNote>

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing a string. **Ground Floor** should be printed if the **Number** in Room Number is less than **30**. Otherwise, **Not Ground Floor** should be printed.

---

#### Explanation

For example, if the given Room Number is **R27**,

  <div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">R</div>
     <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">2</div>
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;font-weight: 900; text-align: center; padding: 8px 12px;"">7</div>
  </div>
  <div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
  </div>

<br/>

* The first character of the Room Number is **R**.
* The remaining characters of the Room Number is **27**. So, the **Number** in Room Number is **27**.
* **27** is less than **30**.

The output should be **Ground Floor** as the room number is less than **30**.

Solution Code:room_number = input()

number = room_number[1:]
number = int(number)

if (number < 30):
 print(""Ground Floor"")
else:
 print(""Not Ground Floor"")"
2ff66a60-951e-4687-94b9-6ceb3ba421b2,"Write a program that reads three numbers `A`, `B` and `C` and prints the greatest among the three numbers.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.
The third line of input contains an integer representing `C`.

---

#### Output

The output should be a single line containing an integer that is the greatest among the three numbers.

---

#### Explanation

For example, if the given numbers are `A = 2`, `B = 5` and `C = 7`,

- The greatest among `A` and `B` is `B`. (**5** is greater than **2**)
- The greatest among `B` and `C` is `C`. (**7** is greater than **5**)

The output should be **7** as it is the greatest among the three numbers.

Solution Code:a = int(input())
b = int(input())
c = int(input())

if a > b:
 greatest_number = a
else:
 greatest_number = b

if c > greatest_number:
 greatest_number = c

print(greatest_number)"
a4022e41-b632-4392-af4c-ee96867fe4ee,"Write a program that reads a word and checks if the first letter and last letter of the word are not the same.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the first letter and last letter of the word are not the same, otherwise **False** should be printed.

---

#### Explanation

For example, if the given word is **Python**,

  <div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
     <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">P</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">y</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">t</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: 900; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">h</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: 900; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">o</div>
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;font-weight: 900; text-align: center; padding: 8px 12px;"">n</div>
  </div>
  <div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;font-weight: 900;"">0</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;padding: 8px 12px;border-top: 1px solid #dcdcdc;font-weight: 900;"">5</div>
  </div>
<br/>


The output should be **True** as the first letter `P` and the last letter `n` of the word are not the same.


Solution Code:word = input()

word_length = len(word)

first_letter = word[0]
last_letter = word[word_length - 1]

result = first_letter != last_letter

print(result)"
acedaa95-a248-4ecd-958a-2e3b38c680d6,"Write a program that reads a temperature and checks if the given temperature is between **15** and **40**.

Print **Can go for a walk** if the given temperature is between **15** and **40**, otherwise print **Cannot go for a walk**.

---

#### Input

The input will be a single line containing an integer.

---

#### Output

The output should be a single line containing a string. **Can go for a walk** should be printed if the temperature is between **15** and **40**, otherwise **Cannot go for a walk** should be printed.

---

#### Explanation

For example, if the given temperature is **26**,

* **26** is greater than **15**.
* **26** is less than **40**.
* So, **26** is between **15** and **40**.

The output should be **Can go for a walk** as **26** is between **15** and **40**.


Solution Code:temperature = int(input())

if temperature > 15 and temperature < 40:
 print(""Can go for a walk"")
else:
 print(""Cannot go for a walk"")"
b19744d5-416b-44c3-bfab-1998a62789e4,"Write a program that reads a number and checks if the given number is equal to **0** or positive.

Print **Zero** if the given number is equal to **0**.
Print **Positive** if the given number is a positive number.

<MultiLineNote>

Positive numbers are numbers that are greater than **0**.
</MultiLineNote>

---

#### Input

The input will be a single line containing an integer.

---

#### Output

The output should be a single line containing a string. **Zero** should be printed if the given number is equal to **0**. **Positive** should be printed if the given number is greater than **0**.

---

#### Explanation

For example, if the given number is **56**, the output should be **Positive** as **56** is greater than **0**.


Solution Code:number = int(input())

if number == 0:
 print(""Zero"")

if number > 0:
 print(""Positive"")"
0cf39d38-7994-441d-a6cc-660821417ff7,"Write a program that reads two words and checks if the given two words are the same.

---

#### Input

The first line of input contains a string.
The second line of input contains a string.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the given two words are the same, otherwise **False** should be printed.

---

#### Explanation

For example, if the given words are **Jam** and **Jam**, 

The output should be **True** as both the words **Jam** and **Jam** are the same.


Solution Code:first_word = input()
second_word = input()

result = first_word == second_word 
print(result)"
d971d87a-c98a-4959-8265-35024135c181,"Write a program that reads three strings `A`, `B`, and `C`, and checks if one of the given strings is equal to **woman**.

---

#### Input

The first line of input contains a string `A`.
The second line of input contains a string `B`.
The third line of input contains a string `C`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if one of the given strings is equal to **woman**, otherwise **False** should be printed.

---

#### Explanation

For example, if the given strings are `A = ""man""`, `B = ""woman""`, and `C = ""man""`,

✗ `A` is equal to **woman**. (**man** is not equal to **woman**)
✔ `B` is equal to **woman**. (**woman** is equal to **woman**)
✗ `C` is equal to **woman**. (**man** is not equal to **woman**)

The output should be **True** as one of the given strings is equal to **woman**.

Solution Code:first_person = input()
second_person = input()
third_person = input()

result = (first_person == ""woman"") or (second_person == ""woman"") or (third_person == ""woman"")

print(result)"
c6ca08f8-2038-455a-a783-68ef13da0526,"Write a program to take two integer inputs (say A and B) and print the result of the following operations:<br/>1. Addition<br/>2. Subtraction <br/>3. Multiplication<hr><b>Output</b><br/><br/>The first line should contain the sum of the two given integers.<br/>The second line should contain the subtraction of the two given integers.<br/>The third line should contain the product of the two given integers.<hr><b>Explanation</b><br/><br/>In the given example, the inputs are A = 4 and B = 3<br/>Addition: 4 + 3 = 7<br/>Subtraction: 4 - 3 = 1<br/>Multiplication: 4 * 3 =  12

Solution Code:A = input()
A = int(A)

B = input()
B = int(B)

Addition = A + B 
Subtraction = A - B 
Multiplication = A * B 

print(Addition)
print(Subtraction)
print(Multiplication)"
71ed6838-2781-4f06-9efe-24ef2cd15be2,"Write a program that reads two words `W1` and `W2`. 

`W1` contains two parts. The first part contains `W2` and the second part contains the remaining letters in `W1`.

Print `W1` with the first part as stars (`*`).

---

#### Input

The first line of input contains a string representing `W1`.
The second line of input contains a string representing `W2`.

---

#### Output

The output should be a single line containing a string `W1` with the first part as stars.

---

#### Explanation

For example, if the given words are `W1 = Subway` and `W2 = Sub`.

  <div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
     <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">S</div>
     <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">u</div>
     <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">b</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: 900; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">w</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: 900; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">a</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: 900; text-align: center; padding: 8px 12px;"">y</div>
  </div>
  <div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;font-weight: 900;"">0</div>
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;font-weight: 900;"">1</div>
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;font-weight: 900;"">2</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
  </div>
<br/>

* The first of **Subway** (`W1`) is **Sub** (`W2`).
* Print stars (`*`) instead of **Sub** in **Subway**.

The output should be **\*\*\*way**. 

Solution Code:w1=input()
w2=input()
len_of_w1=len(w1)
len_of_w2=len(w2)
no_of_stars=len_of_w2
second_part_of_w1=w1[len_of_w2:]
result=""*"" * no_of_stars+second_part_of_w1 
print(result)"
a8e64dd8-59b0-4ce0-b8a5-f7bf8b6a3dca,"Write a program that reads a number `N` and prints three lines with each line containing `N` pluses (`+`).

<MultiLineNote>
There is a space after every plus symbol.
</MultiLineNote>

---

#### Input

The input will be a single line containing an integer.

---

#### Output

The output should be three lines containing `N` space separated pluses (`+`) in each line.

---

#### Constraints

`N` is always greater than 0

---

#### Explanation

For example, if the given number `N` is **4**, the output should be

```
+ + + +
+ + + +
+ + + +
```


Solution Code:n = int(input())
print(""+ "" * n)
print(""+ "" * n)
print(""+ "" * n)"
8068bbeb-83ee-444d-ac68-b99cc987d171,"Given a word W and an integer N, write a program to print the character present at the index N in the word W. <hr><b>Input</b><br/><br/>The first line contains the word W <br/>The second line contains the integer N <hr><b>Explanation</b> <br/><br/>For example, when the given word W is <code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;background-color: rgba(0,0,0,.05);border-radius: 3px;padding: 2px 4px;"">Chocolate</code> and the integer N is 2. Since the index starts from zero. The character present at index 2 is <code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;background-color: rgba(0,0,0,.05);border-radius: 3px;padding: 2px 4px;"">o</code>. <br/> <table style=""background-color: transparent;border-collapse: collapse;border-spacing: 0;""> <thead> <tr> <th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">C</th> <th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">h</th> <th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">o</th> <th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">c</th> <th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">o</th> <th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">l</th> <th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">a</th> <th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">t</th> <th style=""border-right: 0;padding: 8px 12px;"">e</th> </tr> </thead> <tbody> <tr> <td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</td> <td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</td> <td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</td> <td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</td> <td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</td> <td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</td> <td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">6</td> <td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">7</td> <td style=""border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">8</td> </tr> </tbody> </table> <br/>Similarly, for <code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;background-color: rgba(0,0,0,.05);border-radius: 3px;padding: 2px 4px;"">Table</code> the character at index 1 is <code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;background-color: rgba(0,0,0,.05);border-radius: 3px;padding: 2px 4px;"">a</code> <br/> <table style=""background-color: transparent;border-collapse: collapse;border-spacing: 0;""> <thead> <tr> <th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">T</th> <th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">a</th> <th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">b</th> <th style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;"">l</th> <th style=""border-right: 0;padding: 8px 12px;"">e</th> </tr> </thead> <tbody> <tr> <td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</td> <td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</td> <td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</td> <td style=""border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</td> <td style=""border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</td> </tr> </tbody> </table> <hr><b>Constraints</b><br/><br/> 0 &lt;= N &lt; len(W)

Solution Code:word = input()
n = input()
n = int(n)
print(word[n])"
a8e46166-7440-4422-9ca9-5fe5b2b023bd,"Write a program that reads a word and an index and prints a part of the word from the given index to the end of the word.

---

#### Input

The first line of input contains a string.
The second line of input contains an integer.

---

#### Output

The output should be a single line containing a string that is the part of the word.

---

#### Explanation

For example, if the given word is **Unhappy** and the index is **2**,

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">U</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">n</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">h</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">a</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">p</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">p</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 0;padding: 8px 12px;"">y</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell;font-weight: 900; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell; font-weight: 900;vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell; font-weight: 900;vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell;font-weight: 900; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell;font-weight: 900; vertical-align: inherit;border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">6</div>
</div>

<br/>

The output should be **happy** as the slicing starts from the **2nd** index and stops at the end of the word.

Solution Code:word = input()
start_index = input()
start_index = int(start_index)

part = word[start_index:]
print(part)"
da3810f0-9cfa-4c0b-a13c-9c22f9c7436a,"Write a program that reads a word and a number N and prints the last N characters of the word.

---

#### Input

The first line of input contains a string.
The second line of input contains an integer.

---

#### Output

The output should be a single line containing a string that is the part of the word.

---

#### Explanation

For example, if the given word is **Forgive** and the number **N** is **4**,

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: 900; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">F</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">o</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">r</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">g</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">i</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">v</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 0;padding: 8px 12px;"">e</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell; vertical-align: inherit;border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">6</div>
</div>

<br/>

The output should be **give** as the last **4** characters of **Forgive** is **give**.

Solution Code:word = input()
no_of_characters = input()
no_of_characters = int(no_of_characters)

word_length = len(word)
start_index = word_length - no_of_characters

part = word[start_index:]
print(part)"
b7b752dc-b093-44aa-9234-72e17a61419b,"You are given a string. Repeat the same string `N` times separated by space.

---

#### Explanation

In the given example the string is `messages`, `N = 3`. So we have to repeat the string three times. Then we get `messages messages messages` as output.

Solution Code:word = input()
n = int(input())

new_string = word + ("" "" + word) * (n - 1)


print(new_string)"
09a20338-9d5b-4ab4-b5b0-58be2d17a90d,"Given a word and a number (N), write a program to print the last three characters of the word N times in a single line.<hr><b>Input</b><br/><br/>The first line of input contains a word.<br/>The second line of input contains the integer N which denotes the number of times the last three characters of word has to be repeated.<hr><b>Output</b><br/><br/>The first line of output contains the last three characters of the given word repeated N times.<br/>Note: There should not be any spaces between the repetitions.<hr><b>Explanation</b><br/><br/>For example, if the given input is &quot;Transport&quot; and the given number is 2.<br/>The last three characters of the given word are &quot;ort&quot;, which have to be repeated 2 times, so the output should be &quot;ortort&quot;

Solution Code:word = input()
n = int(input())
length_of_the_word = len(word)
start_index = length_of_the_word - 3
sliced_word = word[start_index:]
message = sliced_word * n
print(message)"
8df461ce-d048-4f8d-ab60-56d3341aa965,"Write a program that reads a word and prints the word excluding the fourth letter of the word.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing a string excluding the fourth letter of the word.

---

#### Explanation

For example, if the given word is **Equality**, 

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""display: table-cell; vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">E</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">q</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">u</div>
   <div style=""color: #808080;display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">a</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">l</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">i</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">t</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 0;padding: 8px 12px;"">y</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""display: table-cell; vertical-align: inherit; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
   <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
   <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
   <div style=""color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
   <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
   <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
   <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">6</div>
   <div style=""display: table-cell; vertical-align: inherit;border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">7</div>
</div>
<br/>

* The letters before the fourth letter are **Equ**.
* The fourth letter is **a**.
* The letters after the fourth letter are **lity**

The output should be **Equlity** as the fourth letter is excluded.

Solution Code:word = input()

first_part = word[:3]
second_part = word[4:]

result = first_part + second_part
print(result)"
096a6bf4-3251-4551-8ba1-8f0cd34d9ce6,"Write a program to take the number of kilometers as input and convert into meters and print the number of meters.<br/>Note: 1 Kilometer = 1000 Meters<hr><b>Input</b><br/><br/>The first line of input contains the number of kilometers.<br/>The input will have a decimal part.<hr><b>Output</b><br/><br/>The first line of output contains the number of meters.<br/>The output should be an integer.<hr><b>Explanation</b><br/><br/>For example, 1.2 kilometers is equals to 1200 meters

Solution Code:kilometers = input()
kilometers = float(kilometers)

meters = kilometers * 1000

meters = int(meters)
print(meters)"
6dc3f6eb-4a47-4389-b13e-c8ab65541844,"Write a program that reads two numbers A and B and prints the division of two numbers (A / B) as an integer.

---

#### Input

The first line of input contains an integer.
The second line of input contains an integer.

---

#### Output

The output should be a single line containing an integer that is the integer value of the result obtained from the division of two numbers.

---

#### Explanation

For example, if the given numbers are **21** and **4**,

* The division of 21 and 4 (`21 / 4`) is **5.25**
* The integer of **5.25** is **5**

The output should be **5**.

Solution Code:first_number = input()
second_number = input()

first_number = int(first_number)
second_number = int(second_number)

result = first_number / second_number
result = int(result)

print(result)"
33fd0333-2fa8-459b-addb-cc8f13068937,"Write a program that reads a word and prints the word in the given format.

```
****** Python ******
```

<MultiLineNote>
The number of stars before and after the word is equal to the length of the word
</MultiLineNote>

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing a string in the format shown in the sample output.

---

#### Explanation

For example, if the given word is **Code**,

* The length of the word **Code** is **4**
* Add **4** stars and a space before the word **Code**
* Add a space and **4** stars after the word **Code**

The output should be,

```
**** Code ****
```

Solution Code:word = input()
length=len(word)
print(""*""*length+"" ""+word+"" ""+""*""*length)"
decf4a92-e86d-4a15-b7d8-add639250c41,"Write a program that reads two words `W1` and `W2`. `W2` is at the beginning of `W1`.

Print the index at which `W2` ends in `W1`.

---

#### Input

The first line of input contains a string representing `W1`.
The second line of input contains a string representing `W2`.

---

#### Output

The output should be a single line containing an integer that is the index at which the word `W2` ends in the word `W1`.

---

#### Explanation

For example, if the given words are `W1 = Midterm` and `W2 = Mid`,

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""display: table-cell;vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">M</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">i</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">d</div>
   <div style=""display: table-cell;color: #808080;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">t</div>
   <div style=""display: table-cell;color: #808080;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">e</div>
   <div style=""display: table-cell;color: #808080;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">r</div>
   <div style=""display: table-cell;color: #808080;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 0;padding: 8px 12px;"">m</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""display: table-cell; vertical-align: inherit;font-weight: bold;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
   <div style=""display: table-cell; vertical-align: inherit;font-weight: bold;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
   <div style=""display: table-cell; vertical-align: inherit;font-weight: bold;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
   <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
   <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
   <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
   <div style=""display: table-cell; vertical-align: inherit;border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">6</div>
</div>
<br/>

The output should be **2** as the word **Mid** ends at index **2** in the word **Midterm**.

Solution Code:w1=input()
w2=input()
end_index_of_w2=len(w2)-1
print(end_index_of_w2)"
792971bf-deef-4e25-856d-2b8cfe8a0521,"Write a program that reads a string and prints the first and last characters of the given string and prints the stars (`*`) instead of the remaining characters.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing the first and last characters of the given string and stars (`*`) instead of the remaining characters.

---

#### Explanation

For example, if the given string is **qwerty@2020**, the output should be **q\*\*\*\*\*\*\*\*\*0**.

Solution Code:word = input()

length_of_the_word = len(word)
first_word = word[0]
last_word = word[length_of_the_word - 1]

print(first_word + ""*"" * (length_of_the_word - 2) + last_word)"
4ef7f535-85cd-4711-bf05-2468296e4cba,"Write a program to print the given input word three times in a single line separated by spaces

Solution Code:word = input()
message = (word + ' ') * 3
print(message)"
8276658d-7a4a-492c-9f2b-1370b66b5781,"Write a program that reads the name and age of a person and prints them in the given format.

---

#### Input

The first line of input contains a string.
The second line of input contains an integer.

---

#### Output

The output should be a single line containing a string in the format shown in the sample output.

---

#### Explanation

For example, if the given inputs are **Robert** and **21**, the output should be **Robert is 21 years old**.

Solution Code:name = input()
age = input()

print(name + "" is "" + age + "" years old"")"
043fc443-2eab-463f-aef3-e378145016c3,"Write a program that reads the two words and prints the two words on two lines.

---

#### Input

The first line of input contains a string.
The second line of input contains a string.

---

#### Output

The first line of output should be a string containing the first word.
The second line of output should be a string containing the second word.

---

#### Explanation

For example, if the given words are **Apple** and **Banana**, the output should be

```
Apple
Banana
```

Solution Code:first_word = input()
second_word = input()

print(first_word)
print(second_word)"
2f8ccf9a-43ef-4b11-8497-a0a6032791ce,"Write a program that reads a single line of input and print the given input.

Solution Code:a = input()
print(a)"
d84bf16f-dd5c-4e61-aa8f-65cab8dd1d29,"Write a program that reads a word and prints the index of the last character of the word.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing an integer which is the index of the last character of the word.

---

#### Explanation

For example, if the given word is **Python**, the output should be **5** as the index starts from **0** and the index of the last character is **5**.

  <div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">P</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">y</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">t</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: 900; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">h</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: 900; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">o</div>
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;font-weight: 900; text-align: center; padding: 8px 12px;"">n</div>
  </div>
  <div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;padding: 8px 12px;border-top: 1px solid #dcdcdc;font-weight: 900;"">5</div>
  </div>

Solution Code:word = input()

word_length = len(word) 
last_index = word_length - 1

print(last_index)"
72bbc589-e983-42ee-b079-71a180818822,"Write a program that reads a word and prints the length of the word excluding the first and last character.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing an integer that is the length of the word excluding the first and last character.

---

#### Explanation

For example, if the given word is **Blockchain**,

* The number of characters in the word is **10**
* The first and the last characters should be removed, i.e. two characters should be removed from the word

The output should be **8**, as **10 - 2** is **8**.

Solution Code:word = input()

word_length = len(word)
word_length_excluding_chars = word_length - 2

print(word_length_excluding_chars)"
495a0940-ceae-415a-981a-b0015ffbd14a,"Write a program which prints the last character of a given word.<hr><b>Input</b><br/><br/>The input will be a single line containing a word.<hr><b>Output</b><br/><br/>The output should be a single line containing the last character of the given word.<hr><b>Explanation</b><br/><br/>For example, if the given input word is &quot;January&quot;, your code should print the last character &quot;y&quot;.

Solution Code:word = input()
length_of_the_word = len(word)
last_index = length_of_the_word - 1
character_at_last_index = word[last_index]
print(character_at_last_index)"
1b131ce9-4e12-4f91-b8fd-9df387217618,"You are given an integer `N` as input. Write a program to read `N` integers and print a list containing the first and last two inputs.

---

#### Input

The first line of input is an integer `N`.
The next `N` lines each contains an integer.



---

#### Explanation

In the given example, we are given `6` numbers `1, 2, 3, 4, 5, 6` as input.

The list should contain first two integers `1, 2` and last two integers `5, 6`
So, the output should be `[1, 2, 5, 6]`.

Solution Code:n = int(input())

new_list = []

for i in range(1,n+1) :
    m = int(input())
    new_list = new_list + [m]
    
length = len(new_list)
result = new_list[0:2] + new_list[(length-2):]
print(result)"
76e77382-0999-44fc-81d7-df8ed6788757,"Given an integer N, write a program to print the given N inputs in the reverse order.<hr><b>Input</b><br/><br/>The first line of input will contain a positive integer (N).<br/>The next following N lines will contain a string each in a line.<hr><b>Output</b><br/><br/>The output should be N lines, printing the given inputs in reverse order, each in a new line.<hr><b>Explanation</b><br/><br/>For example, if the given number is 8, read the inputs in the next eight lines and print them in the reverse order. If the given eight inputs are the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">Anjali
Ravi
Akbar
Suresh
Gopal
Latha
Mohan
Ashok
</code></pre><br/>So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">Ashok
Mohan
Latha
Gopal
Suresh
Akbar
Ravi
Anjali
</code></pre>

Solution Code:n = int(input())
list_a = []

for i in range(n):
 value = input() # Read the list inputs
 list_a += [value]

for i in range(n):
 print(list_a[n-i-1])"
4f6dfdc8-5fe1-450f-acd0-396ae8dc3881,"Sophia is given a sentence and asked to make every word in the sentence start with a vowel.

In order to do this, she can rotate the letters in the words from left to right. Help Sophia update the words in the sentence.

Write a program that reads the sentence and prints the updated sentence by performing the above operation.

<MultiLineNote>

If there is no vowel in the word, then the letters will not rotate.

</MultiLineNote>

---

#### Input

The input will be a single line containing a string representing the sentence.

---

#### Output

The output should be a single line containing a string that is updated by making every word start with a vowel in the given sentence.

---

#### Explanation

**Test Case:** If the given `sentence = ""A boy carrying bag slipped on floor""`.

| Original Word | Rotated Word |
| ------------- | ------------ |
| A             | A            |
| boy           | oyb          |
| carrying      | arryingc     |
| bag           | agb          |
| slipped       | ippedsl      |
| on            | on           |
| floor         | oorfl        |

The output should be **""A oyb arryingc agb ippedsl on oorfl""**.

Solution Code:def get_new_word(word):
 vowels = ['a', 'e', 'i', 'o', 'u']
 new_word = word
 word_length = len(word)
 for i in range(word_length):
 if word[i].lower() in vowels:
 new_word = word[i:] + word[:i]
 break
 return new_word

def get_new_sentence(sentence):
 new_sentence = """"
 for word in sentence:
 new_word = get_new_word(word)
 new_sentence += new_word + "" ""
 return new_sentence

def main():
 sentence = input().split()
 new_sentence = get_new_sentence(sentence)
 print(new_sentence)
 
main()"
21431e51-9b0a-4b19-a4b3-3aec1ce8e146,"Riya participated in a math quiz competition. At the end of the contest, she had to solve a tricky question to win the first prize.

She has been given a few numbers, **M** multiple ranges and her task is to add all the numbers in each corresponding range. Help Riya to solve this question.

Write a program that reads the space-separated numbers and **M** multiple ranges and prints the sum of all the numbers in each range.

---

#### Input

The first line of input contains space-separated integers representing numbers.

The second line of input contains an integer representing the multiple ranges `M`.

The next `M` lines of input contain space-separated integers representing the each range.

---

#### Output

The output should be `M` lines containing an integer that is the sum of all the numbers in the given range.

---

#### Explanation

**Test Case:** If the given `numbers = 1 2 2 3 3 3 4 5 6` and `M = 2`

For range `0 2`, the numbers within the range of `0` to `2` are `1 2 2`.

The sum of all the numbers in given range is,

```
1 + 2 + 2 = 5.
```

For range `1 4`, the numbers within the range of `1` to `4` are `1 2 2 3 3 3 4`.

The sum of all the numbers in given range is,

```
1 + 2 + 2 + 3 + 3 + 3 + 4 = 18.
```

The output should be

```
5
18
```

Solution Code:def get_the_sum_of_numbers(numbers, from_range, to_range):
 sum_of_numbers = 0
 for each_number in numbers:
 if each_number >= from_range and each_number <= to_range:
 sum_of_numbers += each_number
 return sum_of_numbers
 
def print_sum_of_numbers_for_multiple_ranges(numbers, no_of_ranges):
 for i in range(no_of_ranges):
 from_range, to_range = map(int, input().split())
 sum_of_numbers = get_the_sum_of_numbers(numbers, from_range, to_range)
 print(sum_of_numbers)

def main():
 numbers = list(map(int, input().split()))
 no_of_ranges = int(input())
 print_sum_of_numbers_for_multiple_ranges(numbers, no_of_ranges)

main()"
d1957eec-6ad2-4f8d-a923-9a84372b76b9,"Edward has been given a number that he must decode to obtain a PIN. He is required to find the count of repeated single-digit integers in the given number in order to decode it. Your task is to help Edward obtain a PIN.

Write a program that reads the number and prints the count of repeated single-digit integers in the given number.

---

#### Input

The input will be a single line containing an integer representing the number.

---

#### Output

The output should be a single line containing an integer representing the count of repeated single-digit integers in the given number.

---

#### Explanation

**Test Case:** If the given `N = 212311`,

In this number, digits `1` and `2` are repeated single-digit integers. The count of repeated single-digit integers in the given number is **2**.

The output should be **2**.

Solution Code:def get_repeated_digits_count(number):
 repeated_digits = []
 for each_digit in number:
 if number.count(each_digit) > 1 and each_digit not in repeated_digits:
 repeated_digits.append(each_digit)
 repeated_digits_count = len(repeated_digits)
 return repeated_digits_count

def main():
 number = input()
 repeated_digits_count = get_repeated_digits_count(number)
 print(repeated_digits_count)

main()"
1bd04940-485e-47d4-86f6-a6554dbe24ac,"Arjun has two strings **S** and **T**. In order to equal them, he can select any two adjacent characters in **S** and swap them only once.

Write a program that reads two strings and checks if Arjun can make the given two strings equal or not.

---

#### Input

The first line of input contains a string representing `S`.
The second line of input contains a string representing `T`.

---

#### Output

The output should be a single line containing a string. **Yes** should be printed if the given two strings are equal after swapping any two adjacent characters in `S`, otherwise **No** should be printed.

---

#### Explanation

**Test Case 1:** If the given `S = abc` and `T = acb`.

- Arjun can swap the 2nd and 3rd characters of the string `S` and equal the given two strings.
- The output should be **Yes**.

**Test Case 2:** If the given `S = aabb` and `T = bbaa`.

- Arjun cannot equal the given two strings `S` and `T` by performing the operation at once.
- So the output should be **No**.

Solution Code:def check_words_for_equality(first_word_list, second_word_list):
 if (first_word_list == second_word_list):
 return ""Yes""
 else:
 return ""No""

def swap_characters_and_check_words_equality(first_word, second_word):
 first_word_list, second_word_list = list(first_word), list(second_word)
 for i in range(len(first_word_list) - 1):
 if (first_word_list[i] != second_word_list[i]):
 temp = first_word_list[i]
 first_word_list[i] = first_word_list[i + 1]
 first_word_list[i + 1] = temp
 break
 are_words_equal = check_words_for_equality(first_word_list, second_word_list)
 return are_words_equal

def main():
 first_word, second_word = input(), input()
 result = swap_characters_and_check_words_equality(first_word, second_word)
 print(result)

main()"
2af79852-4407-41f5-8b54-a4431d1fae8f,"A group of people are playing a game. Each person stands in a line and holds a card with a number on it.

You will be given a random number **S** and your task is to find

- The updated group of people after removing the **S** number of people from the _left_ side of the group.
- The updated group of people after removing the **S** number of people from the _right_ side of the group.

Write a program that reads the card numbers and a random number **S** and prints the updated group of people in two lines after removing the **S** number of people from the left and right sides of the group.

---

#### Input

The first line of input contains comma-separated integers representing the card numbers.
The second line of input contains an integer representing the random number `S`.

---

#### Output

The first line of output contains space-separated integers that is the updated group of people after removing the **S** number of people from the left side of the group.

The second line of output contains space-separated integers that is the updated group of people after removing the **S** number of people from the right side of the group.

---

#### Explanation

**Test Case:** If the given `numbers = 1 , 2 , 3` and `S = 1`.

After removing `1` number from the left of the group, we will have: `numbers = 2 3`

After removing `1` number from the right of the group, we will have: `numbers = 1 2`

The output should be

```
2 3
1 2
```

Solution Code:def main():
 card_numbers = list(map(int, input().split(',')))
 random_number = int(input())

 card_numbers_with_removed_left_numbers = card_numbers[random_number:]
 card_numbers_with_removed_right_numbers = card_numbers[:len(card_numbers) - random_number]

 print(*card_numbers_with_removed_left_numbers)
 print(*card_numbers_with_removed_right_numbers)

main()"
651f9bb3-af4f-46f1-b2b8-cc71a7afa90e,"Professor Michael gave an assignment to his students. The professor divided the students into N groups after they completed the assignment and he would like to know which group achieved the highest score.

You will be given N groups' assignment scores and your task is to help Professor to know which group of students achieved the highest score on their assignments.

Write a program that reads the N group of comma-separated assignment scores and prints the group that achieved the highest score.

---

#### Input

The first line of input contains an integer representing the number of groups `N`.
The next `N` lines of input contain comma-separated integers representing the `N` group of students assignment scores.

---

#### Output

The output should be a single line containing space-separated numbers representing the group that achieved the highest score.

---

#### Explanation

**Test Case:** If the given `N = 2` and the groups are

```
0, 1, 2
3, 1, 0
```

In the above 2 groups, The second group (3, 1, 0) has the largest sum, `4`.

The output should be **3 1 0**.

Solution Code:def get_group_with_highest_score(groups_list):
 group_with_highest_score = groups_list[0]
 for each_group in groups_list:
 if(sum(each_group) > sum(group_with_highest_score)):
 group_with_highest_score = each_group
 return group_with_highest_score
 
def read_groups(groups):
 groups_list = []
 for i in range(groups):
 group = list(map(int, input().split(',')))
 groups_list.append(group)
 return groups_list
 
def main(): 
 groups = int(input())
 groups_list = read_groups(groups)
 group_with_highest_score = get_group_with_highest_score(groups_list)
 print(*group_with_highest_score)

main()"
0704e00c-32b7-4733-8ae3-752cdcf76325,"Write a program that reads the number **N** and prints the product of its digits.

---

#### Input

The input will be a single line containing an integer representing the number `N`.

---

#### Output

The output should be a single line containing an integer obtained by the product of its digits.

---

#### Explanation

**Test Case 1:** If the given number `N = 1234`,

Product of its digits are,

```
1 x 2 x 3 x 4 = 24
```

The output should be `24`.

**Test Case 2:** If the given number `N = 02`,

In this case, the leading `0` has no value in the number `N`.

The output should be **2**.

Solution Code:def get_product_of_digits(digits):
 if(len(digits) == 0):
 return 0
 product = 1 
 for each_digit in digits:
 product *= each_digit 
 return product
 
def main():
 number = int(input())
 digits = list(map(int, str(number)))
 product = get_product_of_digits(digits)
 print(product)
 
main()"
6be58c8b-2558-48ed-b0cb-32d0458be039,"Shikhar has two integers **S** and **T**. He wants to count all possible triplets of non-negative integers (**a**, **b**, **c**) which satisfy the below conditions:

```
a + b + c <= S and a x b x c <= T
```

Your task is to help Shikhar by finding the count of such triplets.

Write a program that reads the two space-separated numbers **S** and **T**, and prints the count of triplets of non-negative integers (**a**, **b**, **c**) satisfying the above conditions.

<MultiLineNote>
A group of three, considered as a unit is known as **triplet**.
</MultiLineNote>

---

#### Input

The input will be a single line containing space-separated integers representing `S` and `T`.

---

#### Output

The output should be a single line containing an integer representing the count of triplets of non-negative integers (**a**, **b**, **c**) satisfying the above conditions.

---

#### Explanation

**Test Case:** If the given `S = 1` and `T = 0`

Possible triplets which are satisfying the above given conditions are `(0, 0, 0)`, `(0, 1, 0)`, `(0, 0, 1)` and `(1, 0, 0)`.

The output should be **4**.

Solution Code:def get_triples_count(s, t):
 triples_count = 0 
 for a in range(s + 1):
 for b in range(s + 1):
 for c in range(s + 1):
 if (a + b + c <= s and a * b * c <= t):
 triples_count += 1 
 return triples_count
 
def main():
 s, t = map(int, input().split())
 triples_count = get_triples_count(s, t)
 print(triples_count)
 
main()"
214d22f7-e9b0-435c-979b-1ee56d448446,"Write a program to convert the date in string format to another string format.<br/>The input date string format is like &quot;Jul 01 2014 02:43PM&quot;<br/>The output date string format should be like &quot;DD/MM/YYYY HH:MM:SS&quot;<hr><b>Input</b><br/><br/>The input will be a single line containing the date in the string format similar to &quot;Jul 01 2014 02:43PM&quot;.<hr><b>Output</b><br/><br/>The output should be a single line containing the datetime in &quot;DD/MM/YYYY HH:MM:SS&quot;<hr><b>Explanation</b><br/><br/>For example, if the given date is &quot;Jul 01 2014 02:43PM&quot;, your code should convert this date into a new format.<br/>So the output should be<br/>01/07/2014 14:43:00<br/>

Solution Code:from datetime import datetime

dt_format = ""%b %d %Y %I:%M%p""
dt_object = datetime.strptime(input(), dt_format)

output_format = datetime.strftime(dt_object, ""%d/%m/%Y %H:%M:%S"")
print(output_format)"
33722cd3-4fa2-41b6-a97b-96f5d670a905,"You are given two dates D1 and D2.<br/>Write a program to print the list of dates between two dates D1 and D2(including D1 and D2) in the increasing order of the dates.<br/>The date in string format is like &quot;Feb 20 2021&quot;.<hr><b>Input</b><br/><br/>The first line of input will be a string, denoting the D1 in the string format.<br/>The second line of input will be a string, denoting the D2 in the string format.<hr><b>Output</b><br/><br/>The output should be multiple lines containing the dates from D1 to D2 each in a new line.<hr><b>Explanation</b><br/><br/>For example, if the given D1 and D2 is<br/>Jul 11 2014<br/>Jul 19 2014<br/>Your code should print the dates from 11th July to 19th July of 2014. So the output should be<br/>2014-07-11 00:00:00<br/>2014-07-12 00:00:00<br/>2014-07-13 00:00:00<br/>2014-07-14 00:00:00<br/>2014-07-15 00:00:00<br/>2014-07-16 00:00:00<br/>2014-07-17 00:00:00<br/>2014-07-18 00:00:00<br/>2014-07-19 00:00:00<hr><b>Constraints</b><br/><br/>Date D1 comes before Date D2

Solution Code:from datetime import datetime, timedelta

start_dt_string = input()
end_dt_string = input()

start_dt = datetime.strptime(start_dt_string, '%b %d %Y')
end_dt = datetime.strptime(end_dt_string, '%b %d %Y')

number_of_days = (end_dt - start_dt).days
for i in range(number_of_days+1):
 print(start_dt + timedelta(days=i))"
98a7ce1e-df34-41fe-a25b-1d935293d31b,"You are given two years A and B.<br/>Write a program to count the number of Mondays M, which is the 1st day of the month from year A to year B(including B).<hr><b>Input</b><br/><br/>The input will be a single line containing the two space-separated integers, denoting the years A and B.<hr><b>Output</b><br/><br/>For example, if the given years are 2015 and 2017, the dates which contain Mondays as their month starting weekday from 2015 to 2017 are <br/>2015-06-01<br/>2016-02-01<br/>2016-08-01<br/>2017-05-01<br/>So the output should be 4.

Solution Code:from datetime import datetime

year_a, year_b = input().split()
mondays = 0
months = range(1, 13)
for year in range(int(year_a), int(year_b)+1):
    for month in months:
        date_time_object = datetime(year, month, 1)
        name_of_weekday = datetime.strftime(date_time_object, ""%A"")
        if name_of_weekday == ""Monday"":
            mondays += 1
print(mondays)"
a319805c-c9dc-4b7e-81cb-268a0d0569ec,"Given two integers A and B.
Write a program to print the result of A divided by B.<hr><b>Input</b><br/><br/>The input will be a single line containing two space-separated strings, denoting the values of A and B.<hr><b>Output</b><br/><br/>The output should be a single line containing the result of A divided by B.<br/>In the case of ZeroDivisionError, print the message &quot;Denominator can&#x27;t be 0&quot;<br/>In the case of ValueError, print the message &quot;Input should be an integer&quot;<hr><b>Explanation</b><br/><br/>For example, if the given A and B are 5 and 0, ZeroDivisionError will be raised as five cannot be divided by 0. So the output should be &quot;Denominator can&#x27;t be 0&quot;.<br/><br/>For example, if the given A and B are 12 and a, ValueError will be raised as the value of B is not an integer datatype. So the output should be &quot;Input should be an integer&quot;.

Solution Code:try:
 a, b = input().split()
 a = int(a)
 b = int(b)
 c = a/b
 print(c)
except ZeroDivisionError:
 print(""Denominator can't be 0"")
except ValueError:
 print(""Input should be an integer"")"
f0e02a4e-0f8c-4312-aaaa-5612f594c777,"Given a string, write a program that checks if the given string is a palindrome.

Print **Palindrome** if the given string is a palindrome. Otherwise, print **Not a Palindrome**.

<MultiLineNote>
- A string is said to be a palindrome if the string and reverse of the string is same.
- Consider a letter in uppercase or lowercase to be the same.
</MultiLineNote>

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing a string. **Palindrome** should be printed if the given string is a palindrome. Otherwise **Not a Palindrome** should be printed.

---

#### Explanation

For example, if the given string is `Madam`, 

- The word remains the same when written in reverse.

The output should be **Palindrome**. 
<br/>
For example, if the given string is `ROVER`, 

- The word does not remain the same when written in reverse.

The output should be **Not a Palindrome**.

Solution Code:# Get input from the user
user_input = input()
# Convert the input to uppercase
input_upper = user_input.upper()
# Reverse the input string
reverse_input = input_upper[::-1]
# Convert the reversed string to uppercase
reverse_upper = reverse_input.upper()
# Check if the original and reversed strings are the same
is_palindrome = input_upper == reverse_upper
# Output whether the input is a palindrome or not
if is_palindrome:
    print(""Palindrome"")
else:
    print(""Not a Palindrome"")"
d4ded7b4-a265-4cb1-9721-e122e32f327b,"You are given an integer `N` as input. Write a program to print integers from `N` to 1.

`Note:` Use For Loop.

---

#### Input

The first line of input is an integer `N`.

---




#### Explanation

In the given example, `N = 5` the integers from 5 to 1 are `5, 4, 3, 2, 1`.

Therefore, the output should be 

```
5
4
3
2
1
```

Solution Code:N = int(input())
for i in range(0, N):
    print(N - i)"
bfdf1d6c-4d27-45f1-98cc-a78f03a73da4,"Write a program that reads two numbers `M` and `N`, and prints the product of numbers from `M` to `N`.

<MultiLineNote>
Use **For** loop for iteration.
</MultiLineNote>

---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the product of numbers from `M` to `N`.

---

#### Explanation

For example, if the given numbers are `M = 5` and `N = 7`,

- The numbers from **5** to **7** are **5**, **6**, and **7**.
- The product of **5**, **6**, and **7** is **210**. (`5 * 6 * 7 = 210`)

The output should be **210**.


Solution Code:M = int(input())
N = int(input())

product = 1

for i in range(M, N+1):
    product = product * i

print(product)"
aa8dfc1f-a6c7-429c-9b60-23bf16a28aa4,"Write a program that reads a number `N` and prints the sum of squares of `N` numbers starting from **1**.

---

#### Input

The first line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the sum of the squares of `N` numbers starting from **1**.

---

#### Explanation

For example, if the given number is `N = 4`,

* The **3** numbers starting from **1** are **1**, **2**, **3** and **4**.
* The squares of the numbers are **1**, **4**, **9** and **16**.
* The sum of squares is **30**. (**1<sup>2</sup>+2<sup>2</sup>+3<sup>2</sup>+4<sup>2</sup> = 30**)

The output should be **30**.

Solution Code:n = int(input())
counter = 0
sum = 0
while counter <= n:
   sum = sum + counter**2
   counter = counter + 1
print(sum)"
32162e10-e4c2-497b-b8a7-acf2c6d20e75,"Write a program that reads two numbers `M` and `N` and prints `N` numbers after `M`.

---

#### Input

The first line of input contains an integer representing `M`.  
The second line of input contains an integer representing `N`.

---

#### Output

The output should contain `N` numbers after `M`, each on a new line.

---

#### Explanation

For example, if the given numbers are `M = 3` and `N = 5`,

* The **5** numbers after **3** are **4**, **5**, **6**, **7** and **8**.

The output should be,

```
4
5
6
7
8
```


Solution Code:m = int(input())
n = int(input())

counter = 0

while counter < n:
 m = m + 1
 print(m)
 counter = counter + 1"
1073d9dc-ae54-425b-8479-c11860dd95be,"You are given a string, write a program to find whether the string is palindrome or not.

`Note:` Treat uppercase letters and lowercase letters as same when comparing letters.

---

#### Input

The first line of input is a string.

---

#### Output

The output should be the string `True` or `False`.

---

#### Explanation

In the given example, the string `Madam` is a palindrome as we are treating `M` and `m` as equal. So, the output should be `True`.

Solution Code:string = input()
string = string.lower()


reverse_string = """"
for char in string:
 reverse_string = char + reverse_string

if string == reverse_string:
 print(""True"")
else:
 print(""False"")"
4e52aca6-ffef-4f3d-91b9-77c8dd8c5ef2,"Write a program that reads the number `N` and finds the count of digits from `1` to `N`.

<MultiLineNote>
- Numbers from **1** to **9** are single digits.
- Numbers from **10** to **99** are double digits and so on.
</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the count of the total number of digits from `1` to `N`.

---

#### Explanation

For example, if the given number is `N = 10`,

Count the digits from `1` to `10`,

- The numbers from `1` to `9` have one digit each, so there are `9` digits in total.

- The number `10` has two digits (`1`, `0`), so there are `2` digits in total. 

The output should be **11**.(`9 + 2 = 11`)

---

For example, if the given  number is `N = 106`,

Count the digits from `1` to `106`,

- The numbers from `1` to `9` have one digit each, so there are `9` digits in total.

- The numbers from `10` to `99` have two digits each, so there are `180` digits in total. (`90 * 2 = 180`)

- The numbers from `100` to `106` have three digits each, so there are `21` digits in total. (`7 * 3 = 21`)

The output should be **210**. (`9 + 180 + 21 = 210`)

Solution Code:n=int(input())
count = 0
for i in range (1,n+1):
    i = str(i)
    count = count  + len(i)
print(count)"
e690d882-66aa-4549-85b2-1d94e7c3697e,"Given two numbers `X` and `N`, write a program to print the **sum** of `N` terms in the given series.

**Series:**

<div style=""background-color: #3c4257; padding: 15px; color: #f8f8f2;border-radius: 4px; margin: 10px;font-size: 18px;font-family: Monaco, Menlo, 'Ubuntu Mono', Consolas, source-code-pro, monospace"">
(X)<sup>2</sup>, (XX)<sup>2</sup>, (XXX)<sup>2</sup>, ... N terms
</div>

<br/>

**Terms in the given series:**

| Term Number | Term                        | Number of X's |
| ----------- | --------------------------- | ------------- |
| First Term  | (X)<sup>2</sup>             | 1             |
| Second Term | (XX)<sup>2</sup>            | 2             |
| Third Term  | (XXX)<sup>2</sup>           | 3             |
| ..          | ..                          | ..            |
| Nth Term    | (XXXX...upto N)<sup>2</sup> | N             |

---

#### Input

The first line of input contains an integer representing `X`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the **sum** of the series from the **First Term** to the **Nth Term**.

---

#### Explanation

For example, if the given numbers are `X = 4` and `N = 3`,

- The number of terms is **3**.
- The terms from **First term** to **Third term** in the given series are **16** (4<sup>2</sup>), **1936** (44<sup>2</sup>), and **197136** (444<sup>2</sup>).

  **Terms in the given series:**

  | Term Number | Term                     | Number of X's (4's) |
  | ----------- | :------------------------: | ------------------- |
  | First Term  | 4<sup>2</sup> (16)       | 1                   |
  | Second Term | 44<sup>2</sup> (1936)    | 2                   |
  | Third Term  | 444<sup>2</sup> (197136) | 3                   |

- The **sum** of the terms from the **First Term** to the **Third Term** is **199088**. (`16 + 1936 + 197136 = 199088`)

The output should be **199088**.


Solution Code:x = int(input())
n = int(input())

sum_of_terms = 0

for each_number in range(1, n + 1):

    number = str(x)*each_number
    term = int(number) ** 2
    sum_of_terms = sum_of_terms + term

print(sum_of_terms)"
72aaa3b9-abaf-4232-8d1f-74e93fb800c6,"Given a number `N`, write a program that checks if `N` is **not** divisible by any number from **2** to **9**.

Print **Divisible Number** if the number `N` is divisible by any of the numbers from **2** to **9**. Print **Indivisible Number** if the number `N` is **not** divisible by any of the numbers from **2** to **9**.


---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing a string. **Divisible Number** should be printed if the number `N` is divisible by any of the numbers from **2** to **9**. **Indivisible Number** should be printed if the number `N` is **not** divisible by any of the numbers from **2** to **9**.

---

#### Explanation

For example, if the given number is `N = 15`,

- **15** is divisible by **3** and **5**.
- **15** is **not** divisible by **2**, **4**, **6**, **7**, **8**, and **9**.

The output should be **Divisible Number**, as **15** is divisible by at least one of the numbers from **2** to **9**.

<br/>

For example, if the given number is `N = 103`,

- **103** is **not** divisible by any number from **2** to **9** (**2**, **3**, **4**, **5**, **6**, **7**, **8**, and **9**).

The output should be **Indivisible Number**, as **103** is **not** divisible by any number from **2** to **9**.


Solution Code:n = int(input())
is_divisible = False

for i in range(2, 10):
    if n % i == 0:
        is_divisible = True

if is_divisible:
    print(""Divisible Number"")
else:
    print(""Indivisible Number"")"
c3f21f6d-4e5f-46d3-9e27-ebc392d107cf,"Write a program that reads a number and prints all the digits of the given number separated by a space.

---

#### Input

The input will be a single line containing a positive integer.

---

#### Output

The output should be a single line containing a string that has all the digits of the given number separated by a space.

---

#### Explanation

For example, if the given number is **165**,

- The digits of the number **165** are **1**, **6**, and **5**.
- Print all the digits of the number separated by a space.

The output should be **1 6 5**.


Solution Code:number = input()

result = """"

for digit in number:
 result = result + digit + "" ""

print(result)"
e2ca4f37-db65-4728-a7b2-1784f1988cac,"Write a program that reads **10** inputs and prints the sum and average of the given **10** inputs.


<MultiLineNote>
The average of `N` numbers can be calculated as, 
Average = Sum of `N` numbers / N

Example: If **3** numbers are **2**, **3**, and **7**. 

The average of **3** numbers is, 
Average = (2 + 3 + 7) / 3 = 4.0
</MultiLineNote>

---

#### Input

The **10** lines of input contain integers.

---

#### Output

The first line of output should be an integer that is the sum of the given **10** inputs.
The second line of output should be a float that is the average of the given **10** inputs.

---

#### Explanation

For example, if the given **10** inputs are **4**, **7**, **14**, **25**, **1**, **8**, **24**, **38**, **99**, and **10**,

- The sum of **4**, **7**, **14**, **25**, **1**, **8**, **24**, **38**, **99**, and **10** is **230**. (`4 + 7 + 14 + 25 + 1 + 8 + 24 + 38 + 99 + 10 = 230`)
- The average of **4**, **7**, **14**, **25**, **1**, **8**, **24**, **38**, **99**, and **10** is **23.0**. (`230 / 10 = 23.0`)

Solution Code:total = 0
for i in range(10):
 number = int(input())
 total = total + number

average = total / 10
print(total)
print(average)"
1f6afbfe-c69a-4468-9435-093c1f73e65f,"Write a program that reads two numbers `N` and `T` and prints the count of numbers from **1** to `N` that are divisible by `T`.

---

#### Input

The first line of input contains an integer representing `N`.
The second line of input contains an integer representing `T`.

---

#### Output

The output should be a single line containing an integer that is the count of numbers from **1** to `N` that are divisible by `T`.

---

#### Explanation

For example, if the given numbers are `N = 12` and `T = 3`,

- Numbers from **1** to **12** are **1**, **2**, **3**, **4**, **5**, **6**, **7**, **8**, **9**, **10**, **11**, and **12**.
- Numbers from **1** to **12** that are divisible by **3** are **3**, **6**, **9**, and **12**.
- The count of numbers from **1** to **12** that are divisible by **3** is **4**.

The output should be **4**.


Solution Code:n = int(input())
t = int(input())
count = 0

for each_number in range(1, n + 1):
 if each_number % t == 0:
 count = count + 1
 
print(count)"
a6695e2d-e45b-4076-866a-3ad51a82ec3f,"Given three integers, write a program to print the sum of the numbers divisible by the given number T from M to N.<hr><b>Input</b><br/><br/>The first line of input will contain an integer (T).<br/>The second line of input will contain an integer (M).<br/>The third line of input will contain an integer (N).<hr><b>Output</b><br/><br/>The output should be a single line containing the sum of the numbers divisible by the given number T.<hr><b>Explanation</b><br/><br/>For example, if the given number T is 2, M is 5, and N is 9.<br/>The numbers which are in the range from 5 to 9 and divisible by 2 are 6 and 8.<br/>So the output should be the sum of these numbers, which is 14.

Solution Code:t = int(input())
m = int(input())
n = int(input())

total = 0
for number in range(m, n+1):
 if (number % t) == 0:
 total = total + number

print(total)"
edf4fa5f-8ac6-4511-8d1a-ce76c19d7557,"Write a program that reads a number `N` and prints the average of numbers from **1** to `N`.

<MultiLineNote>

* The average of numbers from **1** to `N` can be calculated as,
    Average = Sum of numbers from **1** to `N` / Count of numbers (`N`)

    Example: If `N = 3`, the average of numbers from **1** to **3** is,
    Average = (1 + 2 + 3) / 3 = 2.0


* Use the **For** loop to iterate over the range of numbers.

</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing a float that is the average of numbers from **1** to `N`.

---

#### Explanation

For example, if the given number is `N = 8`,

- The numbers from **1** to **8** are **1**, **2**, **3**, **4**, **5**, **6**, **7**, **8**.
- The count of numbers from **1** to **8** is **8**.
- The sum of the numbers is **36**. (`1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 = 36`)
- The average of the numbers is **4.5**. (`36 / 8 = 4.5`)

The output should be **4.5**.


Solution Code:number = int(input())
sum_of_numbers = 0

for each_num in range(1, number + 1):
 sum_of_numbers = sum_of_numbers + each_num

average = sum_of_numbers / number
print(average)"
8b895357-6fb9-4e84-a194-0ec53677dcec,"Write a program that reads a number `N` and prints Natural Numbers from **1** to `N`.

<MultiLineNote>
* All the positive numbers from **1** are called **Natural Numbers**.
* Use the **For** loop to iterate over the range of numbers.
</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should contain all the Natural Numbers from **1** to `N`, each on a new line.

---

#### Explanation

For example, if the given number is `N = 7`,

- The Natural Numbers from **1** to **7** are **1**, **2**, **3**, **4**, **5**, **6** and **7**.

The output should be,

```
1
2
3
4
5
6
7
```


Solution Code:number = int(input())

for each_num in range(1, number + 1):
 print(each_num)"
3c54e540-fcff-4b29-9498-68fe3a3d2c7c,"Write a program to print the multiplication table of the given number (N) up to ten multiples in the format &quot;N x i = M&quot;.<hr><b>Input</b><br/><br/>The first line of input will contain an integer.<hr><b>Output</b><br/><br/>The output should be ten lines containing the multiples in the given format.<hr><b>Explanation</b><br/><br/>For example, if the given number is 3, your code should print the multiplication table like<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">3 x 1 = 3
3 x 2 = 6
3 x 3 = 9
3 x 4 = 12
3 x 5 = 15
3 x 6 = 18
3 x 7 = 21
3 x 8 = 24
3 x 9 = 27
3 x 10 = 30
</code></pre>

Solution Code:n = int(input())

for i in range(1, 11):
 print(str(n) + "" x "" + str(i) + "" = "" + str(i*n))"
85f0b8dc-7a89-4194-86fa-44971c3124c4,"Given a number `N`, write a program to print the sum of the **Kth** power of all the digits in the given number.

**K** indicates the number of digits of the number `N`.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the sum of the **Kth** power of all the digits of the number `N`.

---

#### Explanation

For example, if the given number is `N = 24753`,

- The digits of **24753** are **2**, **4**, **7**, **5**, and **3**.
- The number of digits of **24753** is **5**. So, the value of **K** is **5**.
- The **5** (**K**) power of all the digits of **24753** are **32**, **1024**, **16807**, **3125**, and **243**.
- The sum of the **5** (**K**) power of all the digits is **21231**. (**2<sup>5</sup> \+ 4<sup>5</sup> \+ 7<sup>5</sup> \+ 5<sup>5</sup> \+ 3 <sup>5</sup> = 21231**)

The output should be **21231**.

Solution Code:number = input()

num_of_digits = len(number)
sum_of_powers = 0

for each_digit in number:
    each_digit_power = int(each_digit) ** num_of_digits
    sum_of_powers = sum_of_powers + each_digit_power

print(sum_of_powers)"
93632301-51f1-485d-a483-d894a2aa2d67,"Given a string `S`, write a program to find the vowels in the given string `S`.

Print the resultant string by joining all the vowels in the string `S`.

<MultiLineNote>
The Vowels are **a**, **e**, **i**, **o**, and **u**.
</MultiLineNote>

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a string obtained by joining the vowels in the string `S`.

---

#### Explanation

For example, if the given string is `S = ""container""`,

- The characters in the string **container** are **c**, **o**, **n**, **t**, **a**, **i**, **n**, **e** and **r**.
- The vowels in the string **container** are **o**, **a**, **i** and **e**.
- The string obtained by joining all the vowels (**o**, **a**, **i** and **e**) is **oaie**.

The output should be **oaie**.

<br/>

For example, if the given string is `S = ""queue""`,

- The characters in the string **queue** are **q**, **u**, **e**, **u**, and **e**.
- The vowels in the string **queue** are **u**, **e**, **u**, and **e**.
- The string obtained by joining all the vowels (**u**, **e**, **u**, and **e**.) is **ueue**.

The output should be **ueue**.


Solution Code:string = input()

result = """"

for character in string:
    if ((character == ""a"") or (character == ""e"") or (character == ""i"") or (character == ""o"") or (character == ""u"")):
        
        result = result + character
        
print(result)"
81043fdb-da59-4b40-8c83-12d7eca0ad27,"Given a sentence as input, find all the unique combinations of two words and print the word combinations that are not adjacent in the original sentence in lexicographical order.


---

#### Input

The input will be a single line containing a sentence.

---

#### Output

The output should be multiple lines, each line containing a valid unique combination of two words. The words in each line should be lexicographical order and the lines as well should be in lexicographical order. A valid combination will not contain the words that appear adjacent in the given sentence. Print `No Combinations` if there are no valid combinations.



---

#### Explanation

For example, if the given sentence is `python is a programming language`, the possible unique combination of two are (a, is), (a, language), (a, programming), (a, python), (is, language), (is, programming), (is, python), (language, programming), (language, python), (programming, python). Out of these the combinations, (a, is), (a, programming), (is, python), (language, programming) are not valid as they contain words that are adjacent in the given sentence. 


So the output should be
a language
a python
is language
is programming
language python
programming python





Solution Code:def print_non_adjacent_words_list(non_adjacent_words_list):
 if(len(non_adjacent_words_list) == 0):
 print(""No Combinations"")
 for non_adjacent_words in non_adjacent_words_list:
 print(non_adjacent_words)
 
def check_are_words_adjacent(words_list, word1, word2):
 are_words_adjacent = False
 for index in range(len(words_list) - 1):
 if(words_list[index] == word1 and words_list[index + 1] == word2):
 are_words_adjacent = True
 elif(words_list[index + 1] == word1 and words_list[index] == word2):
 are_words_adjacent = True
 return are_words_adjacent

def get_non_adjacent_words_list(words_list):
 non_adjacent_words_list = []
 for i in range(len(words_list) - 1):
 for j in range(i, len(words_list)):
 are_words_adjacent = check_are_words_adjacent(words_list, words_list[i], words_list[j])
 if(i + 1 < j and not are_words_adjacent):
 non_adjacent_words = [words_list[i], words_list[j]]
 non_adjacent_words.sort()
 non_adjacent_words = "" "".join(non_adjacent_words)
 if(non_adjacent_words not in non_adjacent_words_list):
 non_adjacent_words_list.append(non_adjacent_words)
 non_adjacent_words_list.sort()
 return non_adjacent_words_list

def main():
 words_list = input().split()
 non_adjacent_words_list = get_non_adjacent_words_list(words_list)
 print_non_adjacent_words_list(non_adjacent_words_list)
 
main()"
e3afaae3-e9f4-4b80-a849-07e36434cac0,"You have given an **N x N** matrix, where **N** is a number. You need to find the sum of all elements in the matrix that satisfy either of the following conditions.

1. The row and column indices of an element should be the same.

2. The sum of the row and column indices of an element should be equal to the value **N - 1** .

For example, if the given number `N = 3`, and the given matrix is:

```
1 2 3
4 5 6
7 8 9
```

- The elements that satisfy the **1st** condition are 1, 5, and 9.

- The elements that satisfy the **2nd** condition are 3, 5, and 7.

- The sum of all these elements is **25**.

Write a program that reads an **N x N** matrix and prints the sum of elements that satisfy either of the given conditions.

<MultiLineNote>
- Row and Column are zero index-based.
- If an element satisfies both conditions, it will only be considered once in the final sum.
</MultiLineNote>

---

#### Input

The first line of input contains an integer `N`.

The next `N` lines of input contain `N` space-separated integers representing the `N x N` matrix.

---

#### Output

The output should be a single line containing an integer representing the sum of elements that satisfy either of the given conditions.

---

#### Explanation

**Test Case 1**: If the given `N = 3`, and the given matrix is:

```
10 12 13
14 15 16
17 18 19
```

Here,

- **10** <sub>(0, 0)</sub>, **15** <sub>(1, 1)</sub>, and **19** <sub>(2, 2)</sub> satisfies the **1st** condition.
- **13** <sub>(0+2=2)</sub>, **15** <sub>(1+1=2)</sub>, and **17** <sub>(2+0=2)</sub> satisfies the **2nd** condition.

Here, the element `15` satisfies both conditions, i.e, it will only be considered once in the final sum.

The elements that satisfy either of the given conditions are `10, 13, 15, 17, and 19`.

The sum of elements is

```
10 + 13 + 15 + 17 + 19 = 74
```

The output should be **74**.

---

**Test Case 2**: If the given `N = 4`, and the given matrix is:

```
10 11 12 13
11 12 13 14
15 15 15 15
12 12 12 12
```

Here,

- **10** <sub>(0, 0)</sub>, **12** <sub>(1, 1)</sub>, **15** <sub>(2, 2)</sub>, and **12** <sub>(3, 3)</sub> satisfies the **1st** condition.
- **13** <sub>(0+3=3)</sub>, **13** <sub>(1+2=3)</sub>, **15** <sub>(2+1=3)</sub>, and **12** <sub>(0+1=3)</sub> satisfies the **2nd** condition.

Here, there are no elements that satisfy both conditions.

The elements that satisfy either of the given conditions are `10, 12, 15, 12, 13, 13, 15, and 12`.

The sum of elements is

```
10 + 12 + 15 + 12 + 13 + 13 + 15 + 12 = 102
```

The output should be `102`.

Solution Code:def read_matrix(n):
 matrix = []
 for i in range(n):
 row = list(map(int, input().split()))
 matrix.append(row)
 return matrix

def get_sum_of_elements_satisfies_conditions(matrix, n):
 sum_of_elements = 0 
 for i in range(n):
 for j in range(n):
 if(i == j or (i+j) == (n-1)):
 sum_of_elements += matrix[i][j]
 return sum_of_elements
 
def main(): 
 n = int(input())
 matrix = read_matrix(n)
 sum_of_elements = get_sum_of_elements_satisfies_conditions(matrix, n)
 print(sum_of_elements)
 
main()"
f83462fb-be5a-48cd-8e0a-ee67a475f03a,"Each student from the kindergarten was given a word or a number. They were made to stand in such a way that their words/numbers made an actual sentence. Later the students that have numbers are told to shuffle among themselves such that they appear in decreasing order when the whole sentence is read. Find the sentence formed after they rearranged themselves in the said order.

**Note**: There will not be any negative numbers or numbers with the decimal part.

---

#### Input

The input is a string containing the actual sentence.

---

#### Output

The output is a string containing the modified sentence as mentioned above.

---

#### Explanation

For example, if the actual sentence is `I am 5 years and 11 months old`. 

The numbers in the sentence are 5 and 11. After arranging them in decreasing order, the output looks like `I am 11 years and 5 months old`.

Solution Code:def adding_numbers_and_words(word_chunks_list, numbers_in_sentence_list):
 rearranged_sentence = ''
 for each_word in word_chunks_list:
 rearranged_sentence += each_word
 if len(numbers_in_sentence_list) != 0:
 rearranged_sentence += str(numbers_in_sentence_list.pop())
 return rearranged_sentence
 
def get_rearranged_sentence(sentence):
 numbers_in_sentence_list = []
 word_chunks_list = []
 
 i = 0
 while i < len(sentence):
 number = """"
 if sentence[i].isdigit():
 start_index = i
 length_of_the_word = len(sentence)
 end_index = length_of_the_word + 1
 for j in range(start_index, length_of_the_word):
 if not sentence[j].isdigit():
 end_index = j
 break
 
 number = sentence[start_index:end_index]
 numbers_in_sentence_list.append(int(number))
 word_chunks_list.append(sentence[:start_index])
 sentence = sentence[end_index:]
 i = 0
 else:
 i += 1
 
 word_chunks_list.append(sentence)
 numbers_in_sentence_list = sorted(numbers_in_sentence_list)
 
 result = adding_numbers_and_words(word_chunks_list, numbers_in_sentence_list)
 return result

def main():
 sentence = input()
 rearranged_sentence = get_rearranged_sentence(sentence)
 print(rearranged_sentence)
 
main()"
592bf300-010b-4d58-bcd3-5b8fbc7abb41,"Write a program that reads an amount A and prints the minimum number of **100**, **50**, **10** and **1** rupee notes required for the given amount.

---

#### Input

The input will be a single line containing an integer representing the amount `A`.

---

#### Output

The first line of output should be a string containing the required number of **100** rupee notes as shown in the sample output.

The second line of output should be a string containing the required number of **50** rupee notes as shown in the sample output.

The third line of output should be a string containing the required number of **10** rupee notes as shown in the sample output.

The fourth line of output should be a string containing the required number of **1** rupee notes as shown in the sample output.

---

#### Explanation

For example, if the given amount `A = 893`,

* The number of **100** rupee notes required for **893** is **8**. (`893 / 100 = 8`)
  * The remaining amount is **93**. (`893 - (100 * 8) = 93`)
* The number of **50** rupee notes required for **93** is **1**. (`93 / 50 = 1.86`)
  * The remaining amount is **43**. (`93 - (50 * 1) = 43`)
* The number of **10** rupee notes required for **43** is **4**. (`43 / 10 = 4.3`)
  * The remaining amount is **3**. (`43 - (10 * 4) = 3`)
* The number of **1** rupee notes required for **3** is **3**. (`3 / 1 = 3`)


Number of **100** rupee notes => 100 x 8 = 800
Number of **50** rupee notes   =>  50  x 1 =    50
Number of **10** rupee notes   =>   10  x 4 =    40
Number of **1** rupee notes      =>     1  x 3 =      3
------------------------------------------------
Total                                         =>                  893
------------------------------------------------

The output should be,

```
100:8
50:1
10:4
1:3
```

Solution Code:amount = int(input())

no_of_100s = amount / 100
no_of_100s = int(no_of_100s)
remaining_amount = amount % 100

no_of_50s = remaining_amount / 50
no_of_50s = int(no_of_50s)
remaining_amount = remaining_amount % 50

no_of_10s = remaining_amount / 10
no_of_10s = int(no_of_10s)
remaining_amount = remaining_amount % 10

no_of_1s = remaining_amount

print(""100:"" + str(no_of_100s))
print(""50:"" + str(no_of_50s))
print(""10:"" + str(no_of_10s))
print(""1:"" + str(no_of_1s))"
314f5264-adc5-4887-bf6a-7bd1a01068eb,"Write a program to calculate the grade of the student based on the marks he/she scored.

----

**Input**

The input will be a single line containing a float value representing `N`.

----

**Output**

The output should be a single line containing a string representing the grade of the student.

- **A** should be printed if the given marks are greater than **85**.
- **B** should be printed if the given marks are greater than **70** and less than or equal to **85**.
- **C** should be printed if the given marks are greater than or equal to **60** and less than or equal to **70**.
- **F** should be printed if the given marks are less than **60**.

----

**Explanation**

If the given input `N = 70.5`,

✖ `N` is greater than **85**. (**70.5** is not greater than **85**)
✔ `N` is greater than **70** and less than or equal to **85**. (**70.5** is greater than **70** and less than or equal to **85**)
✖ `N` is greater than or equal to **60** and less than or equal to **70**. (**70.5** is greater than or equal to **60** and not less than or equal to **70**)
✖ `N` is less than **60**. (**70.5** is not less than **60**)

The output should be **B** as `N` is greater than **70** and less than or equal to **85**.

----

If the given input `N = 90`,

✔ `N` is greater than **85**. (**90** is greater than **85**)
✖ `N` is greater than **70** and less than or equal to **85**. (**90** is greater than **70** and not less than or equal to **85**)
✖ `N` is greater than or equal to **60** and less than or equal to **70**. (**90** is greater than or equal to **60** and not less than or equal to **70**)
✖ `N` is less than **60**. (**90** is not less than **60**)

The output should be **A** as `N` is greater than **85**.

Solution Code:marks = float(input())

if marks > 85:
 print(""A"")
elif marks > 70:
 print(""B"")
elif marks >= 60:
 print(""C"")
else:
 print(""F"")"
80870df2-37d6-40fa-85c5-398df686c10e,"Write a program that reads the number `N` and prints the name of the polygon based on the `N` number of sides.

<SingleLineNote>
A polygon is a closed shape made of straight lines that has three or more sides and angles.
</SingleLineNote>

The below images are examples of a **Polygon** which contains three or more sides.

<img src=""https://new-assets.ccbp.in/frontend/content/programming-foundations/Name_of_the_Polygon.png"" alt=""Polygons"">

----

**Input**  
  
The input will be a single line containing an integer `N` representing the number of sides.

----

**Output**

The output should be a single line containing a string representing the name of the polygon.


**Not Polygon** should be printed if the given number of sides is less than **3**.

**Triangle** should be printed if the given number of sides is equal to **3**.

**Quadrilateral** should be printed if the given number of sides is equal to **4**.

**Pentagon** should be printed if the given number of sides is equal to **5**.

**Big Polygon** should be printed if the given number of sides is greater than **5**.

----

**Explanation**  
  
For example, if the given number of sides `N = 4`,

✖ `N` is less than **3**. (**4** is not less than **3**)
✖ `N` is equal to **3**. (**4** is not equal to **3**)
✔ `N` is equal to **4**. (**4** is equal to **4**)
✖ `N` is equal to **5**. (**4** is not equal to **5**)
✖ `N` is greater than **5**. (**4** is not greater than **5**)

The output should be **Quadrilateral** as the number of sides is equal to **4**.

For example, if the given number of sides `N = 2`,

✔ `N` is less than **3**. (**2** is less than **3**)
✖ `N` is equal to **3**. (**2** is not equal to **3**)
✖ `N` is equal to **4**. (**2** is not equal to **4**)
✖ `N` is equal to **5**. (**2** is not equal to **5**)
✖ `N` is greater than **5**. (**2** is not greater than **5**)

The output should be **Not Polygon** as the number of sides is less than **3**.

Solution Code:number_of_sides = int(input())

if number_of_sides < 3:
 print(""Not Polygon"")
elif number_of_sides == 3:
 print(""Triangle"")
elif number_of_sides == 4:
 print(""Quadrilateral"")
elif number_of_sides == 5:
 print(""Pentagon"")
else:
 print(""Big Polygon"")"
eb4718ff-e96a-45f1-abb1-a35cc0e9747b,"Write a program that reads three numbers `A`, `B`, and `C`, and prints the greatest number among the three given numbers.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.
The third line of input contains an integer representing `C`.

---

#### Output

The output should be a single line containing an integer that the greatest number among the three given numbers.

---

#### Explanation

For example, if the given numbers are `A = 10`, `B = 15`, and `C = 20`,

* `B` is greater than `A`. (**15** is greater than **10**)
* `B` is less than `C`. (**15** is less than **20**)
* So, `C` is greater than `A` and `B`.

The output should be **20**.

<br/>

For example, if the given numbers are `A = -10`, `B = 59`, and `C = 34`,

* `B` is greater than `A`. (**59** is greater than **-10**)
* `B` is greater than `C`. (**59** is greater than **34**)
* So, `B` is greater than `A` and `C`.

The output should be **59**.

Solution Code:first_number = int(input())
second_number = int(input())
third_number = int(input())

is_first_greatest = (first_number > second_number) and (first_number > third_number)

if is_first_greatest:
 print(first_number)
else:
 is_second_greatest = (second_number > third_number)

 if is_second_greatest:
 print(second_number)
 else:
 print(third_number)"
ac3de62a-4f34-49af-a5bd-7718d4ad9c2f,"Write a program that reads a number `N` and checks if the remainder is **0** or **1** when `N` is divided by **11**.

Print **Special Eleven** if the remainder is **0** or **1** when `N` is divided by **11**. Otherwise, print **Normal Number**.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing a string. **Special Eleven** should be printed if the remainder is **0** or **1** when `N` is divided by **11**. Otherwise, **Normal Number** should be printed.

---

#### Explanation

For example, if the given number is `N = 22`,

The output should be **Special Eleven** as the remainder is **0** when `N` is divided by **11**.

<br/>

For example, if the given number is `N = 23`,

The output should be **Special Eleven** as the remainder is **1** when `N` is divided by **11**.

<br/>

For example, if the given number is `N = 15`,

- The remainder is **4** when `N` is divided by **11**. (**4** is **not** equal to **0** or **1**)

The output should be **Normal Number** as the remainder is **4** (**not** equal to **0** or **1**) when `N` is divided by **11**.

Solution Code:number = int(input())

is_multiple_of_11 = ((number % 11) == 0)
is_one_more_than_multiple_of_11 = ((number % 11) == 1)

if is_multiple_of_11 or is_one_more_than_multiple_of_11:
    print(""Special Eleven"")
else:
    print(""Normal Number"")
"
15fd9e3f-f2c0-4ed3-baa8-47033c950fc2,"Write a program that reads a two-digit number `N` and checks if any of the given conditions is satisfied.

- The number `N` is divisible by **9**.
- One of the digits of the number `N` is equal to **9**.

Print **Lucky Number** if any of the given conditions is satisfied. Otherwise, print **Unlucky Number**.


<MultiLineNote>

The number `N` is divisible by **9**, if the remainder is **0** when `N` is divided by **9**.

</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing a string. **Lucky Number** should be printed if any of the given conditions is satisfied. Otherwise, **Unlucky Number** should be printed.

---

#### Explanation

For example, if the given number is `N = 18`,

✔ The number `N` is divisible by **9**. (**18** is divisible by **9**)
✖ One of the digits of the number `N` is equal to **9**. (**1**, **8** are **not** equal to **9**)

The output should be **Lucky Number** as one of the given conditions is satisfied.

Solution Code:number = int(input())
is_multiple_of_9 = (number % 9 == 0)

number = str(number)

first_digit = int(number[0])
second_digit = int(number[1])

is_first_digit_9 = (first_digit == 9)
is_second_digit_9 = (second_digit == 9)

is_any_digit_9 = is_first_digit_9 or is_second_digit_9

if is_any_digit_9 or is_multiple_of_9:
    print(""Lucky Number"")
else:
    print(""Unlucky Number"")"
fe4dd7a1-d877-4d13-9ef3-e80c9bbcf1c8,"Write a program that reads a two-digit number `N` and checks if any of the given conditions is satisfied.

- The sum of digits of `N` is equal to **7**.
- One of the digits of `N` is equal to **7**.
- `N` is divisible by **7**.

Print **Special Number** if any of the given conditions is satisfied. Otherwise, print **Normal Number**.

---

#### Input

The input will be a single line containing a two-digit integer representing `N`.

---

#### Output

The output should be a single line containing a string. **Special Number** should be printed if any of the given conditions is satisfied. Otherwise, **Normal Number** should be printed.

---

#### Explanation

For example, if the given two-digit number is `N = 67`

✖ The sum of digits of `N` is equal to **7**. (`6 + 7 = 13`, **13** is **not** equal to **7**)
✔ One of the digits of `N` is equal to **7**. (**6**, **7** are digits of **67**. **7** is equal to **7**)
✖ `N` is divisible by **7**. (**67** is **not** divisible by **7**)

The output should be **Special Number** as one of the given conditions is satisfied.

Solution Code:number = input()

first_digit = int(number[0])
second_digit = int(number[1])

sum_of_two_digits = (first_digit + second_digit)
is_sum_equal_to_7 = (sum_of_two_digits == 7)

is_one_digit_is_7 = ((first_digit == 7) or (second_digit == 7))

is_multiple_of_seven = ((int(number) % 7) == 0)

if (is_sum_equal_to_7 or is_one_digit_is_7) or is_multiple_of_seven:
    print(""Special Number"")
else:
    print(""Normal Number"")"
1a493673-0d1c-4708-ae6a-52f105e44349,"Write a program that reads a two-digit number `N` and checks if `N` is divisible by both the digits of `N`.

Print the double of `N` if `N` is divisible by both the digits of `N`. Otherwise, print `N`.

<MultiLineNote>

The double of `N` is calculated as `N * 2`.

**Example:** `N = 15`

- The double of **15** is **30** (`15 * 2 = 30`).

</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing an integer. The double of `N` should be printed if `N` is divisible by both the digits of `N`. Otherwise, `N` should be printed.

---

#### Explanation

For example, if the given number is `N = 15`,

The digits of `N` are **1** and **5**.

✔ `N` is divisible by **1**. (**15** is divisible by **1**)
✔ `N` is divisible by **5**. (**15** is divisible by **5**)

As `N` is divisible by both the digits of `N`, print the double of `N`.

The output should be **30** as the double of `N` is **30** (`15 * 2 = 30`)

<br/>

For example, if the given number is `N = 26`,

The digits of `N` are **2** and **6**.

✔ `N` is divisible by **2**. (**26** is divisible by **2**)
✖ `N` is divisible by **6**. (**26** is **not** divisible by **6**)

As `N` is **not** divisible by both the digits of `N`, print `N`.

The output should be **26**.


Solution Code:number = input()

first_digit = int(number[0])
second_digit = int(number[1])

number = int(number)

is_divisible_by_first_digit = (number % first_digit) == 0
is_divisible_by_second_digit = (number % second_digit) == 0

is_divisible_by_both_digits = is_divisible_by_first_digit and is_divisible_by_second_digit

if is_divisible_by_both_digits:
    print(number * 2)
else:
    print(number)

"
0c07412e-414a-41a7-8af8-1da54a861e45,"Write a program that reads a string `S` and checks if all the given conditions are satisfied.

- The first three characters of `S` is **NXT**.
- The remaining characters of `S` contain a Number. Number is divisible by **2** or **7**.

Print **Special String** if all the given conditions are satisfied. Otherwise, print **Not a Special String**.


<MultiLineQuickTip>

Make sure the number is converted to an **integer** before doing any operations like Division (`/`), Remainder (`%`), etc.

**Example:** `S = NXT1234` 

- The number in **NXT1234** is **1234**. 
- **1234** should be converted to an integer before doing any operations.

</MultiLineQuickTip>

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a string. **Special String** should be printed if all the given conditions are satisfied. Otherwise, **Not a Special String** should be printed.

---

#### Explanation

For example, if the given string is `A = NXT1234`,

✔ The first three characters of `S` is **NXT**. (The first three characters of **NXT1234** is equal to **NXT**)
✔ The remaining characters of `S` is divisible by **2** or **7**. (The remaining characters of **NXT1234** is **1234**. **1234** is divisible by **2**)

The output should be **Special String** as all the given conditions are satisfied.


Solution Code:string = input()

first_3_characters = string[0:3]

is_equal = (first_3_characters == ""NXT"")

number = string[3:]
number = int(number)

is_divisible_by_2 = (number % 2 == 0) 
is_divisible_by_7 = (number % 7 == 0)
is_divisible_by_2_or_7 = is_divisible_by_2 or is_divisible_by_7

result = is_equal and is_divisible_by_2_or_7

if result:
 print(""Special String"")
else:
 print(""Not a Special String"")"
ff372bc1-f0b9-4a9c-9e02-28a4270ca8b7,"Write a program that reads two numbers `A` and `B` and prints the Quotient and Remainder when `A` is divided by `B`.

<MultiLineNote>

For Example, if **5** is divided by **2** (**5/2**),

_Divisor <--_  2 ) 5 ( 2  _--> Quotient_
                           _4_      
                    _---------_
                           _1_  _--> Remainder_
                         
- Quotient is **2** (Quotient should be an integer).
- Remainder is **1**

</MultiLineNote>

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The first line of output should be an integer that is the Quotient.
The second line of output should be an integer that is the Remainder.

---

#### Explanation

For example, if the given numbers are `A = 5` and `B = 2`,

- The Quotient is **2** when **5** is divided by **2**.
- The Remainder is **1** when **5** is divided by **2**.

The output should be,

```
2
1
```


Solution Code:first_number = int(input())
second_number = int(input())

quotient = first_number / second_number
quotient = int(quotient)
remainder = first_number % second_number

print(quotient)
print(remainder)"
c2f15213-5553-4af4-86a3-2392dde450f3,"Write a program to print the smallest value among the three numbers `A`, `B`, and `C`.

---

#### Input

The first line is an integer `A`.
The second line is an integer `B`.
The third line is an integer `C`.

---

#### Explanation

In the given values `A = 6`, `B = 5`, `C = 4`. `4` is the smallest value among the three. So the output should be `4`.

Solution Code:a=int(input())
b=int(input())
c=int(input())

if (a<b and a<c):
    print(a)
else:
    if (b<c):
        print(b)
    else:
        print(c)"
5e2c09c4-8b68-49ef-8eb3-a37838ee09aa,"Write a program that reads a year `Y` and checks if the year `Y` is a leap year. A year is a leap year if any of the given conditions are satisfied.

- `Y` is divisible by **400**.

- `Y` is divisible by **4**, and not divisible by **100**.

Print **True** if any of the given conditions are satisfied. Otherwise, print **False**.

---

#### Input

The input will be a single line containing an integer representing `Y`.

---

#### Output

The output should be a single line containing a boolean value. **True** should be printed if any of the given conditions are satisfied. Otherwise, **False** should be printed.

---


**Explanation**

For example, if the given `Y = 2016`,

✖ `Y` is divisible by **400**. (The remainder is **16** when `2016` is divided by `400`) 

✔ `Y` is divisible by **4** and not divisible by **100**. (The remainder is **0** when `2016` is divided by `4` and the remainder is **16** when `2016` is divided by `100`)

As one of the given conditions is satisfied,

The output should be **True**.

---

For example, if the given `Y = 1800`,

✖ `Y` is divisible by **400**. (The remainder is **200** when `1800` is divided by `400`) 

✖ `Y` is divisible by **4** and not divisible by **100**. (The remainder is **0** when `1800` is divided by `4` and the remainder is **0** when `1800` is divided by `100`)

As both the given conditions are not satisfied,

The output should be **False**.

Solution Code:year = int(input())

if year % 400 == 0:
    print(False)
if year % 4 == 0 and year % 100 != 0:
    print(True)
else:
    print(False)"
e9e4ecda-f5a5-4c01-bbc8-29bfd71fa694,"Given the number of the month, write a program to print the name of the month.<hr><b>Input</b><br/><br/>The input will be a single line containing a integer N<hr><b>Output</b><br/><br/>If the given number of the month is 1, print &quot;January&quot;.<br/>If the given number of the month is 2, print &quot;February&quot;.<br/>If the given number of the month is 3, print &quot;March&quot;.<br/>If the given number of the month is 4, print &quot;April&quot;.<br/>If the given number of the month is 5, print &quot;May&quot;.<br/>If the given number of the month is 6, print &quot;June&quot;.<br/>If the given number of the month is 7, print &quot;July&quot;.<br/>If the given number of the month is 8, print &quot;August&quot;.<br/>If the given number of the month is 9, print &quot;September&quot;.<br/>If the given number of the month is 10, print &quot;October&quot;.<br/>If the given number of the month is 11, print &quot;November&quot;.<br/>If the given number of the month is 12, print &quot;December&quot;.<br/>If the given number of the month is less than 1 or greater than 12, print &quot;Invalid Month Number&quot;.<hr><b>Explanation</b><br/><br/>For example, if the given number of month is 4, the output should be &quot;April&quot;.<br/>Similarly, if the given number of month is 13, the output should be &quot;Invalid Month Number&quot;.

Solution Code:n = int(input())

if n == 1 :
    print(""January"")
elif n == 2 :
    print(""February"")
elif n == 3 :
    print(""March"")
elif n == 4 :
    print(""April"")
elif n == 5 :
    print(""May"")
elif n ==6 :
    print(""June"")
elif n == 7 :
    print(""July"")
elif n == 8 :
    print(""August"")
elif n == 9 :
    print(""September"")
elif n == 10 :
    print(""October"")
elif n == 11 :
    print(""November"")
elif n ==12 :
    print(""December"")
else :
    print(""Invalid Month Number"")"
8f041608-53ca-44a3-be3a-2335300ddfd5,"Given a positive integer, write a program to print the digit in its one&#x27;s place<br/>.<hr><b>Input</b><br/><br/>The input will be a single line containing a positive integer (N).<hr><b>Output</b><br/><br/>The output should be a single line containing the digit in the one&#x27;s place of the given positive integer.<hr><b>Explanation</b><br/><br/>For example, if the given N is 25, the digit in the one&#x27;s place is 5.

Solution Code:n = input()

length_of_n = len(n)

print(n[length_of_n - 1])"
0151e5af-79ef-431b-939d-57a8565d2f56,"Write a program that reads a day number and checks if the day is **Week Start**, **Weekend**, or **Midweek**.

| Day Number | Day |
| --- | --- |
| 1 | Monday |
| 2 | Tuesday |
| 3 | Wednesday |
| 4 | Thursday |
| 5 | Friday |
| 6 | Saturday |
| 7 | Sunday |


For example, 

If the given day number is **1**, the day name is **Monday**, 
If the given day number is **2**, the day name is **Tuesday**, etc.

<MultiLineNote>

**Monday** and **Tuesday** are **Week Start**.

**Wednesday**, **Thursday** and **Friday** are **Midweek**.

**Saturday** and **Sunday** are **Weekend**.
</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing the day number.

---

#### Output

The output should be a single line containing a string. **Week Start** should be printed if the weekday is Monday or Tuesday. **Weekend** should be printed if the weekday is Saturday or Sunday. Otherwise, **Midweek** should be printed.

---

#### Explanation

For example, if the given day number is **6**,

- For day number **6** the day's name is **Saturday**. **Saturday** is the **Weekend**.

The output should be **Weekend**.
<br/>

For example, if the given day number is **1**,

- For day number **1** the day's name is **Monday**. **Monday** is the **Week Start**.

The output should be **Week Start**.

Solution Code:day_number = int(input())

if day_number == 1 or day_number == 2:
    print(""Week Start"")
elif day_number == 6 or day_number == 7:
    print(""Weekend"")
else:
    print(""Midweek"")"
92de5e0d-de18-4b79-8d73-36ac6eb7f7bd,"Write a program to remove duplicate numbers in the list.<hr><b>Input</b><br/><br/>The input will be a single line containing space-separated integers.<hr><b>Output</b><br/><br/>The output should be a single line containing the list without duplicates in ascending order.<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;5 10 15 20 10 30 15&quot;, as the numbers 10 and 15 are repeated more than once, your code should remove the duplicate numbers. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[5, 10, 15, 20, 30]
</code></pre>

Solution Code:num_list = input().split()

new_list = []
for item in num_list:
 num = int(item)
 new_list.append(num)

num_set = set(new_list)
num_list = list(num_set)
num_list.sort()
print(num_list)"
b8a1cfa9-8c69-42ac-ad93-60ebbe86c4d4,"A function is given in the prefilled code that takes a number `N` as an argument.

Write a program that returns all the prime numbers from **1** to `N` separated by a space.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing a string of prime numbers from **1** to `N` separated by a space as shown in the sample output.

---

#### Explanation

For example, if the given number is `N = 8`,

- The numbers from **1** to **8** are **1**, **2**, **3**, **4**, **5**, **6**, **7**, and **8**.
- Prime numbers from **1** to **8** are **2**, **3**, **5**, and **7**.

The output should be, 

```
2 3 5 7
```

Solution Code:def is_prime(n):
    if(n == 1 or n == 0):
        return False
        
    for i in range(2, n):
        if(n % i == 0):
            return False
            
    return True
 
n = int(input())
prime_numbers_list = []

for i in range(1, n + 1):
    if(is_prime(i)):
        prime_numbers_list.append(str(i))

prime_numbers_separated_by_spaces = "" "".join(prime_numbers_list)
print(prime_numbers_separated_by_spaces)"
fc90721e-b71f-442d-a476-22b28d85f2c5,"You are given space-separated integers as input. Write a program to print the maximum number among the given numbers.

---

#### Input

The first line of input contains space-separated integers.

---

#### Explanation

In the example, the integers given are `1, 0, 3, 2, 9, 8`. The maximum number present among them is `9`.
So, the output should be `9`.

Solution Code:no_of_inputs = input().split("" "")
first_input = no_of_inputs[0]
greatest_num = int(first_input)
for i in no_of_inputs:
    num = int(i)
    if num > greatest_num:
        greatest_num = num
print(greatest_num)  "
75397cae-7e20-4ea8-a94f-2d8951344aa7,"You are given space-separated integers as input. Write a program to print the average of the given numbers.

---

#### Input

The first line of input contains space-separated integers.

---

#### Output

The output should be a float value rounded up to two decimal places.

---

#### Explanation

In the example, input is `1, 0, 2, 5, 9, 8`. The sum of all numbers present in the list is `25`, and their average is `25/6`.

So, the output should be `4.17`.

Solution Code:numbers = input()
split_numbers = numbers.split("" "")
sum_of_numbers = 0
for nums in split_numbers:
    nums = int(nums)
    sum_of_numbers += nums 
avarage = sum_of_numbers / len(split_numbers)
print(round(avarage, 2))"
958d73a5-6bc6-4d53-a354-738350ad52bd,"Write a function with the name validate_atm_pin_code that takes a word as an argument.<br/>ATM PIN is considered valid only if the given word contains<br/> - Exactly 4 or 6 characters<br/> - All the characters should be digits<hr><b>Input</b><br/><br/>The input will be a single line containing a string.<hr><b>Output</b><br/><br/>The output should be a single line containing either &quot;Valid PIN Code&quot; or &quot;Invalid PIN Code&quot;.<hr><b>Explanation</b><br/><br/>For example, if the given word is &quot;9837&quot;, the output should be &quot;Valid PIN Code&quot;, as it contains exactly four characters and all the characters are digits.<br/><br/>Whereas, if the given word is &quot;A289h4&quot;, the output should be &quot;Invalid PIN Code&quot;, though the given word contains exactly six characters, all the characters are not digits.

Solution Code:def validate_atm_pin_code(pin):
    length_pin = len(pin) 
    valid_pin = length_pin == 4 or length_pin == 6
    pin = pin.isdigit()
    if valid_pin and pin :
        msg = ""Valid PIN Code"" 
    else:
        msg = ""Invalid PIN Code"" 
    return msg
pin = input()
result = validate_atm_pin_code(pin) 
print(result)"
e4e7c927-56d5-48ea-8f05-f00a639bd573,"Write a function with the name calculate_bill that takes the bill amount as an argument.<br/> - If the bill amount is less than 500, the discount should be 5%.<br/> - If the bill amount is greater than or equal to 500 and less than 2500, the discount should be 10%.<br/> - If the bill amount is greater than or equal to 2500, the discount should be 20%.<br/>Calculate the bill amount with the appropriate discount and print it.<hr><b>Input</b><br/><br/>The input will be a single line containing a positive integer.<hr><b>Output</b><br/><br/>The output should be a single line containing the bill amount.<br/>Note: Round of the bill amount to three decimal places.<hr><b>Explanation</b><br/><br/>For example, if the given bill amount is 1500, the 10% discount should apply (which is 150), after deducting the discount amount, print the bill amount. So the output should be 1350.0<br/><br/>For example, if the given bill amount is 250, the 5% discount should apply (which is 12.5), after deducting the discount amount, print the bill amount. So the output should be 237.5

Solution Code:def calculate_bill(amount):
    # Complete this function
    if amount < 500 :
        bill = amount - (amount * 0.05)
    elif (amount >= 500) and (amount < 2500) :
        bill = amount - (amount * 0.1)
    else:
        bill = amount - (amount * 0.2)
        
    bill = round(bill, 3)
    return bill 

amount = int(input())
# Call the calculate_bill function
result = calculate_bill(amount)
print(result)"
f6bf17af-a3f1-40d6-a620-d1a6028f698c,"For this problem, the prefilled code will contain a function. Write a program to count the number of uppercase and lowercase letters in the given word.<hr><b>Input</b><br/><br/>The input will be a single line containing a string.<hr><b>Output</b><br/><br/>The first line of output should contain the number of uppercase letters in the given word.<br/>The second line of output should contain the number of lowercase letters in the given word.<hr><b>Explanation</b><br/><br/>For example, if the given word is &quot;MasTer&quot;, your code should print the number of uppercase and lowercase letters. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">2
4
</code></pre>

Solution Code:def count_of_lowercase_and_uppercase_letters(arg_1):
    # Complete this function
    count_of_lowercase = 0
    count_of_uppercase = 0

    for character in arg_1:
        if character.upper() == character:
            count_of_uppercase += 1
        else:
            count_of_lowercase += 1

    print(count_of_uppercase)
    print(count_of_lowercase)


word = input()
# Call the count_of_lowercase_and_uppercase_letters function
count_of_lowercase_and_uppercase_letters(word)
"
e0e56e81-ffbe-45b3-a500-389e9fd35e28,"A function is given in prefilled code that takes a string `S` as an argument.

Write a program that checks if the given string `S` is valid.

Return **Valid String** if the first character of `S` is a digit or the number of characters present in `S` is greater than or equal to **6**. Otherwise, return **Invalid String**.

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a string. **Valid String** should be printed if the length of `S` is greater than or equal to **6** or the first character of `S` is a digit. Otherwise, **Invalid String** should be printed.

---

#### Explanation

For example, if the given string is `S = ""terminal""`,

✔ The length of `S` is greater than **6**. (Length of `S` is **8**, `8 > 6`)
✖ The first character is a digit. (The first character is the alphabet **t**)

The output should be **Valid String**, as the length of `S` is greater than **6**.

For example, if the given string is `S = ""test""`,

✖ The length of `S` is greater than **6**. (Length of `S` is **4**, `4 < 6`)
✖ The first character is a digit. (The first character is the alphabet **t**).

The output should be **Invalid String**.

Solution Code:def valid_string(string):
 valid_length = len(string) >= 6
 is_first_character_digit = string[0].isdigit()
 
 if valid_length or is_first_character_digit:
 statement = ""Valid String""
 else:
 statement = ""Invalid String""
 
 return statement
 
string = input()

result = valid_string(string)

print(result)"
6126f0fc-6d1e-467b-ab0b-393b7b097d41,"Write a function with the name get_speed_status that takes the speed (S) as an argument.<br/> - If the speed is less than 60, it should return &quot;Normal&quot;.<br/> - If the speed is greater than or equal to 60 and less than 80, it should return &quot;Warning&quot;.<br/> - If the speed is greater than or equal to 80, it should return &quot;Over Speed&quot;.<hr><b>Input</b><br/><br/>The input will be a single line containing a positive integer (S).<hr><b>Output</b><br/><br/>The output should be a single line containing the message according to the above conditions.<hr><b>Explanation</b><br/><br/>For example, if the given speed is 75, the output should be &quot;Warning&quot;, as 75 is greater than 60 and less than 80.<br/><br/>For example, if the given speed is 50, the output should be &quot;Normal&quot;, as 50 is less than 60.

Solution Code:def get_speed_status(speed):
 if speed < 60:
 msg = ""Normal""
 elif (speed >= 60) and (speed < 80):
 msg = ""Warning""
 else:
 msg = ""Over Speed""
 return msg


speed = int(input())
result = get_speed_status(speed)
print(result)"
058a6895-391e-4c2b-8086-37b042009699,"A typical car can hold four passengers and one driver, allowing five people to travel around.<br/>Write a function with the name number_of_cars_needed that takes a number of people (N) and return how many cars are needed to seat everyone comfortably.<hr><b>Input</b><br/><br/>The input will be a single line containing an integer.<hr><b>Output</b><br/><br/>The output should be a single line containing the number of cars needed.<hr><b>Explanation</b><br/><br/>For example, if the given number of people is 5, the output should be 1, as five people can travel in a car.

Solution Code:def number_of_cars_needed(no_of_people):
    no_of_cars = no_of_people // 5
    remaining_people = no_of_people % 5 
    if remaining_people > 0:
        no_of_cars += 1 
    print(no_of_cars)

no_of_people = int(input())
number_of_cars_needed(no_of_people)"
e77b2237-c9aa-48f4-8746-b2236b3775e2,"Given a word, write a function with the name get_lower_and_upper_case_letters that takes a word and prints all the uppercase and lowercase letters in the first line and the second line respectively.<hr><b>Input</b><br/><br/>The input will be a single line containing a string.<br/>Note: There will not be any special characters in the given string.<hr><b>Output</b><br/><br/>The first line of output should be a string containing all the uppercase letters in the given word.<br/>The second line of output should be a string containing all the lowercase letters in the given word.<br/>Note: The order of letters in the output should be same as the input string.<hr><b>Explanation</b><br/><br/>For example, if the given word is &quot;PreMium&quot;, your function should print all the uppercase letters in the first line and all the lowercase letters in the second line. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">PM
reium
</code></pre>

Solution Code:def get_lower_and_upper_case_letters(word):
    # Complete this function
    uppercase_letters = """"
    lowercase_letters = """"
    
    for each_char in word:
        if each_char.isupper():
            uppercase_letters += each_char
        if each_char.islower():
            lowercase_letters += each_char
    print(uppercase_letters)
    print(lowercase_letters)


word = input()
get_lower_and_upper_case_letters(word) # Call the get_lower_and_upper_case_letters function"
e1d88ca1-d7b0-41b2-b456-063398b40c0c,"For this problem, the prefilled code will contain a function. Write a function with two arguments that prints the message as expected<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">Akhil is 15 years old.
</code></pre><hr><b>Input</b><br/><br/>The first line of input will contain a string.<br/>The second line of input will contain a positive integer.<hr><b>Output</b><br/><br/>The output should be a single line containing the message.<hr><b>Explanation</b><br/><br/>For example, if the given person name is &quot;Akhil&quot; and the age is 15, your code should print the message as shown below<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">Akhil is 15 years old.
</code></pre>

Solution Code:def message(arg_1, arg_2):
 msg = arg_1 + "" is "" + str(arg_2) + "" years old.""
 print(msg)


name = input()
age = int(input())
message(name, age)"
ae66aafe-48ae-423c-90d1-d2bc8cc0c7f5,"Complete the given **Car** class by adding new features by following the given instructions.

**Existing _Car_ class**:

The existing  **Car** class has only a _pass_ statement. Remove _pass_ statment and add the new features as mentioned in the given instructions. 

<details>

<summary>**Features to be added to **_Car_** class**</summary>
- **Add below attributes**
    - The **Car** class should have the following attributes
        - color
        - max_speed
        - acceleration
        - tyre_friction
</details>

**Points to Note:**

 - The output of the testcase **Checking Default Tests** is given by the `default_test` function in the prefilled code.
 - This Coding question does not have the usual input/output testcases. The class defined by you will be tested internally whether the attributes are present or not. So in testcases results you will be shown the rough description of the tests that will be verified.

Solution Code:class Car:
    def __init__(self, color, max_speed, acceleration, tyre_friction):
        self.color = color
        self.max_speed = max_speed
        self.acceleration = acceleration
        self.tyre_friction = tyre_friction


def default_test():
    car = Car(color=""Red"", max_speed=250, acceleration=10, tyre_friction=3)
    print(car.color)
    print(car.max_speed)
    print(car.acceleration)
    print(car.tyre_friction)"
7070109a-bcb0-4aae-98db-6e99e8bf2174,"Given a number `N`, write a program to read `N` inputs and print the given numbers until you encounter a multiple of **5**, each on a new line.

---

#### Input

The first line of input contains an integer representing `N`.
The next `N` lines of input contain integers.

---

#### Output

The output should contain the given numbers until you encounter a multiple of **5**, each on a new line.

---

#### Explanation

For example, if the given number is `N = 6`,

- The given **6** numbers are,

```
1
2
3
5
9
6
```

- After **3**, we encountered **5**, which is a multiple of **5**.

The output should be,

```
1
2
3

```

Solution Code:n = int(input())

for i in range(0,n):
    m = int(input())
    if (m%5) != 0 :
        print(m)
    else:
        break"
c7e8c179-903a-40d7-8c6c-494aa94d0eeb,"Given two numbers `M` and `N`, write a program to print the **Greatest Common Divisor (G.C.D)** of the numbers `M` and `N`.

<MultiLineNote>
- The greatest common divisor (G.C.D) of two numbers is the largest positive factor that perfectly divides the two given numbers.
- **Factors of N:**
  - If a number `N` is divisible by `X`, then `X` is a factor of `N`.
      - **Example**:
            - If `N = 15` and `X = 3`, then **3** is a factor of **15** as **15** is divisible by **3**.
            - If `N = 15` and `X = 7`, then **7** is **not** a factor of **15** as **15** is not divisible by **7**.
</MultiLineNote>

<MultiLineQuickTip>
The greatest common divisor (G.C.D) will be between 1 and the minimum number of the given two numbers.
</MultiLineQuickTip>
---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the **GCD** of the numbers `M` and `N`.

---

#### Explanation

For example, if the given numbers are `M = 4` and `N = 6`,

- The factors of **4** are **1**, **2** and **4**.
- The factors of **6** are **1**, **2**, **3** and **6**.
- The common factors of **4** and **6** are **1** and **2**.
- The greatest common divisor of the two numbers **4** and **6** is **2**(`2 > 1`).

The output should be **2**.

Solution Code:m = int(input())
n = int(input())

if m > n:
    smallest_number = n
else:
    smallest_number = m

gcd = smallest_number
for i in range(1, smallest_number+1):
    if ((m % i) == 0) and ((n % i) == 0):
        gcd = i

print(gcd)"
bf724fc9-164e-4450-91e5-33035de56334,"Given a sentence `S`, write a program to print a new sentence by removing vowels from the given sentence `S`.

<MultiLineNote>

- Vowels are **A**, **E**, **I**, **O**, **U**, **a**, **e**, **i**, **o** and **u**.
- Consider both uppercase and lowercase vowels.
</MultiLineNote>

---

#### Input

The input will be a single line containing a string representing `S`. 

---

#### Output

The output should be a single line containing a string obtained by removing vowels from the given sentence.

---

#### Explanation

For example, if the given sentence is **Speak louder**

- The vowels in the given sentence are **e, a, o, u,** and **e**. (Sp**ea**k l**ou**d**e**r).
- After removing the vowels from the given sentence (**Sp**<s>ea</s>**k l**<s>ou</s>**d**<s>e</s>**r**), the new sentence is **Spk ldr**. 

The output should be **Spk ldr**.

Solution Code:s = input()

result = """"

for each_character in s:
    lowercase_character = each_character.lower()
    is_vowel = (lowercase_character == 'a') or (lowercase_character == 'e') or (lowercase_character == 'i') or (lowercase_character == 'o') or (lowercase_character == 'u')
    
    if is_vowel:
        continue
    
    result = result + each_character

print(result)"
dac0dd05-e274-4011-9967-ac1df0682ac0,"Given a number `N`, write a program to print the count of pairs containing numbers `A`, `B` from **1** to `N` such that the sum of the numbers is equal to `N`, where `A` < `B`.

`A` is the first number, `B` is the second number in a pair.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing an integer which is the count of pairs whose sum is equal to `N`.

---

#### Explanation

For example, if the given number is `N = 7`,

- The possible pairs from **1** to **7** where `A < B` are

```
(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7),
(2, 3), (2, 4), (2, 5), (2, 6), (2, 7),
(3, 4), (3, 5), (3, 6), (3, 7),
(4, 5), (4, 6), (4, 7),
(5, 6), (5, 7),
(6, 7)
```

- From the possible pairs, the pairs (**A**, **B**) whose sum (`A + B`) is equal to **7** (`N`) are,

```
(1, 6)
(2, 5)
(3, 4)
```

- The count of pairs whose sum is equal to **7** is **3**.

The output should be **3**.


Solution Code:n = int(input())

number_of_pairs = 0

for num in range(1, n):
    if n - num < n  and num < n - num:
        number_of_pairs = number_of_pairs + 1
print(number_of_pairs)"
1a68a964-dfb4-4c41-bd86-b98b94a80604,"Given a number `N`, write a program that reads `N` inputs and prints the **Armstrong Numbers** in the given inputs each on a new line.

<MultiLineNote>

A number `N` is an Armstrong Number, if the sum of each digit to the power of `L` is equal to `N`. Where `L` is the count of digits in `N`.

For example if the given number `N = 153`,

- There are **3** (`L = 3`) digits in **153** are **1**, **2**, **3** .
- The sum of each digit in **153** to the power of **3** is,
 - Sum = (1 <sup> 3</sup> )+ (5 <sup> 3 </sup>) +( 3 <sup> 3 </sup>) = 1 + 125 + 27 = **153**

The sum of each digit in **153** to the power of **3** is equal to **153**.
So, **153** is an **Armstrong Number**.

</MultiLineNote>

---

#### Input

The first line of input contains an integer representing `N`.
The next `N` lines of input contain integers.

---

#### Output

The output should contain all the **Armstrong Numbers** in the given `N` inputs, each on a new line.

---

#### Explanation

For example, if the given number is `N = 4`,

- The **4** inputs are,

```
8
27
153
374

```
- The Armstrong numbers among **8**, **27**, **153** and **374** are **8** and **153**.
    
    - There is only **1** digit in **8** is **8**.
    - The sum of each digit in **8** to the power of **1** is **8**. (**8<sup>1</sup>**)
    - The sum of each digit in **8** to the power of **1** is equal to the number **8**.
    
    So, the number **8** is an **Armstrong number**.
    <br>
    - There are **3** digits in **153** are **1**, **5** and **3**.
    - The sum of each digit in **153** to the power of **3** is **153**. (**1<sup>3</sup>+5<sup>3</sup>+3<sup>3</sup>**).
    - The sum of each digit in **153** to the power of **3** is equal to the number **153**.
    
    So, the number **153** is an **Armstrong number**.
    

The output should be,

```
8
153
```

Solution Code:n = int(input())

for each_number in range(n):
 value = int(input())
 
 string = str(value)
 power = len(string)
 sum_of_digits = 0
 
 for integer_char in string:
 sum_of_digits = sum_of_digits + int(integer_char) ** power
 
 if sum_of_digits == value:
 print(value)"
e91a89bd-e77e-420a-a7bf-c5b5566ff42d,"Write a program to count Vowels and Consonants in string.<hr><b>Input</b><br/><br/>The input will be a single line containing a string s.<hr><b>Output</b><br/><br/>The first line of output should contain no of Vowels in the given string<br/>The second line of output should  contain no of Consonants in the given string<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;Good Morning&quot;<br/>Vowels in the string &quot;Good Morning&quot; are &quot;o, i&quot; and their count is 4.<br/>Remaining characters in the string are consonants their count is 7.<br/>The First line of output is 4\nThe second line of output is 7.

Solution Code:a=input()
vowel_list=[""A"",""E"",""I"",""O"",""U"",""a"",""i"",""e"",""o"",""u""]

for i in a:
    if i=="" "":
        a=a.replace("" "","""")

vowel_count=0
constant_count=0
for i in a:
    if i in vowel_list:
        vowel_count+=1 
    else:
        constant_count+=1
print(vowel_count)
print(constant_count)"
29743f82-faad-488c-a805-926649b952fa,"Write a program to count even and odd numbers in given range [M, N]. Both M, N are inclusive in [M, N].<hr><b>Input</b><br/><br/>The first line of the input will be an integer(M).<br/>The Second line of the input will be an integer(N).<hr><b>Output</b><br/><br/>The first line of output should be a number of odds count.<br/>The second line of output should be a number of even counts.<hr><b>Explanation</b><br/><br/>For example, if the given range is 2 to 11 <br/>odds numbers in the range are 3, 5, 7, 9, 11 then count is 5.<br/>even numbers in the range are 2, 4, 6, 8, 10 then count is 5.

Solution Code:m = int(input())
n = int(input())
even = 0
odd = 0
for i in range(m, n+1):
    if i % 2 == 0:
        even += 1
    else:
        odd += 1
print(odd)
print(even)"
bd8479c0-f256-4fbb-9495-9b1f2fb13320,"Write a program to check whether the given number is a Prime number or not.

<MultiLineNote>
A prime number is a number that has only two factors. The two factors of a prime number are 1 and itself. 
</MultiLineNote>

---

#### Input

The input will be a single line containing an integer.

---

#### Output

The output should be a single line containing a string.`Prime Number` should be printed if the given number is a prime number. Otherwise `Not a Prime Number` should be printed.

---

#### Explanation

For example, if the given number is 5,

- The output should be `Prime Number`, as it is divisible only by itself and one.

For example, if the given number is 6,

- The output should be `Not a Prime Number`, as it is divisible by 1, 2, 3, and 6.

Solution Code:n = int(input())

if n > 1:
 factors = 0
else:
 factors = 1

for i in range(2, n):
 if (n % i) == 0:
 factors = factors + 1

if factors == 0:
 print(""Prime Number"")
else:
 print(""Not a Prime Number"")"
3957dc4a-6198-4356-a967-01364fb49d34,"Given a number `N`, write a program to find the count of even digits in `N`.

Print **Count of even digits is greater than two** if there are more than two even digits in the given number. Otherwise, print **Count of even digits is not greater than two**.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing a string. **Count of even digits is greater than two** should be printed if there are more than two even digits in the given number. Otherwise, **Count of even digits is not greater than two** should be printed.

---

#### Explanation

For example, if the given number is `N = 2563408`,

- The digits in the given number **2563408** are **2, 5, 6, 3, 4, 0** and **8**.
- The number of even digits in the given number is **5**. (**2**5**6**3**408**).
- There are more than **2** even digits in the given number. (`5 > 2`).

The output should be **Count of even digits is greater than two**, as the given number has more than two even digits.


Solution Code:n = input()

even_digits_count = 0

for each_digit in n:
    each_digit = int(each_digit)
    if each_digit % 2 == 0:
        even_digits_count = even_digits_count + 1

if even_digits_count > 2:
    print(""Count of even digits is greater than two"")
else:
    print(""Count of even digits is not greater than two"")"
e4b925bb-0404-406d-8998-77ef41923f61,"Write a program that reads a sentence `S` and prints the frequency of each word in the given sentence.

<MultiLineNote>

If the given sentence `S` is **Hello world Hello**,

- The frequency of **Hello** in the given sentence is twice.

- The frequency of **world** in the given sentence is once.

</MultiLineNote>

----

#### Input 
The input will be a single line containing a string representing a sentence `S`.

---

#### Output  

The output should be multiple lines with each line containing a word and its frequency in the given sentence seperated by colon-character (**`:`**) with the order of appearance in the given sentence. 

---

#### Explanation  

For example, If the given sentence `S = Hello world, welcome to python world`,

- `Hello` appears `once` in the sentence, so its frequency is **1**.
- `world` appears `twice` in the sentence, so its frequency is **2**.
- `welcome` appears `once` in the sentence, so its frequency is **1**.
- `to` appears `once` in the sentence, so its frequency is **1**.
- `python` appears `once` in the sentence, so its frequency is **1**.

So, the output should be,

```
Hello: 1  
world: 2  
welcome: 1  
to: 1  
python: 1
```
---

For example, If the given sentence `S = This is my book`,

- `This` appears `once` in the sentence, so its frequency is **1**.
- `is` appears `once` in the sentence, so its frequency is **1**.
- `my` appears `once` in the sentence, so its frequency is **1**.
- `book` appears `once` in the sentence, so its frequency is **1**.

So, the output should be,

```
This: 1  
is: 1  
my: 1  
book: 1  
```

Solution Code:words=input().split()
value={}
for word in words:
    if word in value:
        value[word] += 1 #increase the word count by 1 if already present in value dictionary
    else:
        value[word] = 1
    
for word ,fre in value.items():
    print(f""{word}: {fre}"")"
515ae61d-a1c7-418b-a53f-88a097f5795e,"Write a program that reads a sentence `S` and prints the frequency of each word in the given sentence sorted in alphabetical order.

<MultiLineNote>

If the given sentence `S` is **Hello world Hello**,

- The frequency of **Hello** in the given sentence is twice.

- The frequency of **world** in the given sentence is once.

</MultiLineNote>

----

#### Input 
The input will be a single line containing a string representing a sentence `S`.

---

#### Output  

The output should be multiple lines with each line containing a word and its frequency in the given sentence separated by colon-character (**`:`**), where words are sorted in `alphabetical order`. 

---

#### Explanation  

For example, If the given sentence `S = Hello world, welcome to python world`,

The words in the given sentence after sorting in alphabetical order are `Hello`,`python`,`to`,`welcome`,`world`, and `world`.

- `Hello` appears `once` in the sentence, so its frequency is **1**.
- `python` appears `once` in the sentence, so its frequency is **1**.
- `to` appears `once` in the sentence, so its frequency is **1**.
- `welcome` appears `once` in the sentence, so its frequency is **1**.
- `world` appears `twice` in the sentence, so its frequency is **2**.

So, the output should be,

```
Hello: 1
python: 1
to: 1
welcome: 1
world: 2
```
---

For example, If the given sentence `S = This is my book`,

The words in the given sentence after sorting in alphabetical order are `This`,`book`,`is`, and `my`.

- `This` appears `once` in the sentence, so its frequency is **1**.
- `book` appears `once` in the sentence, so its frequency is **1**.
- `is` appears `once` in the sentence, so its frequency is **1**.
- `my` appears `once` in the sentence, so its frequency is **1**.

So, the output should be,

```
This: 1  
book: 1
is: 1  
my: 1  
```

Solution Code:Sentence = input().split("" "")
set_a = set(Sentence)
dict_a = {}
for i in set_a:
    frequency = Sentence.count(i)
    dict_a[i] = frequency
    
list_a = sorted(dict_a.items())
dict_a = dict(list_a)
for i,j in dict_a.items():
    print(""{}: {}"".format(i,j))
"
1078b948-f7ba-4d96-b5c5-49c462ac42b2,"For this problem, the prefilled code will contain an MxN matrix. Write a program to print the list of elements of principal diagonal in the matrix.<hr><b>Input</b><br/><br/>The first line of input will contain two space-separated integers, denoting the M and N.<br/>The next M following lines will contain N space-separated integers, denoting the elements of each list.<hr><b>Output</b><br/><br/>The output should be a single line containing the list of principal diagonal elements.<hr><b>Explanation</b><br/><br/>For example, if the given M is 3 and N is 3, read the inputs in the next three lines. If the numbers given in the next three lines are the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">1 2 3
10 20 30
5 10 15
</code></pre><br/>The principal diagonal elements of the above matrix are (1, 20, 15). So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[1, 20, 15]
</code></pre>

Solution Code:def get_principal_diagonal_elements(matrix, m, n):
 diagonal_elements = []
 for i in range(m):
 if i < n:
 element = matrix[i][i]
 diagonal_elements.append(element)
 return diagonal_elements


def convert_string_to_int(list_a):
 new_list = []
 for item in list_a:
 num = int(item)
 new_list.append(num)
 return new_list


m, n = input().split()
m, n = int(m), int(n)
num_list = []

for i in range(m):
 list_a = input().split()
 list_a = convert_string_to_int(list_a)
 num_list.append(list_a)

diagonal_elements = get_principal_diagonal_elements(num_list, m, n)
print(diagonal_elements)"
429f38d3-4c2f-4576-a5e8-986b166a8c62,"An `M * N` matrix is given in the prefilled code.

Write a program that finds the maximum element in the matrix and prints all the elements of the corresponding row and the column that has the maximum element.

---

#### Input 
The first line of input contains two space-separated integers, representing **M** and **N**. 

The next **M** lines of input contain **N** space-separated integers, representing the elements of the matrix.

---

#### Output
The first line of output should be a **list** containing all the elements of the row that has the maximum element.  

The second line of output should be a **list** containing all the elements of the column that has the maximum element.

---

#### Explanation
For example, if the given `M = 3`, `N = 3`, and the given elements of the **M * N** matrix are,

```
    1 2 3
    10 20 30
    5 10 15
```

**30** is the maximum element in the given  **M * N** matrix, 

<img src=""https://s3.ap-south-1.amazonaws.com/new-assets.ccbp.in/frontend/content/programming-foundations/Image+Pasted+at+2023-4-4+18-27.png"" alt=""list rotation"">

In the given matrix the `2nd` row and the `3rd` column have the maximum element **30**.

The output should be, 

```
[10, 20, 30]
[3, 30, 15]
```

Solution Code:def convert_string_to_int(list_a):
 new_list = []
 for item in list_a:
 num = int(item)
 new_list.append(num)
 return new_list

m, n = input().split()
m, n = int(m), int(n)
num_list = []

for i in range(m):
 list_a = input().split()
 list_a = convert_string_to_int(list_a)
 num_list.append(list_a)

row_wise_max = [] # Maintain row-wise maximum
for row in num_list:
 row_wise_max.append(max(row))

maximum = max(row_wise_max)
row_index_containing_max = row_wise_max.index(maximum)

max_row = num_list[row_index_containing_max]
print(max_row)

column_index_containing_max = max_row.index(maximum)
max_column = []
for row in num_list:
 max_column.append(row[column_index_containing_max])
print(max_column)"
26ff7596-d2c9-442f-a9cf-48e695a8561b,"For this problem, the prefilled code will contain an MxN matrix. Write a program to print the transpose of the matrix.<br/>Transpose of a matrix is obtained by changing rows to columns and columns to rows.<hr><b>Input</b><br/><br/>The first line of input will contain two space-separated integers, denoting the M and N.<br/>The next M following lines will contain N space-separated integers, denoting the elements of each list.<hr><b>Output</b><br/><br/>The output should be N lines containing the transpose of the given matrix.<br/>Note: N is the length of a list in the matrix.<hr><b>Explanation</b><br/><br/>For example, if the given M is 3 and N is 3, read the inputs in the next three lines. If the numbers given in the next three lines are the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">1 2 3
10 20 30
5 10 15
</code></pre><br/>By changing rows to columns and columns to rows, the transpose of the above matrix should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[1, 10, 5]
[2, 20, 10]
[3, 30, 15]
</code></pre>

Solution Code:def get_transpose_of_matrix(matrix, m, n):
 transpose_matrix = []
 for i in range(n):
 row = []
 for j in range(m):
 row.append(matrix[j][i])
 transpose_matrix.append(row)
 return transpose_matrix


def convert_string_to_int(list_a):
 new_list = []
 for item in list_a:
 num = int(item)
 new_list.append(num)
 return new_list


m, n = input().split()
m, n = int(m), int(n)
num_list = []

for i in range(m):
 list_a = input().split()
 list_a = convert_string_to_int(list_a)
 num_list.append(list_a)

transpose_matrix = get_transpose_of_matrix(num_list, m, n)
for row in transpose_matrix:
 print(row)"
9b727313-928e-4549-9b4f-1f89250a095c,"For this problem, the prefilled code will contain a dictionary. Write a program to rename a key in the dictionary with the given name.<hr><b>Input</b><br/><br/>The first line of input will contain a string, denoting the existing key in the dictionary.<br/>The second line of input will contain a string, denoting the new key to be renamed.<hr><b>Output</b><br/><br/>The output should be a single line containing the list of tuples with dictionary items, where the key is updated without changing the order of the key-value pairs.<hr><b>Explanation</b><br/><br/>For example, if the given key is &quot;apples&quot; and the new key is &quot;pomegranates&quot;, your code should update the key &quot;apples&quot; with &quot;pomegranates&quot; with the same value of apples. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[('pomegranates', 10), ('bananas', 20), ('mangoes', 15), ('oranges', 200), ('watermelons', 50)]
</code></pre>

Solution Code:fruits = {
 ""apples"": 10,
 ""bananas"": 20,
 ""mangoes"": 15,
 ""oranges"": 200,
 ""watermelons"": 50
}

key = input()
new_key = input()


fruit_items = list(fruits.items())
fruit_items_copy = fruit_items.copy()
fruits_count = len(fruit_items)

for i in range(fruits_count):
 if fruit_items[i][0] == key:
 updated_tuple = (new_key, fruit_items[i][1])
 fruit_items_copy[i] = updated_tuple

print(fruit_items_copy)"
34ec694f-e874-408e-9748-8efb8c0fd83b,"A player has collected few colored balls which have a number on them. <br/>To calculate score, we have to group the colored balls picked by user and sum up the numbers on them.<br/><br/>Write a program to create a dictionary, grouping of colored balls and the corresponding total score.<hr><b>Input</b><br/><br/>The input will be a single line containing comma-separated key-value pairs.<br/>Each key-value pair is separated by the colon character (:).<hr><b>Output</b><br/><br/>The output should be a single line containing a list of tuples of dictionary items by grouping of colored balls and the corresponding total score, where keys are sorted in alphabetical order.<hr><b>Explanation</b><br/><br/>For example if the given string is &quot;r:1,b:2,r:3&quot;, as the key &#x27;r&#x27; is repeated twice, the key &#x27;r&#x27; in the output dictionary should have the value of sum of two scores(1 + 3) in the input. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[('b', 2), ('r', 4)]
</code></pre>

Solution Code:def get_scores(ball_and_score_list):
 ball_score_dict = {}
 for item in ball_and_score_list:
 pair = item.split("":"")
 key, value = pair[0], int(pair[1])
 if key in ball_score_dict:
 score = ball_score_dict[key]
 ball_score_dict[key] = score + value
 else:
 ball_score_dict[key] = value
 return ball_score_dict


ball_score_list = input().split("","")
ball_score_pairs = get_scores(ball_score_list)
ball_scores_items = ball_score_pairs.items()
ball_scores_items = sorted(ball_scores_items)
print(ball_scores_items)"
c60dd549-5caa-4e1f-8386-8b286c38da19,"Given a list of integers, write a program to print a consecutive sum triangle.<br/>Consecutive Sum Triangle is a triangle, where the first level contains all elements in the inputs. <br/>From next level, print the sum of consecutive elements of the previous level.<hr><b>Input</b><br/><br/>The input will be a single line containing comma-separated integers.<hr><b>Output</b><br/><br/>The output should be M number of lines equal to the length of the given list.<br/>Each line should contain a list of consecutive sum of numbers of the previous line.<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;3,5,7,9&quot;, as the input list contain four numbers, the output should be four lines.<br/>The first line of the triangle should contain all the elements.<br/>The second line should be the sum of consecutive elements of the previous line, which is the first line.<br/>[3+5, 5+7, 7+9] -&gt; [8, 12, 16]<br/>Similarly for the next lines until a single element occurs in the last line.<br/>So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[3, 5, 7, 9]
[8, 12, 16]
[20, 28]
[48]
</code></pre>

Solution Code:def get_con_sum_list(int_list):
 con_sum_list = []
 end_index = len(int_list) - 1
 for i in range(end_index):
 con_sum = int_list[i] + int_list[i + 1]
 con_sum_list.append(con_sum)
 return con_sum_list


def print_sum_triangle(int_list):
 while len(int_list) > 1:
 con_sum_list = get_con_sum_list(int_list)
 print(con_sum_list)
 int_list = con_sum_list


def convert_string_to_int(str_num_list):
 new_list = []
 for item in str_num_list:
 num = int(item)
 new_list.append(num)
 return new_list


str_num_list = input().split("","")
int_list = convert_string_to_int(str_num_list)
print(int_list)
print_sum_triangle(int_list)"
12762e0a-85e1-4851-82f2-a5f5b10713e0,"For this problem, the prefilled code will contain a dictionary. Write a program to add a key-value pair to the dictionary.<hr><b>Input</b><br/><br/>The input will be a single line containing the strings, separated by space, denoting the key-value pair.<hr><b>Output</b><br/><br/>The output should be a single line containing the dictionary with the added key-value pair.<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;Ramesh Cricket&quot;, your code should add the key &quot;Ramesh&quot; and the value for it should be&quot;Cricket&quot;. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">{'Ram': 'Cricket', 'Naresh': 'Football', 'Vani': 'Tennis', 'Rahim': 'Cricket', 'Ramesh': 'Cricket'}
</code></pre>

Solution Code:students_dict = {
 ""Ram"": ""Cricket"",
 ""Naresh"": ""Football"",
 ""Vani"": ""Tennis"",
 ""Rahim"": ""Cricket""
}

key, value = input().split()
students_dict[key] = value
print(students_dict)"
ae4c7ee2-f6bc-4a40-9c8a-bafaff2669f4,"For this problem, the prefilled code will contain a list of tuples. Write a program to remove the given number N in all the tuples if it present.<hr><b>Input</b><br/><br/>The input will be a single line containing an integer (N).<hr><b>Output</b><br/><br/>The output should be a single line containing the list of tuples without the N.<hr><b>Explanation</b><br/><br/>For example, if the given N is 3, as 3 is in tuples at index 0 and 2, remove 3 in those tuples and print the list. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[(1, 2, 4, 5, 6), (2, 4, 6, 8), (1, 5, 7)]
</code></pre>

Solution Code:num_list = [(1, 2, 3, 4, 5, 6), (2, 4, 6, 8), (1, 3, 5, 7)]

n = int(input())
new_list = []
for tuple_a in num_list:
 new_tuple = tuple_a
 if n in tuple_a:
 n_index = tuple_a.index(n)
 new_tuple = tuple_a[:n_index] + tuple_a[n_index+1:]
 new_list.append(new_tuple)

print(new_list)"
0e2cf93d-48ff-4cbe-b153-4e4ae5237065,"Write a program to print the lists which contain the unique elements in the given list of lists.<hr><b>Input</b><br/><br/>The first line of input will contain a positive integer (N).<br/>The next N lines will contain space-separated integers, denoting elements of each list.<hr><b>Output</b><br/><br/>The output should be a single line containing the list of lists with unique elements in the order of inputs given.<hr><b>Explanation</b><br/><br/>For example, if the given N is 3, read the inputs in the next three lines. If the inputs in the next three lines are the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">1 2 3
5 10 15
10 20 10 30
</code></pre><br/>As the third list contains duplicate elements, the output list should not contain the third list. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[[1, 2, 3], [5, 10, 15]]
</code></pre>

Solution Code:def convert_string_to_int(list_a):
 new_list = []
 for item in list_a:
 num = int(item)
 new_list.append(num)
 return new_list


n = int(input())
num_list = []
for i in range(n):
 values_list = input().split()
 values_list = convert_string_to_int(values_list)
 values_set = set(values_list)
 is_equal = len(values_list) == len(values_set)
 if is_equal:
 num_list.append(values_list)

print(num_list)"
79f0308d-ca8a-472f-8185-68396f7ccc1e,"For this problem, the prefilled code will contain a list of tuples. Write a program to create a list with the values at the given indexes.<hr><b>Input</b><br/><br/>The first line of input will contain a positive integer (N).<br/>The next N lines will contain two space-separated integers.<br/>The first number will be the index of the tuple.<br/>The second number will be the index of the value in the tuple.<hr><b>Output</b><br/><br/>The output should be a single line containing the list of values in the order of inputs given.<hr><b>Explanation</b><br/><br/>For example, if the given N is 3, then read the inputs in the next three lines. If the inputs in the next three lines are<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">1 2
0 3
0 1
</code></pre><br/>The value at index 2 in the tuple at index 1 in the list is &#x27;hockey&#x27;, similarly the output list should contain the values at given indexes. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">['hockey', 'grapes', 'banana']
</code></pre>

Solution Code:list_a = [('apple', 'banana', 'orange', 'grapes'), ('cricket', 'football', 'hockey'), ('car', 'bicycle', 'bus')]

n = int(input())
new_list = []

for i in range(n):
 index = input().split()
 tuple_index = int(index[0])
 value_index = int(index[1])
 value = list_a[tuple_index][value_index]
 new_list.append(value)

print(new_list)"
5f44d393-d919-4a92-bc53-38abfda99dc8,"For this problem, the prefilled code will contain a list of tuples. Write a program to print the index of the given number N in the list of tuples.<hr><b>Input</b><br/><br/>The input will be a single line containing an integer (N).<hr><b>Output</b><br/><br/>The output should be a single line containing two numbers separated by space.<br/>The first number should be the index of tuples that contain the number N.<br/>The second number should be the index of the number N in the tuple.<hr><b>Explanation</b><br/><br/>For example, if the given N is 4, as it is the second element in the first tuple. So the output should be &quot;0 1&quot;

Solution Code:num_list = [(2, 4, 6, 8), (5, 15, 25, 35), (7, 14, 21)]

n = int(input())
for tuple_a in num_list:
 is_contain = n in tuple_a
 if is_contain:
 tuple_index = num_list.index(tuple_a)
 n_index = tuple_a.index(n)
 print(str(tuple_index) + "" "" + str(n_index))
 break"
015afcd7-21e1-424a-9a73-e9b37fe34edd,"Write a program to find the common elements in the N sets.<hr><b>Input</b><br/><br/>The first line of input will contain a positive integer (N).<br/>The next N lines will contain space-separated integers, denoting the elements of each set.<hr><b>Output</b><br/><br/>The output should be a single line containing the list of common elements in N sets sorted in ascending order.<hr><b>Explanation</b><br/><br/>For example, if the given N is 3, read inputs in the next three lines. If the given three strings are as the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">2 4 6 8 10
4 8 10 12 16
5 10 15 20
</code></pre><br/>As 10 is common in all three sets, the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[10]
</code></pre>

Solution Code:def convert_string_to_int(list_a):
 new_list = []
 for item in list_a:
 num = int(item)
 new_list.append(num)
 return new_list


def get_intersection_of_n_sets(num_set_list):
 result = num_set_list[0]
 for num_set in num_set_list:
 result = result.intersection(num_set)
 return result


n = int(input())
num_set_list = []
for i in range(n):
 values_list = input().split()
 values_list = convert_string_to_int(values_list)
 values_set = set(values_list)
 num_set_list.append(values_set)

result_set = get_intersection_of_n_sets(num_set_list)
result_list = list(result_set)
result_list.sort()
print(result_list)"
4c62688c-e861-4622-98c7-b79d2d2fba40,"Write a program to find the common elements in the three sets.<hr><b>Input</b><br/><br/>The first line of input will contain space-separated integers.<br/>The second line of input will contain space-separated integers.<br/>The third line of input will contain space-separated integers.<hr><b>Output</b><br/><br/>The output should be a single line containing the list of common elements in three sets sorted in ascending order.<hr><b>Explanation</b><br/><br/>For example, if the given three strings are as the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">2 4 6 8 10
4 8 10 12 16
5 10 15 20
</code></pre><br/>As 10 is common in all three sets, the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[10]
</code></pre>

Solution Code:def convert_string_to_int(list_a):
 new_list = []
 for item in list_a:
 num = int(item)
 new_list.append(num)
 return new_list


num_list = []
for i in range(3):
 values_list = input().split()
 values_list = convert_string_to_int(values_list)
 values_set = set(values_list)
 num_list.append(values_set)

intersection_a = num_list[0].intersection(num_list[1])
intersection_b = intersection_a.intersection(num_list[2])

result = list(intersection_b)
result.sort()

print(result)"
889a27fb-11e6-4de1-929a-7e839a6fc25d,"Given a number `N` and `N` inputs containing two space-separated integers in each line, representing the Power `Pi` and Coefficient `Ci` of a polynomial. Write a program that prints the polynomial in the standard form of **Cix^Pi + Ci-1x^Pi-1 + .... + C1x + C0**.

---

#### Input  
- The first line of input contains an integer representing `N` that is the number of terms in the polynomial.
- The next `N` lines of input contain two space-separated integers in each line, representing the Power `Pi` and Coefficient `Ci`.

---

#### Output  
The output should be in the form of **Cix^Pi + Ci-1x^Pi-1 + .... + C1x + C0**.

- If the coefficient is `0`, then the term should not be printed.
- If the term with the highest power is negative, it should be represented as **-Cix^Pi**.
- If the term where power is `1`, it should be represented as **C1x** instead of **C1x^1**.
- If the polynomial power is `0` and the constant term is also `0`, then print `0` to represent the polynomial.
- For term **Cix^Pi**, if the coefficient of the term **Ci** is `1`, then print **x^Pi** instead of **1x^Pi**.

---

#### Constraints  
- `N` is less than or equal to **100**.  
- `Pi` is greater than or equal to **0** and less than **1000**.  
- `Ci` is greater than or equal to **-1000** and less than or equal to **1000**.

---

#### Explanation 
For example, if the given number is `N = 4`,

- For power `0`, the coefficient is `5`.
 - **5x^0** (The coefficient of `x^0` is `5`, and `x^0` is equivalent to `1`)
 - **5 * 1 = 5**
- For power `1`, the coefficient is `0`.
 - **0x^1** (If the coefficient of `x^1` is `0`, then the term should not be printed)
- For power `2`, the coefficient is `10`.
 - **10x^2** (The coefficient of `x^2` is `10`)
- For power `3`, the coefficient is `6`.
 - **6x^3** (The coefficient of `x^3` is `6`)

The highest power of **x** is **3**.

The output should be **6x^3 + 10x^2 + 5**.

---

For example, if the given number is `N = 6`,

- For power `0`, the coefficient is `7`.
 - **7x^0** (The coefficient of `x^0` is `7`, and `x^0` is equivalent to `1`)
 - **7 * 1 = 7**

- For power `1`, the coefficient is `3`.
 - **3x** (If the term with power `1`, it should be represented as **Cx** instead of **Cx^1**.)

- For power `2`, the coefficient is `0`.
 - **0x^2** (If the coefficient of `x^2` is `0`, then the term should not be printed)

- For power `3`, the coefficient is `-2`.
 - **-2x^3** (If the term with the highest power is negative, it should be represented as **-Cix^Pi**.)

- For power `4`, the coefficient is `1`.
 - **1x^4** (The coefficient of `x^4` is `1`)

- For power `5`, the coefficient is `6`.
 - **6x^5** (The coefficient of `x^5` is `6`)

The highest power of **x** is **5**.

The output should be **6x^5 + x^4 - 2x^3 + 3x + 7**.

Solution Code:# Store polynomial as a dict with power as key and coefficient as value
def read_polynomial():
    n = int(input())
    polynomial_dict = {}
    for i in range(n):
        power, coefficient = map(int, input().split())
        polynomial_dict[power] = coefficient
    return polynomial_dict

# Returns a polynomial term with given degree and coefficient excluding sign
def get_term(coefficient, power):
    coefficient = abs(coefficient)
    if coefficient == 1 and power != 0:
            coefficient = ''
    if power > 1:
        term = ""{}x^{}"".format(coefficient, power)
    elif power == 1:
        term = ""{}x"".format(coefficient)
    elif power == 0:
        term = ""{}"".format(coefficient)
    return term

def get_polynomial_expression_string(polynomial):
    expression = """"
    degree = max(polynomial.keys())
    for power in sorted(polynomial.keys(), reverse=True):
        coefficient = polynomial[power]
        term = get_term(coefficient, power)
        if power == degree:
            if coefficient > 0:
                expression = term
            elif coefficient < 0:
                expression = '-{}'.format(term)
        else:
            if coefficient > 0:
                expression = ""{} + {}"".format(expression, term)
            elif coefficient < 0:
                expression = ""{} - {}"".format(expression, term)
    if expression == """":
        expression = ""0""
    return expression

def main():
    polynomial = read_polynomial()
    print(get_polynomial_expression_string(polynomial))

main()"
0753f768-bf73-4c7a-aeda-a914962b6139,"Given a sentence as input, print all the unique combinations of the words of the sentence, considering different possible number of words each time (from one word to N unique words in lexicographical order).<hr><b>Input</b><br/><br/>The input will be a single line containing a sentence.<hr><b>Output</b><br/><br/>The output should be multiple lines, each line containing the unique combination from one word to N words in lexicographical order.<hr><b>Explanation</b><br/><br/>For example, if the given sentence is &quot;apple is a fruit&quot;.<br/>All possible one-word unique combinations are<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">a
apple
fruit
is
</code></pre><br/>All possible two words unique combinations are<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">a apple
a fruit
a is
apple fruit
apple is
fruit is
</code></pre><br/>All possible three words unique combinations are<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">a apple fruit
a apple is
a fruit is
apple fruit is
</code></pre><br/>All possible four words unique combinations are<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">a apple fruit is
</code></pre>

Solution Code:def all_unique_combinations(words, n):
    words = sorted(words)
    items = list(range(len(words)))
    old_combinations = [[]]
    new_combinations = []
    for i in range(n):
        new_combinations = []
        for combination in old_combinations:
            for item in items:
                if (combination and item > combination[-1]) or len(combination) == 0:
                    new_combinations.append(combination + [item])
            old_combinations = new_combinations
    word_combinations = []
    for combination in new_combinations:
        word_combination = []
        for index in combination:
            word_combination.append(words[index])
        word_combinations.append(tuple(word_combination))
    return sorted(set(word_combinations))

words = input().split()
words_len = len(words)
for i in range(1, words_len+1):
    all_combinations = all_unique_combinations(words, i)
    for combination in all_combinations:
        print(' '.join(combination))"
fe0c8ead-0aa2-4eb2-a806-647d0a664bd2,"Given a list of integers, write a program to identify contiguous sub-list that has the largest sum and print the sub-list. Any non-empty slice of the list with step size 1 can be considered as contiguous sub-list.<hr><b>Input</b><br/><br/>The input will contain space-separated integers, denoting the elements of the list.<hr><b>Output</b><br/><br/>The output should be space-separated integers.<hr><b>Explanation</b><br/><br/>For example, if the given list is [2, -4, 5, -1, 2, -3], then all the possible contiguous sub-lists will be,<pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[2]
[2, -4]
[2, -4, 5]
[2, -4, 5, -1]
[2, -4, 5, -1, 2]
[2, -4, 5, -1, 2, -3]
[-4]
[-4, 5]
[-4, 5, -1]
[-4, 5, -1, 2]
[-4, 5, -1, 2, -3]
[5]
[5, -1]
[5, -1, 2]
[5, -1, 2, -3]
[-1]
[-1, 2]
[-1, 2, -3]
[2]
[2, -3]
[-3]
</code></pre><br/>Among the above contiguous sub-lists, the contiguous sub-list [5, -1, 2] has the largest sum which is 6. So the output should be 5 -1 2

Solution Code:a = list(map(int, input().split()))
if not a:
 print(0)
else:
 sum_dict = {}
 for i in range(len(a)):
 for j in range(i+1, len(a)+1):
 sum_dict[tuple(a[i:j])] = sum(a[i:j])
 keys = list(sum_dict.keys())
 values = list(sum_dict.values())
 max_sum_index = values.index(max(values))
 print(*keys[max_sum_index])"
3a337bb9-0c72-4dd7-8896-8a0da3bc00d1,"Given a string `S`, write a program to print the character with the smallest Unicode value in the string `S`.

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a string representing the character with the smallest Unicode value in the string `S`.

---

#### Explanation

For example, if the given string is `S = ""edit""`,

- The characters in the string **`edit`** are **e**, **d**, **i** and **t**.
- The Unicode values of the above characters are,

| Character | Unicode value |
| --------- | ------------- |
| e         | 101           |
| **d**     | **100**       |
| i         | 105           |
| t         | 116           |

- The smallest Unicode value among the characters of the string **`edit`** is **100**(`100 < 101 < 105 < 116`) and the corresponding character is **d**.

The output should be **d**.

Solution Code:string = input()

smallest_character = string[0]

for index in range(1, len(string)):
 if ord(string[index]) < ord(smallest_character):
 smallest_character = string[index]
 

print(smallest_character)"
90e266e7-e4f1-4244-8d2d-d7c3490019a8,"Given a string `S`, write a program to print the Unicode value of the first uppercase character in the string `S`.

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing an integer that is the Unicode value of the first uppercase character in the given string `S`.

---

#### Explanation

For example, if the given string is `S = ""proGrammeR""`,

- The characters in the string **`proGrammeR`** are **p**, **r**, **o**, **G**, **r**, **a**, **m**, **m**, **e**, **r** and **R**.
- The uppercase characters in the string **proGrammeR** are **G** and **R**.
- The first uppercase character in the string **proGrammeR** is **G**.
- The Unicode value of **G** is **71**

The output should be **71**.

Solution Code:string = input()

for each_character in string:
 if each_character == each_character.upper():
 print(ord(each_character))
 break"
ce472e48-8450-4ec7-8e3b-672a672400d9,"Given a number `N`, write a program that reads `N` Unicode values and prints a string by joining the characters of given `N` Unicode values.

---

#### Input

The first line of input contains an integer representing `N`.
The next `N` lines of input contain integers.

---

#### Output

The output should be a single line containing a string obtained by joining the characters of given `N` Unicode values.

---

#### Explanation

For example, if the given number `N = 3`,

- Given **3** Unicode values are,

```
67
97
114
```
- The characters with the above Unicode values are,

| Unicode value | Character |
| ------------- | --------- |
| 67            | C         |
| 97            | a         |
| 114           | r         |

- After joining the characters of the Unicode values **67** (`C`), **97**(`a`) and **114**(`r`) is **Car**

The output should be **Car**."
a67ed191-92a6-40d3-b32b-2df88c9f8082,"Given a variable name `S`, check if `S` is a valid variable name. Variable name is valid if it starts with an alphabet or an underscore.
Print **True** if `S` is a valid variable name. Otherwise, print **False**.

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a boolean. Print **True** if `S` is a valid variable name. Otherwise, print **False**.

---

#### Explanation

For example, if the given variable name is `S = ""_number""`,

- The first character in `S` is **\_**.

The output should be **True**.


Solution Code:variable_name = input()

first_character = variable_name[0]
unicode_value = ord(first_character)

is_upper = (unicode_value >= 65) and (unicode_value <= 90)
is_lower = (unicode_value >= 97) and (unicode_value <= 122)
is_underscore = (first_character == ""_"")

is_valid = is_upper or is_lower or is_underscore

print(is_valid)"
439d4e92-f210-488d-8ec7-d42b1b993c8e,"Given a string `S`, write a program to print the Unicode value of the first digit in the given string.

<MultiLineNote>
Unicode values are unique numbers that are given to every character, symbol and digit.
</MultiLineNote>

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing an integer that is the Unicode value of the first digit in the given string.

---

#### Explanation

For example, if the given string is `S = ""python5834""`,

- The first digit in **python5834** is **5**.
- The Unicode value of **5** is **53**.

The output should be **53**.


Solution Code:s = input()

for char in s:
    if char.isdigit():
        print(ord(char))
        break
    "
8a1c6d40-e007-42ff-8ad2-083869aad828,"Given a string `S` and two numbers `M` and `N`, write a program to print the characters of `S` that have Unicode values from `M` to `N` separated by a space.

<MultiLineNote>
Unicode values are unique numbers that are given to every character, symbol and digit.
</MultiLineNote>

---

#### Input

The first line of input contains a string representing `S`.
The second line of input contains an integer representing `M`.
The third line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing a string that has characters that have Unicode values from `M` to `N` separated by a space.

---

#### Explanation

For example, if the given string is `S = ""words""`, and two numbers are `M = 99` and `N = 112`.

| Character | Unicode value |
| --------- | ------------- |
| w         | 119           |
| o         | 111           |
| r         | 114           |
| d         | 100           |
| s         | 115           |

- The characters **o** and **d** have Unicode values from **99** to **112**.

The output should be **""o d""**.


Solution Code:s=input()
m=int(input())
n=int(input()) 
result=""""
for char in s:
    if ord(char)>=m and ord(char)<=n:
        result=result+char+"" "" 
print(result)"
d755920c-6c01-4a55-bbf8-d43972b18cf9,"Given a number `N`, write a program that reads `N` inputs and prints the **Smallest Number** of them after each input, each on a new line.

---

#### Input

The first line of input contains an integer representing `N`.
The next `N` lines of input contain integers.

---

#### Output

The output should be `N` lines containing the **Smallest Number** of them after each input, each on a new line.

---

#### Explanation

For example, if the given number is `N = 3`,

- The **3** inputs are **32**, **6** and **29**.
- The Smallest among the input **32** is **32**.
- The Smallest among the inputs **32** and **6** is **6**.
- The Smallest among the inputs **32**, **6** and **29** is **6**.

The output should be,

```
32
6
6
```

Solution Code:n = int(input())
smallest_number = 999999999
for num in range(n):
 number = int(input())
 if number < smallest_number:
 smallest_number = number
 print(smallest_number)"
31b98c83-ce6b-4729-9efa-be5bbf2fb78c,"Given a number `N`, write a program to read `N` numbers and print the cumulative sum after each input, each on a new line.

<SingleLineNote>
Cumulative sum is the sum of all the previous inputs and the current input. 
</SingleLineNote>

---

#### Input

The first line of input contains an integer representing `N`.
The next `N` lines of input contain integers.

---

#### Output

The output should be `N` lines containing an integer that is the cumulative sum after each input, each on a new line.

---

#### Explanation

For example, if the given number is `N = 5`,

- The **5** given inputs are **8**, **11**, **-96**, **49** and **85**.
- The cumulative sum after each input is,

| input | Cumulative Sum              |
| ----- | --------------------------- |
| 8     | 8                           |
| 11    | 19 (8 + 11)                 |
| -96   | -77 (8 + 11 + -96)          |
| 49    | -28 (8 + 11 + -96 + 49)     |
| 85    | 57 (8 + 11 + -96 + 49 + 85) |

So the output should be,

```
8
19
-77
-28
57
```


Solution Code:n = int(input())

total = 0
for i in range(n):
 number = int(input())
 total = total + number
 print(total)"
c2a4d3b2-0e37-4b9c-bcc4-766ef9ad0abb,"Given a string `S`, write a program that prints a string obtained by adding a comma (`,`) between the characters of the given string `S`.

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a string obtained by adding a comma (`,`) between the characters of the given string `S`.

---

#### Explanation

For example, if the given string is `S = ""wonder""`,

- Characters in the given string **""wonder""** are **w**, **o**, **n**, **d**, **e** and **r**.
- The string after adding a comma(`,`) between the characters of the string **""wonder""** is **""w,o,n,d,e,r""**.

The output should be **""w,o,n,d,e,r""**.


Solution Code:string = input()

resultant_string = """"

for index in range(len(string)-1):
 resultant_string += string[index] + "",""

resultant_string += string[len(string) - 1]

print(resultant_string)"
cfbdff06-acc9-49d4-950b-c30296c25cd1,"Write a program to compute the cumulative average of the given N numbers after each input.<br/>Cumulative average is the average of all the inputs read so far.<hr><b>Input</b><br/><br/>The first line of input will contain a positive integer (N).<br/>The following N lines will contain an integer in each line.<hr><b>Output</b><br/><br/>The output should be N lines printing the cumulative average after each input in a new line.<br/>Note: Round the averages to three decimal places.<hr><b>Explanation</b><br/><br/>For example, if the given number is 5, then read the inputs in the next 5 lines and print the cumulative average after each input. If the given numbers in the next five lines are 8, 11, -96, 49, and 85, the cumulative averages after each input are<br/>8 / 1 = 8<br/>(8 + 11) / 2 = 9.5<br/>(8 + 11 + -96) / 3 = -25.667<br/>(8 + 11 + -96 + 49) / 4 = -7.0<br/>(8 + 11 + -96 + 49 + 85) / 5 = 11.4<br/><br/>So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">8.0
9.5
-25.667
-7.0
11.4
</code></pre>

Solution Code:n = int(input())

total = 0
for i in range(1, n+1):
 number = int(input())
 total = total + number
 average = total / i
 print(round(average, 3))"
f97c9628-5ca2-421c-90d2-a48cfdd0f32a,"Given two strings, write a program to check if the second string is a subsequence of the first string.<br/>A string can be considered subsequence of other if it can be derived from the original string by ignoring or removing some characters without changing the order of the remaining characters.<br/><hr><b>Input</b><br/><br/>The first line of input will contain a string.<br/>The second line of input will contain a string.<br/><hr><b>Output</b><br/><br/>The output should be a single line containing either &quot;Yes&quot; or &quot;No&quot;.<hr><b>Explanation</b><br/><br/>For example, if the first string is &quot;abcde&quot; and the second string is &quot;ace&quot;, the output should be &quot;Yes&quot;, as the second string is a subsequence of the first string.<br/><br/>Whereas, if the first string is &quot;Google&quot;, and the second string is &quot;lg&quot;, the output should be &quot;No&quot;, as the second string is not obtained by ignoring some characters without changing the order in the first string.

Solution Code:full_string = input()
subsequence = input()
subseq_index = 0
subseq_len = len(subsequence)
for char in full_string:
 if char == subsequence[subseq_index]:
 subseq_index += 1
 if subseq_index == subseq_len:
 break
if subseq_index == subseq_len:
 print(""Yes"")
else:
 print(""No"")"
4c15014b-3cdd-4734-97e6-84ada2cdd555,"Given integer `N` as input, write a program to display the sum of the first `N` terms in harmonic series. 

The series is: 1 + 1/2 + 1/3 + 1/4 + 1/5 ... + 1/N (N terms).

---

#### Input

The first line of input is an integer `N`.

---

#### Output

Print the sum rounded upto 2 decimal places.

---

#### Explanation

For `N = 5`

The sum of first 5 terms in harmonic series is 1 + 1/2 + 1/3 + 1/4 + 1/5

So, the output should be `2.28`.

Solution Code:n=int(input())
sum_of_num=0
for i in range(1,n+1):
    result=1/i 
    sum_of_num+=result
print(round(sum_of_num,2))"
7dfe639b-0cb3-4c68-ada7-3945dd120e2a,"Given comma-separated numbers and a number `N`, write a program to print the smallest possible sum with `N` numbers of the given comma-separed numbers.

---

#### Input

The first line of input contains comma-separated numbers.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing an integer representing the smallest possible sum with `N` numbers of the given comma-separed numbers.

---

#### Explanation

For example, if the given comma-separated numbers are `2,10,9,6,5` and `N = 3`,

- The ascending order of the given comma-separated numbers is **2, 5, 6, 9, 10**.
- The smallest possible sum with **3** numbers will be the sum of the first **3** smallest numbers.
- The first **3** smallest numbers sum is **13**.`(2 + 5 + 6 = 13)`

The output should be **13**.


Solution Code:str_list=input().split("","")
num_list=[]
n=int(input())
for i in str_list:
    num_list+=[int(i)]

sorted_list=sorted(num_list)
print(sum(sorted_list[:n]))"
b1ceb29b-4295-49f0-a8ae-552e058e58c0,"Given comma-separated numbers, write a program to print the **Mean** of the given numbers.

<MultiLineNote>
The **Mean** is the average of the given numbers.

It is calculated by dividing the sum of the given numbers by the total count of numbers.

For example, `numbers = 10,2,31,4`

- Sum of the numbers **10**, **2**, **31** and **4** is **47**
- Count of the numbers is **4**.
- **Mean** of the numbers **10**, **2**, **31** and **4** is **11.75** (`10 / 4 = 11.75`).
</MultiLineNote>

---

#### Input

The input will be a single line containing comma-separated integers.

---

#### Output

The output should be a single line containing a float that is the **Mean** of the given comma-separated numbers.

---

#### Explanation

For example, if the given comma-separated numbers are `2,5,10,15,25,30`,

- The given numbers are **2**, **5**, **10**, **15**, **25**, and **30**.
- The sum of the above numbers is **87** (`2 + 5 + 10 + 15 + 25 + 30 = 87`).
- Count of the numbers is **6**.
- The **Mean** of the numbers **2**, **5**, **10**, **15**, **25**, and **30** is **14.5** (`87 / 6 = 14.5`).

The output should be **14.5**.

Solution Code:numbers=input()
numbers_list=numbers.split("","")
length=len(numbers_list)
new_list=[]

for i in numbers_list:
    new_list+=[int(i)]
    
sum_of_numbers=sum(new_list)
average=sum_of_numbers/length
print(average)"
e70e69c6-0c91-4610-986a-6ca427d88567,"Write a program to print the Kth smallest number in the list.<hr><b>Input</b><br/><br/>The first line of input will contain comma-separated integers.<br/>The second line of input will contain an integer (K).<hr><b>Output</b><br/><br/>The output should be a single line containing the Kth smallest number in the list.<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;2,3,-1,5&quot; and K is 2, your code should print the second smallest number in the list. So the output should be 2.

Solution Code:numbers = input()
k = int(input())

nums_list = numbers.split("","")

length_of_nums_list = len(nums_list)
for i in range(length_of_nums_list):
    nums_list[i] = int(nums_list[i])

nums_list = sorted(nums_list)
kth_smallest_number = nums_list[k-1]
print(kth_smallest_number)"
20314c06-7c21-4150-a640-eb8c20099ddd,"A function is given in the prefilled code that takes a string `S` as an argument.

Write a program that checks if `S` is a **Palindrome** using recursion.
Return **True** if `S` is a **Palindrome**. Otherwise, return **False**.

<MultiLineNote>
- Consider uppercase letters and lowercase letters are same.
- A string is said to be a palindrome if the string and reverse of the string is same.
</MultiLineNote>

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the given string is a **Palindrome**. Otherwise, **False** should be printed.

---

For example, if the given string is `Noon`,

- The reverse of the string **Noon** is **nooN**.
- As the reversed string and the given string are the same. (`Considering uppercase letters and lowercase letters are same.`).
- **Noon** is a palindrome.

The output should be, **True**.


Solution Code:def is_palindrome(string):
    string = string.lower()
    empty_string = """"
    for i in string:
        empty_string = i + empty_string
        if empty_string == string:
            result = ""True""
        else:
            result = ""False""
    return result

string = input()
is_true = is_palindrome(string)
print(is_true)"
b13d3ea2-a492-496c-84af-356df2087aa1,"A function is given in the prefilled code that takes a number `N` as an argument.

Write a program that returns the **sum** of the given series up to `N` terms using Recursion.
The sum should be rounded up to **2** decimals. 

**Series:**

<div style=""background-color: #3c4257; padding: 15px; color: #f8f8f2;border-radius: 4px;margin: 10px;font-size: 18px;font-family:Monaco, Menlo, 'Ubuntu Mono', Consolas, source-code-pro, monospace"">
1, 1/2, 1/3, ... 1/N terms
</div>

<br/>

**Terms in the series:**

| Term Number | Term    |         
| ----------- | --------|
| First Term  | 1       |        
| Second Term | 1/2     |         
| Third Term  | 1/3     |       
| ..          | ..      |        
| Nth Term    | 1/N     |


---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing a float that is the sum of the series (**1, 1/2, 1/3, ...**) up to `N` terms rounded up to **2** decimals.

---

#### Explanation

For example, if the given number is `N = 3`,

- The number of terms is **3**.
- The **First term** to **Third term** in the given series are **1, 1/2** and **1/3**.

**Terms in the given series:**

| Term Number | Term    |         
| ----------- | --------|
| First Term  | 1       |        
| Second Term | 1/2     |         
| Third Term  | 1/3     |


- The sum of the series from **First Term** to **Third Term** is **1.8333333333333333**. (`1 + 1/2 + 1/3 = 1.8333333333333333`)
- The sum rounded up to **2** decimals is **1.83**.

The output should be **1.83**.

Solution Code:def get_series_sum(number):
    if number == 1:
        return 1 
    else:
        term = 1 / number
        return term + get_series_sum(number - 1)

number = int(input())

series_sum = get_series_sum(number) 

print(round(series_sum, 2))"
a7075486-7687-41ea-8af8-6b37dda95378,"Write a program to print the factorial of `N`.Factorial is the product of all positive integers less than or equal to `N`.

<MultiLineNote>

The **factorial** of **0** is **1**.
</MultiLineNote>

----

#### Input

The input will be a single line containing a positive integer representing `N`.

---

#### Output
The output should be a single line containing the factorial of the given number `N`.

---

#### Explanation

For example, if the given number is `N = 4`, 

- The factorial of **4** is **24** .`(4 × 3 × 2 × 1 = 24)`

So, the output should be **24**.

Solution Code:def compute_factorial(n):
 if n <= 0: # Base case
 return 1
 else:
 return n * compute_factorial(n - 1) # Recursion


num = int(input())
result = compute_factorial(num)
print(result)"
178fdadd-ebef-4ece-8cf3-30bad14ee72f,"Write a program to recursively compute the value of A raised to the power B.<hr><b>Input</b><br/><br/>The first line of input will contain an integer (A). <br/>The second line of input will contain a positive integer (B).<hr><b>Output</b><br/><br/>The output should be a single line containing the value of A raised to power B.<hr><b>Explanation</b><br/><br/>For example, if the given A is 2 and B is 3, the value of 2 raised to power 3 is (2 * 2 * 2). So the output should be 8.

Solution Code:def calculate_power(x, y):
 if y == 1: # Base case
 return x
 else:
 y -= 1
 return x * calculate_power(x, y) # Recursion


a = int(input())
b = int(input())
result = calculate_power(a, b)
print(result)"
83159fe0-401a-4def-91fa-fd066f98075e,"Write a program to recursively compute the sum of all the digits in the given number N.<hr><b>Input</b><br/><br/>The input will be a single line containing a positive integer (N).<hr><b>Output</b><br/><br/>The output should be a single line containing the sum of all the digits in the number.<hr><b>Explanation</b><br/><br/>For example, if the given N is 255, your code should print the sum of all the digits. So the output should be 12.

Solution Code:def sum_of_the_digits(number):
 if number < 10: # Base case
 return number
 else:
 return (number % 10) + sum_of_the_digits(number//10) # Recursion


number = int(input())
result = sum_of_the_digits(number)
print(result)"
f36ca4c0-c4fd-4aa9-8b78-d1aea9653d73,"Write a program to recursively compute the sum of the numbers from 1 to N.<hr><b>Input</b><br/><br/>The input will be a single line containing a positive integer (N).<hr><b>Output</b><br/><br/>The output should be a single line containing the sum of the first N natural numbers.<hr><b>Explanation</b><br/><br/>For example, if the given N is 4, your code should print the sum of numbers from 1 to 4. So the output should be 10.

Solution Code:def sum_of_numbers(n):
 if n == 1: # Base case
 return 1
 else:
 return n + sum_of_numbers(n-1) # Recursion


num = int(input())
result = sum_of_numbers(num)
print(result)"
4bb00645-d0ff-45d1-b552-e48ff260922a,"A function is given in the prefilled code that takes a string `S` as an argument.

Write a program that returns the reverse of the given string `S` using Recursion.

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing the reverse of the string `S` that is passed as an argument to the function.

---

#### Explanation

For example, if the given string is `S = ""react""`,

- The characters in **react** are **r**, **e**, **a**, **c**, and **t**.
- The reverse of the string **react** is **tcaer**.

The output should be **tcaer**.

Solution Code:def get_reversed_string(string):
    if len(string) == 1:
        return string[0]
        
    return string[len(string) - 1] + get_reversed_string(string[:-1])
    
string = input()

resultant_string = get_reversed_string(string)
print(resultant_string)"
3219c652-41b4-4703-a10c-f48ed2c1d8c3,"A function is given in the prefilled code that takes a list `L` as an argument.

Write a program that returns the sum of the numbers in the list `L` using Recursion.

---

#### Input

The input will be a single line containing space-separated integers.

---

#### Output


The output should be a single line containing an integer that is the sum of the numbers in the list `L` that is passed as an argument.

---

#### Explanation

For example, if the given space-separated numbers are `2 1 5 6`,

- The sum of the given numbers **2**, **1**, **5**, and **6** is **14**. (`2 + 1 + 5 + 6`)

The output should be **14**.

Solution Code:def get_sum(numbers):
 each_number = int(numbers[0])
 
 if len(numbers) == 1:
 return each_number
 
 return each_number + get_sum(numbers[1:])
 

numbers = input().split()

sum_of_numbers = get_sum(numbers)
print(sum_of_numbers)"
839e1b6c-fbf7-4698-bbdc-802f18170bab,"A function is given in the prefilled code that takes a list `L` as an argument.

Write a program that returns the sum of the squares of the numbers in the list `L` using Recursion.

---

#### Input

The input will be a single line containing space-separated integers.

---

#### Output

The output should be a single line containing an integer that is the sum of the squares of the numbers in the list `L` that is passed as an argument.

---

#### Explanation

For example, if the given space-separated numbers are `5 2 4`,

- The squares of the given numbers are **25**, **4**, **16**.
- The sum of the squares of the given numbers is **45** (`25 + 4 + 16 = 45`).

The output should be **45**.

Solution Code:def get_sum_of_squares(numbers):
    each_number = int(numbers[0])

    if len(numbers) == 1:
        return each_number ** 2
    
    return each_number ** 2 + get_sum_of_squares(numbers[1:])
    
numbers = input().split()

squares_sum = get_sum_of_squares(numbers)
print(squares_sum)"
2a2be73a-68c9-4428-bfb5-81ea1966de2c,"Given space-separated numbers, write a program to print the **sum** of the given numbers.

---

#### Input

The input will be a single line containing space-separated integers.

---

#### Output

The output should be a single line containing an integer that is the **sum** of the given numbers.

---

#### Explanation

For example, if the given space-separated numbers are `3 4 7 8`,

- The given numbers are **3**, **4**, **7**, and **8**.
- The **sum** of **3**, **4**, **7**, and **8** is **22**. (`3 + 4 + 7 + 8 = 22`)

The output should be **22**.


Solution Code:numbers_list = input().split()
new_list = []

for each_number in numbers_list:
 number = int(each_number)
 new_list += [number]
 
sum_of_numbers = sum(new_list)

print(sum_of_numbers)"
c357741b-6ac2-47f6-9feb-ba5c9df0fac8,"Given comma-separated numbers and an index `I`, write a program to print the **Largest** number among the numbers from the given index `I` to the end of the list.

---

#### Input

The first line of input contains comma-separated integers.
The second line of input contains an integer representing `I`.

---

#### Output

The output should be a single line containing an integer that is the **Largest** number among the numbers from the given index `I` to the end of the list.

---

#### Explanation

For example, if the given comma-separated numbers are `10,7,2,5` and the index is `I = 1`,

- The numbers and their respective index values are,

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">Numbers</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">10</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">7</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">2</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;padding: 8px 12px;"">5</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
<div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;color: #808080;font-weight: bold;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">Indices</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
   <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;font-weight: 900;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
   <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;font-weight: 900;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell;font-weight: 900; vertical-align: inherit;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
</div>

- The numbers from index **1** are **7**, **2**, and **5**.
- The **Largest** number among the numbers from index **1** is **7**.

The output should be **7**.

Solution Code:input_list = input().split("","")
index = int(input())

numbers_list = []

for each_number in input_list:
 number = int(each_number)
 numbers_list += [number]


numbers_from_index = numbers_list[index : ]
largest_number = max(numbers_from_index)

print(largest_number)"
a1e8f685-c46f-4d47-9232-09b687eadd6f,"Given comma-separated numbers, write a program to print a list containing the given numbers in **Ascending** order.

---

#### Input

The input will be a single line containing comma-separated integers.

---

#### Output

The output should be a single line containing a list that has the given numbers in **Ascending** order.

---

#### Explanation

For example, if the given comma-separated numbers are `7,10,5,1`,

- The given numbers are **7**, **10**, **5**, and **1**.
- The **Ascending** order of the given numbers is **1**, **5**, **7**, and **10**.

The output should be,

```
[1, 5, 7, 10]
```

Solution Code:numbers_list = input().split("","")
new_list = []

for each_number in numbers_list:
 number = int(each_number)
 new_list += [number]

sorted_list = sorted(new_list)

print(sorted_list)"
00e613ae-7402-45a9-a40f-ca3fbc1267f6,"Given comma-separated numbers, write a program to print the maximum possible sum with **5** numbers of the given comma-separed numbers.

---

#### Input

The input will be a single line containing comma-separated integers.

---

#### Output

The output should be a single line containing an integer representing the maximum possible sum with **5** numbers of the given comma-separed numbers.

---

#### Explanation

For example, if the given comma-separated numbers are `12,1,22,6,14,7`,

- The given numbers are **12**, **1**, **22**, **6**, **14**, and **7**.
- The descending order of the given comma-separated numbers is **22, 14, 12, 7, 6, 1**.
- The maximum possible sum with **5** numbers will be the sum of the first **5** maximum numbers.
- The first **5** maximum numbers sum is **61**.`(22 + 14 + 12 + 7 + 6 = 61)`

The output should be **61**.

Solution Code:numbers_list = input().split("","")

new_list = []
for each_number in numbers_list:
 number = int(each_number)
 new_list += [number]

sorted_list = sorted(new_list, reverse = True)
first_five_numbers = sorted_list[ : 5]

largest_sum = sum(first_five_numbers)
print(largest_sum)"
9c8ebd59-8424-47c6-b278-1ebdd13dfb09,"Given comma-separated numbers, write a program to print the **Second Largest** number in the given numbers.

---

#### Input

The input will be a single line containing comma-separated integers.

---

#### Output

The output should be a single line containing an integer that is the **Second Largest** number in the given numbers.

---

#### Explanation

For example, if the given comma-separated numbers are `13,12,3,25`,

- The given numbers are **13**, **12**, **3**, and **25**.
- The **First Largest** number in the given numbers is **25**.
- The **Second Largest** number in the given numbers is **13**.

The output should be **13**.

Solution Code:numbers_list = input().split("","")
new_list = []

for each_number in numbers_list:
 number = int(each_number)
 new_list += [number]

sorted_list = sorted(new_list)
second_largest = sorted_list[-2]

print(second_largest)"
fe26097a-2806-4cfd-a956-1ac37e8711ba,"Write a program to print the difference between the largest and smallest numbers in the list.<hr><b>Input</b><br/><br/>The input will be a single line containing the comma-separated integers.<hr><b>Output</b><br/><br/>The output should be a single line containing the differences between the largest and the smallest numbers in the given list.<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;2,4,-1,5&quot;, the largest number is 5 and the smallest number is -1, the difference between the largest and the smallest number is 6, so the output should be 6.

Solution Code:numbers = input()
nums_list = numbers.split("","")

length_of_nums_list = len(nums_list)
for i in range(length_of_nums_list):
 nums_list[i] = int(nums_list[i])

largest_number = max(nums_list)
smallest_number = min(nums_list)

difference = largest_number - smallest_number
print(difference)"
a0a4273f-fddd-477f-945a-55771dfd56af,"Write a program to print the smallest number in the list.<hr><b>Input</b><br/><br/>The input will be a single line containing the comma-separated integers.<hr><b>Output</b><br/><br/>The output should be a single line containing the smallest number in the list.<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;2,4,-1,5&quot;, your code should print the smallest number in the list. So the output should be -1.

Solution Code:numbers = input()
nums_list = numbers.split("","")

length_of_nums_list = len(nums_list)
for i in range(length_of_nums_list):
 nums_list[i] = int(nums_list[i])

nums_list = sorted(nums_list)
smallest_number = nums_list[0]
print(smallest_number)"
db488173-ca61-413a-86c9-980f51b38804,"Write a program to extract the numbers in a given string and <br/>print the sum, minimum and maximum of those numbers.<hr><b>Input</b><br/><br/>The input will be a single line containing a string.<hr><b>Output</b><br/><br/>The first line of output should contain the sum of digits in the given word.<br/>The second line of output should contain the minimum of digits in the given word.<br/>The third line of output should contain the maximum of digits in the given word.<hr><b>Explanation</b><br/><br/>For example, if the given word is &quot;C0d1n8&quot;, the digits in the given word are (0, 1, 8). Your code should print the sum, minimum and maximum in each line respectively. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">9
0
8
</code></pre>

Solution Code:def get_digits(str_1):
 digits_list = []
 for char in str_1:
 if char.isdigit():
 digits_list += [int(char)]
 return digits_list


str_1 = input()
digits = get_digits(str_1)
sum_of_digits = sum(digits)
print(sum_of_digits)
min_of_digits = min(digits)
print(min_of_digits)
max_of_digits = max(digits)
print(max_of_digits)"
a23b403c-d1e1-4f19-a82d-9bf6d75890b5,"Write a program to print the Kth largest number in the list.<hr><b>Input</b><br/><br/>The first line of input will contain comma-separated integers.<br/>The second line of input will contain an integer (K).<hr><b>Output</b><br/><br/>The output should be a single line containing the Kth largest number in the list.<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;2,3,-1,5&quot; and K is 2, your code should print the second largest number in the list. So the output should be 3.

Solution Code:numbers = input()
k = int(input())

nums_list = numbers.split("","")

length_of_nums_list = len(nums_list)
for i in range(length_of_nums_list):
 nums_list[i] = int(nums_list[i])

nums_list = sorted(nums_list)
kth_largest_number = nums_list[-k]
print(kth_largest_number)"
6e53b3ba-45ba-476b-9550-f7f859373ce6,"Write a program to print the largest number in the list.<hr><b>Input</b><br/><br/>The input will be a single line containing the comma-separated integers.<hr><b>Output</b><br/><br/>The output should be a single line containing the largest number in the list.<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;2,4,-1,5&quot;, your code should print the largest number in the list. So the output should be 5.

Solution Code:numbers = input()
nums_list = numbers.split("","")

length_of_nums_list = len(nums_list)
for i in range(length_of_nums_list):
 nums_list[i] = int(nums_list[i])

nums_list = sorted(nums_list)
largest_number = nums_list[-1]
print(largest_number)"
28100b73-4155-476f-8788-cef1152d39d9,"A list `L` is given in the prefilled code.

Write a program that reads space-separated strings and prints a list obtained by adding given space-separated strings to the end of the list `L`.

```
L = [""5"", ""7"", ""Rohit"", ""Virat"", ""Dhoni""]
```

---

#### Input

The input will be a single line containing space-separated strings.

---

#### Output

The output should be a single line containing a list obtained by adding given space-separated strings to the end of the given list `L`.

---

#### Explanation

For example, if the given space-separated strings are **Surya Rahul Ishan Gill**,

- The given prefilled list is `L = [""5"", ""7"", ""Rohit"", ""Virat"", ""Dhoni""]`.
- The given strings are **""Surya""**, **""Rahul""**, **""Ishan""**, and **""Gill""**.
- The strings when added to the end of the list `L` are **""5""**, **""7""**, **""Rohit""**, **""Virat""**, **""Dhoni""**, **""Surya""**, **""Rahul""**, **""Ishan""**, and **""Gill""**.

The output should be,

```
[""5"", ""7"", ""Rohit"", ""Virat"", ""Dhoni"", ""Surya"", ""Rahul"", ""Ishan"", ""Gill""]
```


Solution Code:L = [""5"", ""7"", ""Rohit"", ""Virat"", ""Dhoni""]

list_a = input().split("" "")

L.extend(list_a)
print(L)"
02960e9e-4eb7-46ef-8299-84b839189214,"For this problem, the prefilled code will contain a list. Write a program to remove the last N items in the list.<hr><b>Input</b><br/><br/>The input will be a single line containing an integer (N).<hr><b>Output</b><br/><br/>The output should be a single line containing the list without the last N items.<hr><b>Explanation</b><br/><br/>For example, if the given N is 3, your code should remove the last three elements in the list. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">['Python', 'C', 'Java', 'Ruby', 'C++', 'CSS', 'HTML', 'Bash', 'Perl', 'R', 'Swift']
</code></pre>

Solution Code:programming_languages = ['Python', 'C', 'Java', 'Ruby', 'C++', 'CSS', 'HTML', 'Bash', 'Perl', 'R', 'Swift', 'SQL', 'PHP', 'JavaScript']

n = int(input())
for i in range(n):
 programming_languages.pop()
print(programming_languages)"
bd99a2c1-2b70-43be-a9e6-7edb6502b35d,"For this problem, the prefilled code will contain a list. Write a program to add the given word at the end of the list.<hr><b>Input</b><br/><br/>The input will be a single line containing a string.<hr><b>Output</b><br/><br/>The output should be a single line containing the list by adding the word at the end of the list.<hr><b>Explanation</b><br/><br/>For example, if the given word is &quot;Golf&quot;, your code should add the word at the end of the list. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">['Cricket', 'Hockey', 'Football', 'Badminton', 'Golf']
</code></pre>

Solution Code:sports_list = ['Cricket', 'Hockey', 'Football', 'Badminton']
sport = input()
sports_list.append(sport)
print(sports_list)"
b4a8032b-6098-431b-8c28-7439bdf4e07a,"For this problem, the prefilled code will contain a list. Write a program to insert a number (N) at the given index (I) location in the list.<hr><b>Input</b><br/><br/>The first line of input will contain an integer (N).<br/>The second line of input will contain a positive integer (I).<hr><b>Output</b><br/><br/>The output should be a single line containing the list with the number at the given index location.<hr><b>Explanation</b><br/><br/>For example, if the given N is 30 and I is 2, your code should insert 30 in the list at index 2. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[10, 20, 30, 40, 50, 60]
</code></pre>

Solution Code:nums_list = [10, 20, 40, 50, 60]
value = int(input())
index = int(input())

nums_list.insert(index, value)
print(nums_list)"
7ffec1a1-c699-4556-abfb-519148c6962e,"Consider a list (nums_list = []). Write a program to perform the following commands on the list<br/>  1. insert I E - insert the integer E at index I<br/>  2. append E - insert integer E at the end of the list<br/>  3. pop - remove the last element<br/>  4. remove E - remove the first occurrence of integer E<br/>  5. sort - sort the list in ascending order<br/>  6. print - print the list<hr><b>Input</b><br/><br/>The first line of input will contain an integer (N).<br/>The next N lines will contain the commands described above to be performed on the list each in a line.<hr><b>Output</b><br/><br/>For each command of type print, print the list on a new line.<hr><b>Explanation</b><br/><br/>Initialize your list and read in the value of N followed by N lines of commands where each command will be of the types listed above. Iterate through each command in order and perform the corresponding operation on your list.<br/><br/>For example, if the given N is 5, read the commands in the next five lines. If the given five commands are<br/><br/><li><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;background-color: rgba(0,0,0,.05);border-radius: 3px;padding: 2px 4px;"">append 5</code> - append 5 to the list, <code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;background-color: rgba(0,0,0,.05);border-radius: 3px;padding: 2px 4px;"">nums_list = [5]</code></li>
<li><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;background-color: rgba(0,0,0,.05);border-radius: 3px;padding: 2px 4px;"">insert 0 2</code> - insert 2 at index 0, <code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;background-color: rgba(0,0,0,.05);border-radius: 3px;padding: 2px 4px;"">nums_list = [2, 5]</code></li>
<li><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;background-color: rgba(0,0,0,.05);border-radius: 3px;padding: 2px 4px;"">append 1</code> - append 1 to the list, <code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;background-color: rgba(0,0,0,.05);border-radius: 3px;padding: 2px 4px;"">nums_list = [2, 5, 1]</code></li>
<li><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;background-color: rgba(0,0,0,.05);border-radius: 3px;padding: 2px 4px;"">sort</code> - sort the list, <code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;background-color: rgba(0,0,0,.05);border-radius: 3px;padding: 2px 4px;"">nums_list = [1, 2, 5]</code></li>
<li><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;background-color: rgba(0,0,0,.05);border-radius: 3px;padding: 2px 4px;"">print</code> - print the list</li><br/>So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[1, 2, 5]
</code></pre>

Solution Code:n = int(input())

nums_list = []
for i in range(n):
 command = input().split()
 if command[0] == 'insert':
 index = int(command[1])
 value = int(command[2])
 nums_list.insert(index, value)
 elif command[0] == 'append':
 value = int(command[1])
 nums_list.append(value)
 elif command[0] == 'pop':
 nums_list.pop()
 elif command[0] == ""remove"":
 value = int(command[1])
 nums_list.remove(value)
 elif command[0] == ""sort"":
 nums_list.sort()
 elif command[0] == ""print"":
 print(nums_list)"
8338cf5e-4c64-444f-bc8f-d673d9fc5f48,"For this problem, the prefilled code will contain a list. Write a program to count all the occurrences of the given number (N) in the list.<hr><b>Input</b><br/><br/>The input will be a single line containing an integer (N).<hr><b>Output</b><br/><br/>The output should be a single line containing the count of all the occurrences of the given number (N) in the list.<hr><b>Explanation</b><br/><br/>For example, if the given N is 5, the output should be 2, as 5 has two occurrences in the list.

Solution Code:nums_list = [5, 10, 20, 35, 5, 50, 20, 100, 200, 10, 150, 100, 100, 20, 20]
number = int(input())

count_of_occurrences = nums_list.count(number)
print(count_of_occurrences)"
fe4b2f4e-7e28-4c86-abcc-5b3fd8342287,"Given a sentence `S` that contains space-separated words, write a program to print a list of words that do not start with the lowercase letter **a**.


---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a list of words that do not start with the lowercase letter **a**.

---

#### Explanation

For example, if the given sentence is `S = ""The favorite dish of all ages was apple pie""`,

- The words in the sentence **The favorite dish of all ages was apple pie** are **The, favorite, dish, of, all, ages, was, apple** and **pie**.
- The words that do not start with the lowercase letter **a** are **The**, **favorite**, **dish**, **of**, **was** and **pie**.

The output should be,

```
['The', 'favorite', 'dish', 'of', 'was', 'pie']
```

Solution Code:Sentence = input().split()
new_list = []
for i in Sentence:
  if i[0] != ""a"":
    new_list.append(i)
print(new_list)"
338d198d-0160-426e-8095-3df0fbb918ec,"Given a number `N`, write a program that reads `N` lines of input containing space-separated strings and prints a list of all the strings on `N` lines sorted in ascending order.

---

#### Input

The first line of input contains an integer representing `N`.
The next `N` lines of input contain space-separated strings.

---

#### Output

The output should be a single line containing a list of all the strings on `N` lines sorted in ascending order.

---

#### Explanation

For example, if the given number is `N = 3`,

- The **3** lines of space-separated strings are,

```
1 2 3 
6 
8 7 
```
- The list that has **3** lines of space-separated strings sorted in ascending order is **['1', '2', '3', '6', '7', '8']**.

The output should be,

```
['1', '2', '3', '6', '7', '8']
```

Solution Code:a = int(input())
list_a = []
for i in range(a):
    m = input().split()
    list_a += m
    len_list_a = len(list_a)
for j in range(len_list_a):
    list_a[j] = list_a[j] # Here we wnat srings dont convet into integers
list_a = sorted(list_a)
print(list_a)"
4bba3eb5-de66-4bba-a964-905bffe984f2,"Write a program to check if the last three characters in the two given strings are the same.

---

#### Input

The first and second lines of inputs are strings.

---

#### Output

The output should be either `True` or `False`.

---

#### Explanation

Given strings are `apple`, `pimple`. In both the strings, the last three characters `ple` are common. 

So the output should be `True`.

Solution Code:word1=input()
word2=input()
length1=len(word1)-3
length2=len(word2)-3
index1=word1[length1:]
index2=word2[length2:]
print(index1 == index2)"
5aefd66e-0c63-40d0-b18e-f2e073a9ed5a,"Write a program that reads the length and breadth of the rectangle and checks if the area of the rectangle is less than or equal to the perimeter of the rectangle.

<MultiLineNote>

#### Formula to calculate the area of a rectangle:

Area of rectangle = length \* breadth

#### Formula to calculate the perimeter of a rectangle:

Perimeter of the rectangle = 2 \* (length + breadth)

</MultiLineNote>

---

#### Input

The first line of input contains an integer representing the length of the rectangle.
The second line of input contains an integer representing the breadth of the rectangle.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the area of the rectangle is less than or equal to the perimeter of the rectangle, otherwise **False** should be printed.

---

#### Explanation

For example, if the given length is **3** and the breadth is **4**,

- Area of the rectangle is `3 * 4 = 12`.
- Perimeter of the rectangle is `2 * (3 + 4) = 14`.
- The area of the rectangle **12** is less than or equal to the perimeter of the rectangle **14**.

The output should be **True** as the area of the rectangle is less than or equal to the perimeter of the rectangle.


Solution Code:length = int(input())
breath = int(input())

area = (length * breath)
perameter = 2 * (length + breath)

if area <= perameter:
    print(""True"")
else:
    print(""False"")"
03fc033e-7db5-49d3-89f4-da20d1f8b759,"Write a program that reads a two-digit number `N` and checks,

- If the number `N` is greater than **25**.
- If the first digit of `N` is greater than the second digit of `N`.

Print the result as shown in sample output.

---

#### Input

The input will be a single line containing a two-digit integer.

---

#### Output

- The first line of output should be a boolean. **True** should be printed if the number is greater than **25**, otherwise **False** should be printed.

- The second line of output should be a boolean. **True** should be printed if the first digit is greater than the second digit, otherwise **False** should be printed.

---

#### Explanation

For example, if the given two-digit number is `N = 28`,

✔ `N` is greater than **25**.
✖ The first digit of `N` is greater than the second digit of `N`. ( first digit of `N` is **2** and the second digit of `N` is **8**, **2** is not greater than **8**)

The output should be

```
True
False
```


Solution Code:number = input()

first_digit = number[0]
second_digit = number[1]

is_greater_than_25 = int(number) > 25
is_greater = first_digit > second_digit

print(is_greater_than_25)
print(is_greater)"
ddf74286-546f-44b9-87e9-61482818e147,"Write a program that reads a percentage `P` and a number `N` and checks if the `P` percentage of **500** is equal to the number `N`.

<MultiLineNote>

##### The Percentage (P) of 500 can be calculated as:

value = (percentage / 100) \* 500
</MultiLineNote>

---

#### Input

The first line of input contains an integer representing `P`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the `P` percentage of **500** is equal to the number `N`, otherwise **False** should be printed.

---

#### Explanation

For example, if the given percentage is `P = 50` and number `N = 250`, the **50** percentage of **500** is,

```
value = (percentage / 100) * 500
value = (50 / 100) * 500
value = 0.5 * 500
value = 250.0
```

The output should be **True** as **250** (`P` percentage of **500**) is equal to **250** (number `N`).

Solution Code:percentage = int(input())
N = int(input())
value = (percentage / 100) * 500
Result = value == N
print(Result)"
d054a5da-c0ca-4087-840d-31f17614d893,"Write a program that reads two strings `S1` and `S2`, and checks if `S2` is the first part of `S1`.

<MultiLineNote>

No.of characters in the first part of `S1` is equal to the number of characters in `S2`.
</MultiLineNote>

---

#### Input

The first line of input contains a string representing `S1`.
The second line of input contains a string representing `S2`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if `S2` is the first part of `S1`, otherwise **False** should be printed.

---

#### Explanation

For example, if the given strings are `S1 = rainbow` and `S2 = rain`,

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""display: table-cell;vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">r</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">a</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">i</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">n</div>
   <div style=""display: table-cell;color: #808080;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">b</div>
   <div style=""display: table-cell;color: #808080;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">o</div>
   <div style=""display: table-cell;color: #808080;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 0;padding: 8px 12px;"">w</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""display: table-cell; vertical-align: inherit;font-weight: bold;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
   <div style=""display: table-cell; vertical-align: inherit;font-weight: bold;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
   <div style=""display: table-cell; vertical-align: inherit;font-weight: bold;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
   <div style=""display: table-cell; vertical-align: inherit;font-weight: bold;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
   <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
   <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
   <div style=""display: table-cell; vertical-align: inherit;border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">6</div>
</div>
<br/>

- The first part of **S1** is **rain**.
- The characters in `S2` are **rain**.
- The first part of **S1** and the characters of **S2** are the same.

The output should be **True** as the `S2` **rain** is the first part of the `S1` **rainbow**.

---

For example, if the given strings are `S1 = debug` and `S2 = bug`,

- The characters in `S2` are **bug**.
- The first part of **S1** is **deb**.

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""display: table-cell;vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">d</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">e</div>
   <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">b</div>
   <div style=""display: table-cell;color: #808080;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">u</div>
   <div style=""display: table-cell;color: #808080;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 0;padding: 8px 12px;"">g</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""display: table-cell; vertical-align: inherit;font-weight: bold;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
   <div style=""display: table-cell; vertical-align: inherit;font-weight: bold;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
   <div style=""display: table-cell; vertical-align: inherit;font-weight: bold;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
   <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
   <div style=""display: table-cell; vertical-align: inherit;border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
</div>
<br/>

- The first part of **S1** and the characters of **S2** are **not** the same.

The output should be **False** as the `S2` **bug** is not the first part of the `S1` **debug**.

Solution Code:s1 = input()
s2 = input()
length = len(s2)
if s2 == s1[:length]:
    print(""True"")
else:
    print(""False"")"
26157f2a-4d92-4e89-9f20-1babe3ab4039,"Write a program that reads the selling price `S` and buying price `B` of a product and checks if `S` is greater than `B`.

---

#### Input

The first line of input contains an integer representing the selling price `S`.
The second line of input contains an integer representing the buying price `B`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if `S` is greater than `B`, otherwise **False** should be printed.

---

#### Explanation

For example, if the given selling price `S = 600` and the buying price `B = 500`,

- The `S` is greater than `B`. (**600** is greater than **500**).

The output should be **True** as the selling price is greater than the buying price.


Solution Code:s = int(input())
b = int(input())
result = s > b 
print(result)"
77403e8b-6f79-42a9-80f8-f439759eaf8e,"Write a program that reads three numbers `A`, `B`, and `C`, and checks if each of the given numbers is greater than **5**.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.
The third line of input contains an integer representing `C`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if each of the given numbers is greater than **5**, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 7`, `B = 18` and `C = 239`,

✔ `A` is greater than **5**. (**7** is greater than **5**)
✔ `B` is greater than **5**. (**18** is greater than **5**)
✔ `C` is greater than **5**. (**239** is greater than **5**)

The output should be **True** as all the given numbers are greater than **5**.

Solution Code:first_number = input()
first_number = int(first_number)

second_number = input()
second_number = int(second_number)

third_number = input()
third_number = int(third_number)

result = (first_number > 5) and (second_number > 5) and (third_number > 5)
print(result)"
6f0715b7-73e2-4110-9b5a-16cb4dea2c4f,"Write a program that reads the marks in Maths `M`, Physics `P`, and Chemistry `C`, and checks if all the below conditions are satisfied.

- `M + P >= 100` or `P + C >= 100` or `M + C >= 100`
- `M + P + C >= 180`

---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `P`.
The third line of input contains an integer representing `C`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if all the given conditions are satisfied, otherwise **False** should be printed.

---

#### Explanation

For example, if the given marks are `M = 82`, `P = 55`, and `C = 45`,

✔ `M + P >= 100` or `P + C >= 100` or `M + C >= 100`. (`82 + 55 = 137`, **137** is greater than or equal to **100**)
✔ `M + P + C >= 180`. (`82 + 55 + 45 = 182`, **182** is greater than **180**)

The output should be **True** as all the given conditions are satisfied.

Solution Code:maths = int(input())
physics = int(input())
chemistry = int(input())


sum_of_maths_physics = maths + physics
sum_of_physics_chemistry = physics + chemistry
sum_of_chemistry_maths = chemistry + maths

total_marks = maths + physics + chemistry

is_sum_greater_or_equal = (sum_of_maths_physics >= 100) or (sum_of_physics_chemistry >= 100) or (sum_of_chemistry_maths >= 100)
is_total_marks_greater_or_equal = (total_marks >= 180)

result = is_sum_greater_or_equal and is_total_marks_greater_or_equal
print(result)"
ed06ecaa-e714-497a-a80f-f65611ec1689,"Write a program to check if the given two digit number is greater than 25 and its first digit is greater than its second digit.<hr><b>Input</b><br/><br/>The first line of the input will be a two digit integer<hr><b>Output</b><br/><br/>Print &quot;True&quot; if the number is greater than 25 and its first digit is greater than its second digit.<br/>In all other cases print &quot;False&quot;.<hr><b>Explanation</b><br/><br/>When the given number is 24: <br/>✖ Greater than 25<br/>✖ First digit greater than second digit (2 is less than 4)<br/><br/>When the given number is 42:<br/>✔ Greater than 25<br/>✔ First digit greater than second digit (4 is greater than 2)

Solution Code:a = input()

is_above = int(a) > 25

first_digit = a[0]
second_digit = a[1]

first_digit = int(first_digit)
second_digit = int(second_digit)

is_greater = first_digit > second_digit

result = is_above and is_greater
print(result)"
b7c58af1-24ec-4ec8-8a1b-16c5c054730f,"Write a program that reads three numbers `A`, `B`, and `C`, and checks if the sum of any two numbers is **always** greater than **10**.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.
The third line of input contains an integer representing `C`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the sum of any two numbers is **always** greater than **10**, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 4`, `B = 8` and `C = 17`. 

The sum of `A`, `B` and the sum of `B`, `C` and the sum of `C`, `A` should be greater than **10**.

✔ `A + B` is greater than **10**. (`4 + 8 = 12`, **12** is greater than **10**)
✔ `B + C` is greater than **10**. (`8 + 17 = 25`, **25** is greater than **10**)
✔ `C + A` is greater than **10**. (`17 + 4 = 21`, **21** is greater than **10**)

The output should be **True** as the sum of any two numbers is always greater than **10**.

Solution Code:first_number = input()
first_number = int(first_number)

second_number = input()
second_number = int(second_number)

third_number = input()
third_number = int(third_number)

is_first_second_sum_greater = (first_number + second_number) > 10
is_second_third_sum_greater = (second_number + third_number) > 10
is_third_first_sum_greater = (third_number + first_number) > 10

result = is_first_second_sum_greater and is_second_third_sum_greater and is_third_first_sum_greater
print(result)"
1626f797-0b91-44e1-ae65-424f55883cc1,"Write a program that reads three numbers `A`, `B`, and `C` and checks if each number is greater than or equal to **20**. 

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.
The third line of input contains an integer representing `C`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if each number is greater than or equal to **20**, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 10`, `B = 20` and `C = 30`,

✖ **10** is greater than or equal to **20**. (**10** is less than **20**)
✔ **20** is greater than or equal to **20**. (**20** is equal to **20**)
✔ **30** is greater than or equal to **20**. (**30** is greater than **20**)

The output should be **False** as not all of the numbers greater than or equal to **20**.

Solution Code:first_number = int(input())
second_number = int(input())
third_number = int(input())

is_first_number_greater = first_number >= 20
is_second_number_greater = second_number >= 20
is_third_number_greater = third_number >= 20

is_greater = is_first_number_greater and is_second_number_greater and is_third_number_greater
print(is_greater)"
1caefc79-957e-414b-bc9e-ec53e9c65e2c,"Write a program that reads two numbers `A` and `B` and checks if the sum of `A` and `B` is less than **10**.

Print the sum of `A` and `B` if the sum of `A` and `B` is less than **10**. Otherwise, print the product of `A` and `B`.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing an integer. The sum of `A` and `B` should be printed if the sum of `A` and `B` is less than **10**. Otherwise, the product of `A` and `B` should be printed. 

---

#### Explanation

For example, if the given numbers are `A = 1` and `B = 2`,

✔ The sum of `A` and `B` is less than **10**. (Sum of `A` and `B` is **3** (`1 + 2 = 3`). **3** is less than **10**)

The output should be **3** (`1 + 2 = 3`) as the sum of `A` and `B` is less than **10**.

<br/>

For example, if the given numbers are `A = 42` and `B = 10`,

✖ The sum of `A` and `B` is less than **10**. (Sum of `A` and `B` is **52** (`42 + 10 = 52`). **52** is **not** less than **10**)

The output should be **420** (`42 * 10 = 420`) as the sum of `A` and `B` is **not** less than **10**.

Solution Code: a=int(input())
b=int(input())
sum_of_two_numbers = (a+b)
is_less_than = sum_of_two_numbers < 10
if is_less_than:
    print(a+b)
else:
    print(a*b)"
8c4c5ffe-d095-4356-9753-21341f265e13,"Write a program that reads the rank of a student `R` and checks if `R` is less than **10**.

Print **HONOR STUDENT** if `R` is less than **10**. Otherwise, print **NORMAL STUDENT**.

---

#### Input

The input will be a single line containing an integer representing `R`.

---

#### Output

The output should be a single line containing a string. **HONOR STUDENT** should be printed if `R` is less than **10**. Otherwise, **NORMAL STUDENT** should be printed.

---

#### Explanation

For example, if the given rank is `R = 1`, the output should be **HONOR STUDENT** as **1** is less than **10**.

<br/>

For example, if the given rank is `R = 15`, the output should be **NORMAL STUDENT** as **15** is **not** less than **10**.

Solution Code:rank = int(input())

if rank<10 :
    print(""HONOR STUDENT"")
else :
    print(""NORMAL STUDENT"")"
6167e825-f3af-4b9c-8cff-7c3200006d07,"Write a program that reads the marks `M` in Maths and marks `P` in Physics and checks if both `M` and `P` are greater than **35** or sum of `M` and `P` is greater than or equal to **100**.

Print **Qualified** if both `M` and `P` are greater than **35** or sum of `M` and `P` is greater than or equal to **100**. Otherwise, print **Not Qualified**.

---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `P`.

---

#### Output

The output should be a single line containing a string. **Qualified** should be printed if both `M` and `P` are greater than **35** or sum of `M` and `P` is greater than or equal to **100**. Otherwise, **Not Qualified** should be printed.

---

#### Explanation

For example, if the given marks are `M = 50` and `P = 40`,

✔ Both `M` and `P` are greater than **35**. (**50** and **40** are greater than **35**)
✖ Sum of `M` and `P` is greater than or equal to **100**. (`50 + 40 = 90`, **90** is **not** greater than or equal to **100**)

The output should be **Qualified** as both `M` and `P` are greater than **35**.

Solution Code:m = int(input())
p = int(input())
m_p_is_greater_than_35 = (m>35 and p > 35) 

sum_m_p_is_greater_than_or_equals_to_100 = (m + p >= 100) 

if m_p_is_greater_than_35 or sum_m_p_is_greater_than_or_equals_to_100:

    print(""Qualified"") 

else:

    print(""Not Qualified"")"
9e0c34f9-f092-4931-bfbe-65cd978b3654,"Write a program that reads the marks `M` in Maths, marks `P` in Physics and marks `C` in Chemistry and checks if both the below conditions are satisfied.

* `M >= 35` and `P >= 35` and `C >= 35`.
* `M + P >= 90` or `P + C >= 90` or `M + C >= 90`.

---

#### Input

The first line of input contains an integer representing marks `M` in Maths.
The second line of input contains an integer representing marks `P` in Physics.
The third line of input contains an integer representing marks `C` in Chemistry.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if both the given conditions are satisfied, otherwise **False** should be printed.

---

#### Explanation

For example, if the given marks are `M = 50`, `P = 35` and `C = 40`,


<ul style=""list-style-type: none;padding:0;"">
  <li style=""margin:0;"">
    <details style=""margin:0;"">
      <summary style=""margin:0;padding:0;"">✔ `M >= 35` and `P >= 35` and `C >= 35`</summary>
        <ul style=""list-style-type: none;"">
          <li style=""margin:0;padding:0;"">✔ `M` is greater than or equal to **35**. (**50** is greater than **35**)</li>
          <li style=""margin:0;padding:0;"">✔ `P` is greater than or equal to **35**. (**35** is equal to **35**)</li>
          <li style=""margin:0;padding:0;"">✔ `C` is greater than or equal to **35**. (**40** is greater than **35**)</li>
        </ul>
    </details>
  </li>
  <li style=""margin:0;"">
    <details style=""margin:0;"">
      <summary style=""margin:0;"">✔ `M + P >= 90` or `P + C >= 90` or `M + C >= 90`</summary>
        <ul style=""list-style-type: none;"">
          <li style=""margin:0;"">✖ `M + P` is greater than or equal to **90**. (`50 + 35 = 85`, **85** is less than **90**)</li>
          <li style=""margin:0;"">✖ `P + C` is greater than or equal to **90**. (`35 + 40 = 75`, **75** is less than **90**)</li>
          <li style=""margin:0;"">✔ `M + C` is greater than or equal to **90**. (`50 + 40 = 90`, **90** is equal to **90**)</li>
       </ul>
    </details>
  </li>
</ul>

The output should be **True** as both the given conditions are satisfied.

Solution Code:M = int(input())
P = int(input())
C = int(input())


print((M >= 35 and P >= 35 and C >= 35) and (M + P >= 90 or P + C >= 90 or C + M >= 90))"
20106fec-f50f-4799-8b7a-c0c48c6b4f7c,"Write a program that reads two numbers `A` and `B` and checks if the sum of `A` and `B` is negative or the product of `A` and `B` is negative.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the sum of `A` and `B` is negative or the product of `A` and `B` is negative, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 5` and `B = -3`,

✖ The sum of `A` and `B` is negative. (`5 + (-3) = 2`, **2** is a positive number)
✔ The product of `A` and `B` is negative. (`5 * (-3) = -15`, **-15** is a negative number)

The output should be **True** as the product is negative.

Solution Code:a = int(input())
b = int(input())

sum_of_a_and_b = a + b
product_of_a_and_b = a * b

if sum_of_a_and_b < 0 or product_of_a_and_b < 0:
    print(True)
else:
    print(False)"
589aa0e2-1fd7-40be-b2ae-71dea77e4a30,"Write a program that reads three sides `A`, `B`, and `C` of a triangle and checks if the sum of any two sides of the triangle is **always** greater than the third side.

---

#### Input

The first line of input contains an integer representing side `A`.
The second line of input contains an integer representing side `B`.
The third line of input contains an integer representing side `C`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the sum of any two sides of the triangle is **always** greater than the third side, otherwise **False** should be printed.

---

#### Explanation

For example, if the given sides of the triangle are `A = 3`, `B = 4` and `C = 5`,

The sum of sides `A`, `B` should be greater than `C` and the sum of sides `B`, `C` should be greater than `A` and the sum of sides `C`, `A` should be greater than `B`.

✔ `A + B` is greater than `C`. (`3 + 4 = 7`, **7** is greater than **5**) 
✔ `B + C` is greater than `A`. (`4 + 5 = 9`, **9** is greater than **3**) 
✔ `C + A` is greater than `B`. (`5 + 3 = 8`, **8** is greater than **4**)

The output should be **True** as the sum of any two sides of the triangle is **always** greater than the third side.

Solution Code:a=int(input()) 
b=int(input())
c=int(input()) 

if (a+b > c) and (b+c > a) and (c+a > b) :
    print(""True"") 
else:
    print(""False"")
"
b074047b-31ec-4fca-adc2-21256783d973,"Write a program that reads three numbers `A`, `B`, and `C`, and checks if each number is greater than **100**.

Print **All are greater than 100** if each number is greater than **100**. Otherwise, print **Not all are greater than 100**.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.
The third line of input contains an integer representing `C`.

---

#### Output

The output should be a single line containing a string. **All are greater than 100** should be printed if each number is greater than **100**. Otherwise, **Not all are greater than 100** should be printed.

---

#### Explanation


For example, if the given numbers are `A = 110`, `B = 256`, and `C = 6350`,

✔ `A` is greater than **100**. (**110** is greater than **100**) 
✔ `B` is greater than **100**. (**256** is greater than **100**) 
✔ `C` is greater than **100**. (**6350** is greater than **100**)

The output should be **All are greater than 100** as each number is greater than **100**.

Solution Code:first_number = int(input())
second_number = int(input())
third_number = int(input())


if (first_number > 100 and second_number > 100 and third_number > 100):
 print(""All are greater than 100"")
else:
 print(""Not all are greater than 100"")"
e96a6bad-0d8a-4392-9172-5620a1a18691,"Write a program that reads the three angles `A`, `B`, and `C` of a Triangle and checks if the sum of the three angles of the Triangle is equal to **180**.

Print the Triangle as given below if the sum of the three angles of the Triangle is equal to **180**. Otherwise, print **Not a Valid Triangle**.

```
*
**
***
```

---

#### Input

The first line of input contains an integer representing angle `A`.
The second line of input contains an integer representing angle `B`.
The third line of input contains an integer representing angle `C`.

---

#### Output

The output should be three lines containing a Triangle as shown in the sample output if the sum of `A`, `B` and `C` is equal to **180**.

Otherwise, the output should be a single line containing the string **Not a Valid Triangle**.

---

#### Explanation

For example, if the given three angles of the Triangle are `A = 60`, `B = 45`, and `C = 75`,

* The sum of the three angles of the Triangle is equal to **180**. (`60 + 45 + 75 = 180`)

* The output should be the Triangle as given below,

```
*
**
***
```

To print the Triangle, print a star on the first line, two stars on the second line and three stars on the third line.

<br>

For example, if the given three angles of the Triangle are `A = 80`, `B = 90` and `C = 100`, 

* The sum of the three angles of the Triangle is **not** equal to **180**. (`80 + 90 + 100 = 270`)

* The output should be **Not a Valid Triangle**.

Solution Code:first_angle = int(input())
second_angle = int(input())
third_angle = int(input())

sum_of_three_angles = first_angle + second_angle + third_angle

if sum_of_three_angles == 180:
 print(""*"")
 print(""*"" * 2)
 print(""*"" * 3)
else:
 print(""Not a Valid Triangle"")"
cd7c28a3-c471-4152-8d2f-8e30fae7be3c,"Write a program that reads a number `N` and checks if `N` is greater than **10**.

Print the result of `N + 5` if `N` is greater than **10**. Otherwise, print the result of `N + 1`.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing an integer. The result of `N + 5` should be printed if `N` is greater than **10**. Otherwise, the result of `N + 1` should be printed.

---


#### Explanation

For example, if the given number is `N = 3`,

- **3** is **not** greater than **10**.
- The result of `N + 1` is **4** (`3 + 1 = 4`). 

The output should be **4** as `N` is **not** greater than **10**.

<br/>

For example, if the given number is `N = 63`,

- **63** is greater than **10**.
- The result of `N + 5` is **68** (`63 + 5 = 68`). 

The output should be **68** as `N` is greater than **10**.

Solution Code:number = int(input())

if number > 10:
 number = number + 5
else:
 number = number + 1

print(number)"
59a0ce92-d013-4d55-b855-86fbd0cf2077,"Write a program that reads three sides `A`, `B`, and `C` of a triangle and checks if the sum of any two sides of the triangle is **always** greater than the third side.

Print **It's a Triangle** if the sum of any two sides of the triangle is **always** greater than the third side. Otherwise, print **It's not a Triangle**.

---

#### Input

The first line of input contains an integer representing side `A`.
The second line of input contains an integer representing side `B`.
The third line of input contains an integer representing side `C`.

---

#### Output

The output should be a single line containing a string. **It's a Triangle** should be printed if the sum of any two sides of the triangle is **always** greater than the third side. Otherwise, **It's not a Triangle** should be printed.

---

#### Explanation

For example, if the given sides of the triangle are `A = 4`, `B = 5` and `C = 3`,

The sum of sides `A`, `B` should be greater than `C` and the sum of sides `B`, `C` should be greater than `A` and the sum of sides `C`,`A` should be greater than `B`.

✔ `A + B` is greater than `C`. (`4 + 5 = 9`, **9** is greater than **3**) 
✔ `B + C` is greater than `A`. (`5 + 3 = 8`, **8** is greater than **4**) 
✔ `C + A` is greater than `B`. (`3 + 4 = 7`, **7** is greater than **5**)

The output should be **It's a Triangle** as the sum of any two sides of the triangle is **always** greater than the third side.

Solution Code:first_side = int(input())
second_side = int(input())
third_side = int(input())

is_greater_than_third_side = (first_side + second_side) > third_side
is_greater_than_first_side = (second_side + third_side) > first_side
is_greater_than_second_side = (third_side + first_side) > second_side

if is_greater_than_first_side and is_greater_than_second_side and is_greater_than_third_side:
 print(""It's a Triangle"")
else:
 print(""It's not a Triangle"")"
a4c572ca-4914-4917-a99b-7bf27bcb2c35,"A company decided to give a bonus of 5% to an employee if his/her years of service is more than five years.<br/>Write a program that reads an employee's salary and years of service and decides whether the employee gets the bonus or not.<hr><b>Input</b><br/><br/>The first line of input will contain the salary of an employee.<br/>The second line of input will contain years of service.<hr><b>Output</b><br/><br/>If the employee gets a bonus, print the net bonus amount.<br/>If the employee doesn&#x27;t get the bonus, print &quot;No Bonus&quot;,.<hr><b>Explanation</b><br/><br/>For example, if the employee&#x27;s salary is 25000 and years of experience is 3. As the years of experience is less than 5, the output should be &quot;No Bonus&quot;.<br/>Similarly, if the employee&#x27;s salary is 50000 and years of experience is 6. As the years of experience is more than 5, the employee is eligible for the bonus. By computing the 5% of his salary, the net bonus amount should be 2500.0

Solution Code:salary = int(input())
experience = int(input())
if experience > 5:
 print(salary*0.05)
else:
 print(""No Bonus"")"
6065bb5a-0ad1-4b73-8586-ebea1a906bb9,"Given three angles of a triangle, write a program to check whether the triangle is valid or not. A triangle is valid if the sum of its three angles is equal to 180 degrees.<hr><b>Input</b><br/><br/>The first line of input will contain the first angle of the triangle.<br/>The second line of input will contain the second angle of the triangle.<br/>The third line of input will contain the third angle of the triangle.<hr><b>Output</b><br/><br/>If the sum of the three angles is equal to 180, print &quot;It&#x27;s a Triangle&quot;. In all other cases, print &quot;It&#x27;s not a Triangle&quot;.<hr><b>Explanation</b><br/><br/>For example, if the first angle is 80, the second angle is 90, and the third angle is 100. Therefore the sum of the three angles(80 + 90 + 100) is 270, which is not equal to 180. So the output should be &quot;It&#x27;s not a Triangle&quot;.<br/>Similarly, if the first angle is 60, the second angle is 60, and the third angle is 60. Therefore the sum of the three angles(60 + 60 + 60) is 180, which is equal to 180. So the output should be &quot;It&#x27;s a Triangle&quot;.<br/>

Solution Code:first_angle = int(input())
second_angle = int(input())
third_angle = int(input())

sum_of_three_angles = first_angle + second_angle + third_angle
if sum_of_three_angles == 180:
 print(""It's a Triangle"")
else:
 print(""It's not a Triangle"")"
e550d434-20ae-4173-a4b8-d24e4dced57c,"Write a program that reads two numbers `A` and `B` and checks if one of the below conditions is satisfied.

* One of `A` and `B` is equal to **6**.
* The sum of `A` and `B` is equal to **6**.
* The difference between `A` and `B` is equal to **6**.

Print **Lucky** if one of the given conditions is satisfied. Otherwise, print **Not Lucky**.

<MultiLineNote>

Both `A - B` and `B - A` is used to calculate the difference between `A` and `B`.

</MultiLineNote>

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a string. **Lucky** should be printed if one of the given conditions is satisfied. Otherwise, **Not Lucky** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 4` and `B = 10`,

<ul style=""list-style-type: none;padding:0;"">
  <li style=""margin:0;"">
    <details style=""margin:0;"">
      <summary style=""margin:0;padding:0;"">✖ One of `A` and `B` is equal to **6**.</summary>
        <ul style=""list-style-type: none;"">
          <li style=""margin:0;padding:0;"">`A` is equal to **6** or `B` is equal to **6**.</li>
          <li style=""margin:0;padding:0;"">✖ `A` is equal to **6**. (**4** is not equal to **6**)</li>
          <li style=""margin:0;padding:0;"">✖ `B` is equal to **6**. (**10** is not equal to **6**)</li>
        </ul>
    </details>
  </li>
  <li style=""margin:0;"">
    <details style=""margin:0;"">
      <summary style=""margin:0;padding:0;"">✖ The sum of `A` and `B` is equal to **6**.</summary>
         <ul style=""list-style-type: none;"">
          <li style=""margin:0;padding:0;"">The sum of `A` and `B` is **14** (`10 + 6 = 14`).</li>
          <li style=""margin:0;padding:0;"">✖ The sum of `A` and `B` is equal to **6**. (**14** is not equal to **6**)</li>
        </ul>
    </details>
  </li>
  <li style=""margin:0;"">
    <details style=""margin:0;"">
      <summary style=""margin:0;padding:0;"">✔ The difference between `A` and `B` is equal to **6**.</summary>
        <ul style=""list-style-type: none;"">
          <li style=""margin:0;padding:0;"">The result of `A - B` is equal to **6** or `B - A` is equal to **6**.</li>
          <li style=""margin:0;padding:0;"">✖ The result of `A - B` is equal to **6**. (`4 - 10 = -6`, **-6** is **not** equal to **6**)</li>
          <li style=""margin:0;padding:0;"">✔ The result of `B - A` is equal to **6**. (`10 - 4 = 6`, **6** is equal to **6**)</li>
        </ul>
    </details>
  </li>
</ul>

The output should be **Lucky** as one of the given conditions is satisfied.

Solution Code:a = int(input())
b = int(input())

is_any_number_has = ((a == 6) or (b == 6))
is_sum_equal_to_6 = ((a + b) == 6)
is_diff_equal_to_6 = ((a - b) == 6) or ((b - a) == 6)

if is_any_number_has or is_sum_equal_to_6 or is_diff_equal_to_6:
 print(""Lucky"")
else:
 print(""Not Lucky"")"
423fcd11-0ab3-4055-892e-06f186c7a078,"Write a program that reads three numbers `A`, `B`, and `C`, and checks if the difference between any two numbers (`A - B`, `B - C` and `C - A`) is **always** less than **25**.

Print **Difference is less than 25** if the difference between any two numbers (`A - B`, `B - C` and `C - A`) is **always** less than **25**. Otherwise, print **Difference is not less than 25**.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.
The third line of input contains an integer representing `C`.

---

#### Output

The output should be a single line containing a string. **Difference is less than 25** should be printed if the difference between any two numbers is **always** less than **25**. Otherwise, **Difference is not less than 25** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 65`, `B = 60`, and `C = 52`,

The difference between `A`, `B` (`A - B`) and the difference between `B`, `C` (`B - C`) and the difference between `C`, `A` (`C - A`) should be less than **25**.

✔ The difference `A - B` is less than **25**. (`65 - 60 = 5`, **5** is less than **25**) 
✔ The difference `B - C` is less than **25**. (`60 - 52 = 8`, **8** is less than **25**) 
✔ The difference `C - A` is less than **25**. (`52 - 65 = -13`, **-13** is less than **25**)

The output should be **Difference is less than 25** as the difference between any two numbers (`A - B`, `B - C` and `C - A`) is **always** less than **25**.

Solution Code:first_number = int(input())
second_number = int(input())
third_number = int(input())

is_first_second_difference_less = (first_number - second_number) < 25
is_second_third_difference_less = (second_number - third_number) < 25
is_third_first_difference_less = (third_number - first_number) < 25

if is_first_second_difference_less and is_second_third_difference_less and is_third_first_difference_less:
 print(""Difference is less than 25"")
else:
 print(""Difference is not less than 25"")"
2cba14cc-77a1-4dfd-ae16-0300f6a52167,"Write a program to check if the first three characters in the two given strings are the same.<hr><b>Input</b><br/><br/>The first line of input will be a string.<br/>The second line of input will be a string.<hr><b>Output</b><br/><br/>Print &quot;True&quot; if the the first three characters in the two given strings are the same.<br/>In all other cases print &quot;False&quot;.<hr><b>Explanation</b><br/><br/>When the given words are &quot;Apple&quot; and &quot;Application&quot;, first three characters in both the strings are the same (&quot;App&quot;)<br/><br/>When the given words are &quot;Android&quot; and &quot;Application&quot;, the first three characters in both the strings are different (&quot;And&quot; != &quot;App&quot;)

Solution Code:first_str = input()
second_str = input()

first_str_part = first_str[:3]
second_str_part = second_str[:3]

are_both_same = first_str_part == second_str_part
print(are_both_same)"
ae4adcc6-d396-46b4-b4bb-a156951bc681,"Write a program to check if the given string is a valid password or not. A string is considered as a valid password if the number of characters present is greater than 7.<hr><b>Input</b><br/><br/>The input will be a single line containing a word.<hr><b>Output</b><br/><br/>The output should be True or False.<hr><b>Explanation</b><br/><br/>For example, if the given input is &quot;passwd&quot;, it has only 6 characters (less than 7). So the output should be False.

Solution Code:password = input()
length_of_the_password = len(password)
is_valid_password = length_of_the_password > 7
print(is_valid_password)"
14879472-fb42-47c1-8a71-9bd790e4a8f4,"Write a program that reads two numbers `A` and `B`, and checks if `B` is greater than `A` by one.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if `B` is greater than `A` by one, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 2` and `B = 3`,

The `B` is greater than `A` by only **one**.

The output should be **True** as `B` is greater than `A` by one.


Solution Code:first_number = input()
first_number = int(first_number)
second_number = input()
second_number = int(second_number)

difference = second_number - first_number
result = difference == 1

print(result)"
070fd3c4-a3bb-4df6-b2c6-cdb784ff29e2,"Write a program that reads two numbers `A` and `B` and checks if the `A` is greater than `B`. Print the result as shown in the sample output.

---

#### Input

The first line of input contains an integer.
The second line of input contains an integer.

---

#### Output

The output should be a single line containing a string as shown in the sample output.

---

#### Explanation

For example, if the given numbers are `A = 8` and `B = 5`, 

* `A` is greater than `B`: **True**. (**8** is greater than **5**)
* Add the string **""A > B is ""** before **True**.

The output should be **A > B is True**.

Solution Code:a = input()
a = int(a)
b = input()
b = int(b)

result = a > b
result = str(result)

print(""A > B is "" + result)"
9129f793-b1ef-4be7-bd4c-8f9453032775,"Write a program that reads two words `A` and `B` and checks if the second word `B` is the last part of the first word `A`.

---

#### Input

The first line of input contains a string representing `A`.
The second line of input contains a string representing `B`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the second word `B` is the last part of the first word `A`, otherwise **False** should be printed.

---

#### Explanation

For example, if the given words are `A = Blackhole` and `B = hole`,

The output should be **True** as **hole** is the last part of the word **Blackhole**.

Solution Code:first_word = input()
second_word = input()

first_word_length = len(first_word)
second_word_length = len(second_word)

start_index = first_word_length - second_word_length
part = first_word[start_index:]

result = part == second_word
print(result)"
0e4e8bdf-62ce-46a8-ab7b-a630a4686296,"Write a program that reads a two digit number `N`. The `N` consists of only two digits. Check if the sum of the digits of `N` is greater than **7**.

---

#### Input

The input will be a single line containing a two digit integer.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the sum of the digits of the two digit number `N` is greater than **7**, otherwise **False** should be printed.

---

#### Explanation


For example, if the given two digit number `N` is **45**

* The digits in `N` (**45**) are **4** and **5**.
* Sum of digits of **45** is **9**. (`4 + 5 = 9`)

The output should be **True** as the sum of digits **9** is greater than **7**.

Solution Code:number = input()

first_digit = number[0]
first_digit = int(first_digit)

second_digit = number[1]
second_digit = int(second_digit)

sum_of_digits = first_digit + second_digit
result = sum_of_digits > 7

print(result)"
120b7c69-2119-4b93-8be5-e6306cafac32,"Write a program that reads two numbers `A` and `B` and checks if both `A` and `B` are less than or equal to **1000** or `B` is greater than **500**.

Print **Pair** if both `A` and `B` are less than or equal to **1000** or `B` is greater than **500**. Otherwise, print **Not a Pair**.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a string. **Pair** should be printed if both `A` and `B` are less than or equal to **1000** or `B` is greater than **500**. Otherwise, **Not a Pair** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 300` and `B = 200`,

✔ Both **A** and **B** are less than or equal to **1000**. (**300** and **200** are less than or equal to **1000**)
✗ **B** is greater than **500**. (**200** is not greater than **500**)

The output should be **Pair** as both **300** and **200** are less than or equal to **1000**.


Solution Code:first_number = int(input())
second_number = int(input())

is_less_than_or_equal_to = first_number <= 1000 and second_number <= 1000
is_greater_than = second_number > 500
is_pair = (is_less_than_or_equal_to) or (is_greater_than)

if (is_pair):
 print(""Pair"")
else:
 print(""Not a Pair"")"
e0173d92-18ad-43a8-a147-93b36ef11201,"Write a program that reads the size `S` and page count `C` of a book and checks if `S` is equal to **large** or `C` is greater than or equal to **300**.

Print **Buy a Book** if `S` is equal to **large** or `C` is greater than or equal to **300**. Otherwise, print **Do Not Buy a Book**.

---

#### Input

The first line of input contains a string representing `S`.
The second line of input contains an integer representing `C`.

---

#### Output

The output should be a single line containing a string. **Buy a Book** should be printed if `S` is equal to **large** or `C` is greater than or equal to **300**. Otherwise, **Do Not Buy a Book** should be printed.

---

#### Explanation

For example, if the given size is `S = ""large""` and the page count is `C = 80`,

✔ `S` is equal to **large**. (**large** is equal to **large**)
✗ `C` is greater than or equal to **300**. (**80** is not greater than or equal to **300**)

The output should be **Buy a Book** as the size of the book `S` is equal to **large**.


Solution Code:size = input()
pages = int(input())

can_buy_book = (size == ""large"") or (pages >= 300)

if can_buy_book:
 print(""Buy a Book"")
else:
 print(""Do Not Buy a Book"")"
065dfb18-fc4a-40eb-9e65-a788e571db8b,"Write a program to print the relation between two numbers, `X` and `Y`.

---

#### Input

The first line is integer `X`.
The second line is integer `Y`.

---

#### Output

Print `X < Y` if `X` is less than `Y` otherwise, print `X >= Y`.

---

#### Explanation

Given  `X = 2`, `Y = 5`

As 2 < 5 (X < Y)

So the output is `X < Y`

Solution Code:x = int(input())
y = int(input())

if x < y:
 print(""X < Y"")
else:
 print(""X >= Y"")"
6cb81048-78a8-4845-afff-364ef0bd50f8,"Write a program that reads two numbers `A` and `B` and prints the greatest among the two numbers.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing an integer that is the greatest among the two numbers.

---

#### Explanation

For example, if the given numbers are `A = 4` and `B = 3`, the output should be **4** as **4** is greater than **3**.

Solution Code:first_number = int(input())
second_number = int(input())
if first_number > second_number:
 greater_number = first_number 
else:
 greater_number = second_number
print(greater_number)"
394177cf-743c-4791-828b-fa3f45f1fa3d,"Write a program that reads a number and checks if the given number is zero, positive or negative.

Print **Zero** if the given number is equal to **0**.
Print **Positive** if the given number is greater than **0**.
Print **Negative** if the given number is less than **0**.

---

#### Input

The input will be a single line containing an integer.

---

#### Output

The output should be a single line containing a string. **Zero** should be printed if the given number is equal to **0**. **Positive** should be printed if the given number is greater than **0**. **Negative** should be printed if the given number is less than **0**.

---

#### Explanation

For example,

* If the given number is **-12**, the output should be **Negative** as **-12** is less than **0**.
* If the given number is **15**, the output should be **Positive** as **15** is greater than **0**.

Solution Code:number = int(input())
if number > 0:
 print(""Positive"")
if number < 0:
 print(""Negative"")
if number == 0:
 print(""Zero"")"
8268250c-a7b3-40e3-9878-2d4aeb4b3161,"Write a program that reads the scores `A` and `B` of two players and checks if one of the scores is greater than **300** and the sum of the scores is less than **500**.

Print **Can team up** if one of the scores is greater than **300** and the sum of the scores is less than **500**, otherwise print **Cannot team up**.

---

#### Input

The first line of input contains an integer representing the score `A`.
The second line of input contains an integer representing the score `B`.

---

#### Output

The output should be a single line containing a string. **Can team up** should be printed if one of the scores is greater than **300** and the sum of the scores is less than **500**, otherwise **Cannot team up** should be printed.

---

#### Explanation

For example, if the given scores are `A = 350` and `B = 134`,

✔ One of the scores is greater than **300** (**350** is greater than **300**).
✔ The sum of scores is less than **500** (`350 + 134 = 484`, **484** is less than **500**).

The output should be **Can team up** as one of the scores is greater than **300** and the sum of the scores is less than **500**.


Solution Code:score_1 = int(input()) 
score_2 = int(input())

sum_of_scores = score_1 + score_2

if (score_1 > 300 or score_2 > 300) and (sum_of_scores < 500):
 print(""Can team up"")
else:
 print(""Cannot team up"")"
dcd10acf-a83e-4c2a-9de7-25da0da54a80,"Write a program that reads two numbers `A` and `B`, and checks if both `A` and `B` are positive numbers or both `A` and `B` are less than **70**.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if both `A` and `B` are positive numbers or both `A` and `B` are less than **70**, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 200` and `B = 50`,

✔ `A` and `B` are positive numbers. (**200** and **50** are positive numbers)
✖ `A` and `B` are less than **70**. (**200** is not less than **70**)

The output should be **True** as both `A` and `B` are positive numbers.

Solution Code:first_number = input()
first_number = int(first_number)

second_number = input()
second_number = int(second_number)

are_positive = (first_number > 0) and (second_number > 0)
are_less_than = (first_number < 70) and (second_number < 70)

result = are_positive or are_less_than

print(result)"
2a44dbb8-c600-45bc-8dd0-7acb5bdd78b9,"Write a program that reads two numbers `A` and `B`, and checks if one of the given numbers is a positive number.

<MultiLineNote>

Positive numbers are numbers that are greater than zero.
</MultiLineNote>

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if one of the given numbers is a positive number, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 4` and `B = -6`,

✔ `A` is a positive number. (**4** is greater than **0**)
✖ `B` is a positive number. (**-6** is greater than **0**)

The output should be **True** as one of the given numbers is a positive number.


Solution Code:first_number = input()
first_number = int(first_number)

second_number = input()
second_number = int(second_number)

result = (first_number > 0) or (second_number > 0)

print(result)"
fba867d2-ee6b-45ca-b2fb-07319b99afd1,"Write a program that reads two numbers `A` and `B`, and checks if both the given numbers are greater than **9**.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if both the given numbers are greater than **9**, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 11` and `B = 20`,

✔ `A` is greater than **9**. (**11** is greater than **9**)
✔ `B` is greater than **9**. (**20** is greater than **9**)

The output should be **True** as both the given numbers are greater than **9**.


Solution Code:first_number = input()
first_number = int(first_number)

second_number = input()
second_number = int(second_number)

result = (first_number > 9) and (second_number > 9)

print(result)"
901e9523-e685-4909-a49f-4ccb8de737c8,"Write a program that reads two numbers `A` and `B`, and checks if one of `A` and `B` is less than **60** and one of `A` and `B` is greater than **80**.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if one of `A` and `B` is less than **60** and one of `A` and `B` is greater than **80**, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 50` and `B = 90`,

✔ One of `A` and `B` is less than **60**. (**50** is less than **60**)
✔ One of `A` and `B` is greater than **80**. (**90** is greater than **80**)

The output should be **True**.


Solution Code:first_number = input()
first_number = int(first_number)

second_number = input()
second_number = int(second_number)

sum_of_numbers = first_number + second_number

is_less_than = (first_number < 60) or (second_number < 60)
is_greater_than = (first_number > 80) or (second_number > 80)

result = is_less_than and is_greater_than

print(result)"
3d459a9e-46f5-467a-80fd-f1ea063dc33c,"Write a program that reads two numbers `A` and `B`, and checks if one of the given numbers is a negative number and the sum of the given numbers is greater than **7**.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if one of the given numbers is a negative number and the sum of numbers is greater than **7**, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 13` and `B = -3`,

✔ One of the given numbers is a negative number. (**-3** is a negative number)
✔ Sum of the given numbers is greater than **7**. (`13 + (-3) = 10`, **10** is greater than **7**)

The output should be **True**.

Solution Code:first_number = input()
first_number = int(first_number)

second_number = input()
second_number = int(second_number)

sum_of_numbers = first_number + second_number

is_negative = (first_number < 0) or (second_number < 0)
is_greater_than = sum_of_numbers > 7

result = is_negative and is_greater_than

print(result)"
1e7e5740-596d-4c5e-a7a6-bab1d39f29e4,"Write a program that reads two numbers `A` and `B`, and checks if both the given numbers are negative numbers.

<MultiLineNote>

Negative numbers are numbers that are less than zero.
</MultiLineNote>

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if both the given numbers are negative, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are `A = -1` and `B = -2`,

✔ `A` is a negative number. (**-1** is less than **0**)
✔ `B` is a negative number. (**-2** is less than **0**)

The output should be **True** as both the given numbers are negative.


Solution Code:first_number = input()
first_number = int(first_number)

second_number = input()
second_number = int(second_number)

result = (first_number < 0) and (second_number < 0)

print(result)"
b072eb9b-3d74-4245-bbb5-89fe27db6821,"Write a program that reads two numbers `A` and `B`, and checks if the sum of `A` and `B` is **not greater than 100**.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the sum of `A` and `B` is not greater than **100**, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 30` and `B = 20`,

- The sum of `A` and `B` is **50** (`30 + 20 = 50`).

The output should be **True** as the sum of `A` and `B` is **not greater than 100**.

Solution Code:first_number = input()
first_number = int(first_number)

second_number = input()
second_number = int(second_number)

sum_of_numbers = first_number + second_number
is_greater_than = sum_of_numbers > 100

result = not(is_greater_than)

print(result)"
61eed1d0-1329-44b8-96a3-2bf133859f71,"Write a program that reads a day number and checks if the given day is a Sunday.

|Day | Day Number|
|--- | ---|
|Monday | 1|
|Tuesday | 2|
|Wednesday | 3|
|Thursday | 4|
|Friday | 5|
|Saturday | 6|
|Sunday | 7|

---

#### Input

The input will be a single line containing an integer.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the given day is Sunday, otherwise **False** should be printed.

---

#### Explanation

For example, 

* if the given day number is **7**, the output should be **True** as **7** is equal to the day number of Sunday which is **7**.

* if the given day number is **4**, the output should be **False** as **4** is not equal to the day number of Sunday which is **7**.

Solution Code:day_number = input()
day_number = int(day_number)

result = day_number == 7
print(result)"
85ce9278-2698-48c7-af8f-05af7fc632b8,"Write a program that reads a number and checks if the given number is a negative number.

<MultiLineNote>
Negative numbers are numbers that are less than zero.
</MultiLineNote>

---

#### Input

The input will be a single line containing an integer.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the given number is a negative number, otherwise **False** should be printed.

---

#### Explanation

For example, if the given number is **-25**, the output should be **True** as **-25** is less than zero.

Solution Code:number = input()
number = int(number)

result = number < 0
print(result)"
6a8b8701-1b55-43cc-9ebd-ea2463557612,"Write a program that reads two numbers and checks if the first number is less than or equal to the second number.

---

#### Input

The first line of input contains an integer.
The second line of input contains a float.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the first number is less than or equal to the second number, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are **2** and **5.3**, the output should be **True** as **2** is less than **5.3**.

Solution Code:first_number = input()
first_number = int(first_number)
second_number = input()
second_number = float(second_number)

result = first_number <= second_number
print(result)"
9f985ade-a39b-4f80-9a6d-3f15adba7f68,"Write a program that reads two numbers and checks if the given two numbers are not the same.

---

#### Input

The first line of input contains an integer.
The second line of input contains an integer.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the given two numbers are not the same, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are **2** and **3**, the output should be **True** as **2** is not equal to **3**.


Solution Code:first_number = int(input())
second_number = int(input())

result = first_number != second_number
print(result)"
89af65e9-3f73-4d9b-9f90-c2b34d855b9d,"Write a program that reads a number and checks if the given number is greater than **70**.

---

#### Input

The input will be a single line containing an integer.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the given number is greater than **70**, otherwise **False** should be printed.

---

#### Explanation

For example, if the given number is **86**, the output should be **True** as **86** is greater than **70**.

Solution Code:number = input()
number = int(number)

result = number > 70
print(result)"
6e822b84-347b-46ca-8656-d1dda1b3bb72,"Write a program that reads two numbers and checks if the first number is greater than the second number.

---

#### Input

The first line of input contains an integer.
The second line of input contains an integer.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the first number is greater than the second number, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are **6** and **4**, the output should be **True** as **6** is greater than **4**.

Solution Code:first_number = input()
first_number = int(first_number)
second_number = input()
second_number = int(second_number)

result = first_number > second_number
print(result)"
d5ff6e24-f31c-45de-be07-f468fd2ca258,"Write a program that reads the marks in Maths `M`, Physics `P`, and Chemistry `C`, and checks if any of the below conditions is satisfied.

- `M >= 70` and `P >= 60` and `C >= 60`
- `M + P + C >= 180`

---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `P`.
The third line of input contains an integer representing `C`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if any of the given conditions is satisfied, otherwise **False** should be printed.

---

#### Explanation

For example, if the given marks are `M = 0`, `P = 100`, and `C = 100`,

✗ `M >= 70` and `P >= 60` and `C >= 60` (**0** is less than **70**)
✔ `M + P + C >= 180`. (`0 + 100 + 100 = 200`, **200** is greater than **180**)

The output should be **True** as one of the given conditions is satisfied.

Solution Code:maths = int(input())
physics = int(input())
chemistry = int(input())

are_marks_greater = maths >= 70 and physics >= 60 and chemistry >= 60

marks_sum = maths + physics + chemistry
is_sum_greater_or_equal = marks_sum >= 180

result = are_marks_greater or is_sum_greater_or_equal
print(result)"
bea0d6c5-268a-4be1-920e-58074ea75af5,"Write a program to check if both of the given numbers are positive and if atleast one of them is greater than 5.

<MultiLineNote>
Zero is not a positive number.
</MultiLineNote>
---

####Input  
  
First line of the input will be an integer  
Second line of the input will be an integer

---

####Output
  
Print `True` if both the numbers are positive and if atleast one of the numbers is greater than 5.  
In all other cases print `False`

---

####Explanation
  
When the given numbers are -10 and 6:  
✔ At least one number is greater than 5 (6 is greater than 5)  
✖ Both the numbers are positive (-10 is a negative number.)  
  
When the given numbers are 10 and 1:  
✔ At least one number is greater than 5 (10 is greater than 5),  
✔ Both the numbers are positive.

Solution Code:a = input()
b = input()

a = int(a)
b = int(b)

is_both_positive = a > 0 and b > 0
is_one_greater = a > 5 or b > 5

result = is_both_positive and is_one_greater
print(result)"
d3eb10f0-11d1-49b9-a23a-c818f4732e4f,"Write a program that reads three numbers `A`, `B`, and `C`, and checks if any of the given numbers is less than **15**.

---

#### Input

The first line of input contains an integer `A`.
The second line of input contains an integer `B`.
The third line of input contains an integer `C`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if any of the given numbers is less than **15**, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 18`, `B = 2`, and `C = 20`,

✗ `A` is less than **15**. (**18** is not less than **15**)
✔ `B` is less than **15**. (**2** is less than **15**)
✗ `C` is less than **15**. (**20** is not less than **15**)

The output should be **True** as one of the given numbers is less than **15**.

Solution Code:first_number = input()
first_number = int(first_number)

second_number = input()
second_number = int(second_number)

third_number = input()
third_number = int(third_number)

result = (first_number < 15) or (second_number < 15) or (third_number < 15)

print(result)"
7f62ddba-8af7-4f17-a0e5-fdabe7bae45f,"Write a program that reads two numbers `A` and `B`, and checks if any of the given numbers is **not less than 15**.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if any of the given numbers is **not less than 15**, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 921` and `B = 6`,

✔ **A** is not less than **15**. (**921** is **not less than 15**)
✗ **B** is not less than **15**. (**6** is less than **15**)

The output should be **True** as one of the given numbers is **not less than 15**.

Solution Code:first_number = input()
first_number = int(first_number)

second_number = input()
second_number = int(second_number)

is_first_number_less_than = first_number < 15
is_second_number_less_than = second_number < 15

is_first_number_not_less_than = not(is_first_number_less_than)
is_second_number_not_less_than = not(is_second_number_less_than)

result = is_first_number_not_less_than or is_second_number_not_less_than
print(result)"
ea7dd156-9903-4814-8271-a439b6493a3f,"Write a program that reads two numbers `A` and `B`, and checks if both the given numbers are **not negative**.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if both the given numbers are **not negative**, otherwise **False** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 5` and `B = 10`.

✔ **A** is not a negative number. (**5** is **not** a negative number)
✔ **B** is not a negative number. (**10** is **not** a negative number)

The output should be **True** as both the given numbers are **not negative**.

Solution Code:first_number = input()
first_number = int(first_number)

second_number = input()
second_number = int(second_number)

is_first_number_negative = first_number < 0
is_second_number_negative = second_number < 0

is_first_number_not_negative = not(is_first_number_negative)
is_second_number_not_negative = not(is_second_number_negative)

result = is_first_number_not_negative and is_second_number_not_negative
print(result)"
fe543ed0-c698-4487-964d-92d0fb1188f2,"Write a program that reads a word `W`, an index `I`, and a letter `C`.

Print the word `W` by replacing the letter at the index `I` with the given letter `C`.

---

#### Input

The first line of input contains a string.
The second line of input contains an integer.
The third line of input contains a string.

---

#### Output

The output should be a single line containing a string obtained by replacing the letter at the index `I` of the word `W` with the letter `C`.

---

#### Constraints

The index is always greater than 0 and one less than word length (length - 1).

---

#### Explanation

For example, if the given word `W` is **Prime**, the index `I` is **3** and the letter `C` is **z**.

  <div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: 900; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">P</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: 900; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">r</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: 900; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">i</div>
     <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">m</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 0;padding: 8px 12px;"">e</div>
  </div>
  <div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;font-weight: 900;"">3</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
  </div>
<br/>

* The letters before the 3rd index are **Pri**.
* The letter at the 3rd index **m** should be replaced with **z**.
* The letter after the 3rd index is **e**.

The output should be **Prize** as the letter **m** in **Prime** is replaced with the letter **z**.


Solution Code:word=input()
number1=input()
number1=int(number1)
word2=input()


first_part = word[:number1]
second_part = word[number1 + 1 :]
result = first_part + word2 + second_part
print(result)"
e134c0a5-fac0-4f3e-b5c5-a03789e190da,"Write a program that reads a string `A` and prints the string `A` by excluding the first two and last two characters of the string.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing the string obtained by excluding the first two and last two characters of the string `A`.

---

#### Explanation

For example, if the given string is **##Soft##**,

Exclude the first two and last two characters of a string **##Soft##**.

  <div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">#</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">#</div>
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;font-weight: 900; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">S</div>
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;font-weight: 900; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">o</div>
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;font-weight: 900; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">f</div>
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;font-weight: 900; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">t</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">#</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;padding: 8px 12px;"">#</div>
  </div>
  <div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;font-weight: 900;"">2</div>
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;font-weight: 900;"">3</div>
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;font-weight: 900;"">4</div>
     <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;font-weight: 900;"">5</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">6</div>
     <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">7</div>
  </div>
<br/>

The output should be **Soft** as the first two and last two characters are excluded.

Solution Code:string = input()
length = len(string)
final_str = string[2:length-2]
print(final_str)"
1ec5a610-d1e4-4e42-9112-fd2013527af8,"Write a program to read a single line of input and print the first three characters in it.<hr><b>Explanation</b><br/><br/>For example, if the given input is &quot;Four&quot; the first three characters are &quot;Fou&quot;<br/>Similarly, the first three characters of &quot;Strawberry&quot; are &quot;Str&quot;

Solution Code:message = input()
part = message[:3]
print(part)"
00165ef6-803e-4ce5-8b73-688757512236,"Write a program that prints the sum of the digits of a given three-digit number.<hr><b>Input</b><br/><br/>The input will be a single line containing a three-digit number.<hr><b>Output</b><br/><br/>The output should be a single line containing the sum of the three digits of the given number.<hr><b>Explanation</b><br/><br/>For example, if the given number is 326, the sum of its digits, 3 + 2 + 6 is 11.

Solution Code:word = input()
first_digit = int(word[0])
second_digit = int(word[1])
third_digit = int(word[2])
sum_of_digits = first_digit + second_digit + third_digit
print(sum_of_digits)"
93bb756c-9c15-47a6-97bd-9c5a52e3890d,"Given a word and a number N, write a program to print the given word, N number of times in a single line.<br/><hr><b>Input</b><br/><br/>The first line of input contains a word.<br/>The second line of input contains the integer N which denotes the number of times the word has to be repeated.<hr><b>Output</b><br/><br/>The output should contain the given string repeated N times in a single line.<br/>Note: There should not be any spaces between the repetitions.<hr><b>Explanation</b><br/><br/>For example, if the given word is &quot;Maths&quot;, and the N is 2,the word has to be repeated 2 times, so the output should be<br/>&quot;MathsMaths&quot;<br/>

Solution Code:word = input()
n = int(input())
message = word * n
print(message)"
73cb00dd-43f0-489b-8385-e5b2ede7d9be,"Write a program that reads a word and a number N and prints the first N characters of the word.

---

#### Input

The first line of input contains a string.
The second line of input contains an integer.

---

#### Output

The output should be a single line containing a string that is the part of the word.

---

#### Explanation

For example, if the given word is **Superman** and the number **N** is **5**,

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;font-weight: 900; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">S</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">u</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">p</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">e</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">r</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">m</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">a</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; text-align: center;border-right: 0;padding: 8px 12px;"">n</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell; vertical-align: inherit; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">6</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">7</div>
</div>

<br/>

The output should be **Super** as the first 5 characters of the word are **Super**.

Solution Code:word = input()
no_of_characters = input()
no_of_characters = int(no_of_characters)

end_index = no_of_characters
part = word[:end_index]
print(part)"
78c009e2-3814-48fa-a645-5ae4e97ba69d,"Write a program that reads a string and prints the second part of the string that has digits.

<MultiLineNote>
The given string contains 2 parts

* The first part contains only two characters.
* The second part contains only digits.

Example: OF63, ab395

</MultiLineNote>


---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing an integer that is the second part of the string that has digits.

---

#### Explanation

For example, if the given string is **OF63**,

* The first part of the string contains **OF**.
* The second part of the string contains **63**.

The output should be **63**.

Solution Code:string = input()

start_index = 2
number = string[start_index:]
number = int(number)

print(number)"
e65c5c91-8e1a-4fcd-ad53-4108b0c277cc,"Write a program that prints a simple square using the hashes (`#`). 

---

#### Explanation

Print three hashes on the first line, three hashes on the second line and three hashes on the third line.

Solution Code:print(""#"" * 3)
print(""#"" * 3)
print(""#"" * 3)"
f9930aee-6134-4990-b953-99f49ca70b0c,"Write a program that reads a number `N` and prints three lines with each line containing `N` stars (`*`).

<MultiLineNote>
There is a space after each star.
</MultiLineNote>

---

#### Input

The input will be a single line containing an integer.

---

#### Output

The output should be three lines containing `N` number of space-separated stars (`*`) in each line.

---

#### Explanation

For example, if the given number is **4**, the output should be three lines containing four space-separated stars (`*`) in each line.


```
* * * * 
* * * * 
* * * * 
```

Solution Code:count = input()
count = int(count)

print(""* "" * count)
print(""* "" * count)
print(""* "" * count)"
8fe37c07-4788-4b18-875d-2e269a26fdf2,"Write a program that prints a simple triangle using the plus (`+`). 

---

#### Explanation

Print one plus on the first line, two pluses on the second line and three pluses on the third line.

Solution Code:print(""+"")
print(""+"" * 2)
print(""+"" * 3)"
07b363c5-42dd-4507-8437-f77583f4a4be,"Write a program to print the sum of two integer inputs A and B.<hr><b>Input</b><br/><br/>The first line contains the integer A<br/>The second line contains the integer B

Solution Code:a = input()
b = input()
a = int(a)
b = int(b)
result = a + b
print(result)"
85ccf591-ba77-48f3-a02d-b36ebac162a1,"Write a program to calculate the area of the Rectangle.<br/>Note: Area of Rectangle = Length of Rectangle x Breadth of Rectangle<hr><b>Input</b><br/><br/>The first line of input contains the length of the rectangle, which is an integer.<br/>The second line of input contains the breadth of the rectangle, which is an integer.<hr><b>Output</b><br/><br/>Print the Area of Rectangle<hr><b>Explanation</b><br/><br/>For example, when the length is 4 and breadth is 3, then A = 3 × 4, therefore A = 12

Solution Code:length = input()
breadth = input()

length = int(length)
breadth = int(breadth)

area = length * breadth
print(area)"
7c7ea72a-f755-4885-9343-285eabc5f5b4,"Write a program to calculate the perimeter of a rectangle.<br/>Note: Perimeter of Rectangle = 2(Length of Rectangle + Breadth of Rectangle)<hr><b>Input</b><br/><br/>The first line of input contains the length of the rectangle, which is an integer.<br/>The second line of input contains the breadth of the rectangle, which is an integer.<hr><b>Output</b><br/><br/>Print the Perimeter of the Rectangle<hr><b>Explanation</b><br/><br/>For example, when the length of the rectangle is 3 and breadth is 4, then<br/>Perimeter = 2 x ( 3 + 4 ) = 2 x 7 = 14

Solution Code:length = input()
breadth = input()

length = int(length)
breadth = int(breadth)

sum_of_two_sides = length + breadth
perimeter_of_rectangle = sum_of_two_sides * 2
print(perimeter_of_rectangle)"
51f43e18-2d8c-4956-ba40-3c2a87e5d48b,"Write a program that reads a dividend and a divisor and prints the remainder.

<MultiLineNote>
For Example, if 7 is divided by 2 (7/2),

_Dividend:_ 7

_Divisor <--_  2 ) 7 ( 3  _--> Quotient_
                           _6_      
                     _---------_
                           _1_  _--> Remainder_

**Formula to Calculate Remainder**:

Quotient should be an integer to calculate the remainder.

remainder = dividend - (divisor * quotient)

</MultiLineNote>

---

#### Input

The first line of input contains an integer.
The second line of input contains an integer.

---

#### Output

The output should be a single line containing an integer that is the remainder.

---

#### Explanation

For example, if the given dividend is **7** and the divisor is **2**, 

* The quotient is **3.5** (`7/2`).
* The integer of **3.5** is **3**.
* The remainder is **1** as shown below.

```
remainder = dividend - (divisor * quotient)

remainder = 7 - (2 * 3)
remainder = 7 - 6
remainder = 1
```

The output should be **1**.

Solution Code:dividend = input()
dividend = int(dividend)
divisor = input()
divisor = int(divisor)

quotient = dividend / divisor
quotient = int(quotient)
remainder = dividend - (divisor * quotient)

print(remainder)"
1e152232-3441-41bc-bd40-828c5cce9788,"Write a program that reads a percentage `P` and prints the percentage `P` of the number **200**.

<MultiLineNote>

##### The Percentage (P) of Number (N) can be calculated as:

value = (percentage / 100) * number
</MultiLineNote>

---

#### Input

The input will be a single line containing an integer.

---

#### Output

The output should be a single line containing a float that is the `P` percentage of **200**.

---

#### Explanation

For example, if the given percentage is `P = 50`, the **50** percent of number **200** is,

```
value = (percentage / 100) * number
value = (50 / 100) * 200
value = 0.5 * 200
value = 100.0
```

The output should be **100.0**.

Solution Code:percentage = input()
percentage = int(percentage)

value = (percentage / 100) * 200
print(value)"
f8391b16-5622-4c5e-9891-0aba78b87cad,"Write a program that reads two numbers A and B and prints the division of two numbers (A / B).

---

#### Input

The first line of input contains an integer.
The second line of input contains an integer.

---

#### Output

The output should be a single line containing a float obtained by the division of two numbers.

---

#### Explanation

For example, if the given numbers are **15** and **3**, the output should be **5.0** as the division of 15 and 3 (`15 / 3`) is **5.0**.

Solution Code:first_number = input()
second_number = input()

first_number = int(first_number)
second_number = int(second_number)

result = first_number / second_number
print(result)"
8a541c75-292c-4372-8894-6abb63271abb,"Write a program that reads the percentage of girls in a class and prints the percentage of boys in the class.

<MultiLineNote>
Total Percentage of Boys and Girls in a class is 100.
</MultiLineNote>

---

#### Input

The input will be a single line containing an integer.

---

#### Output

The output should be a single line containing an integer that is the percentage of boys in the class.

---

#### Explanation

For example, if the given percentage of girls in the class is **30**, 

* The total percentage is **100**.
* The percentage of girls **30** should be removed from the total percentage **100** to get the percentage of boys in the class.

The output should be **70**.

Solution Code:girls_percentage = input()
girls_percentage = int(girls_percentage)

boys_percentage = 100 - girls_percentage
print(boys_percentage)"
ff84f721-714c-4624-b6d7-35ca40cb48cc,"Write a program that reads two numbers A and B and prints the subtraction of two numbers (A - B).

---

#### Input

The first line of input contains a float.
The second line of input contains a float.

---

#### Output

The output should be a single line containing a float obtained by the subtraction of two numbers.

---

#### Explanation

For example, if the given numbers are **15.55** and **6.23**, the output should be **9.32** as the subtraction `15.55 - 6.23` is **9.32**.

Solution Code:first_num = input()
second_num = input()

first_num = float(first_num)
second_num = float(second_num)

diff = first_num - second_num
print(diff)"
d7fe446d-f42d-446e-939a-49f6dcfad823,"Write a program that reads two words `A` and `B`, and prints the given words in reverse order separated by `###`.

<MultiLineNote>
The characters used in `###` are three hash symbols.
</MultiLineNote>

---

#### Input

The first line of input contains a string representing `A`.
The second line of input contains a string representing `B`.

---

#### Output

The first line of output should be a string containing the word `B`.
The second line of output should be a string containing `###`.
The third line of output should be a string containing the word `A`.

---

#### Explanation

For example, if the given words are `A = ""Cat""` and `B = ""Rat""`,

- In the first line **Rat** should be printed.
- In the second line `###` should be printed.
- In the third line **Cat** should be printed.

The output should be,

```
Rat
###
Cat
```

Solution Code:A = input()
B = input() 

print(B)
print(""###"")
print(A)"
7bd5d9cc-48e3-453b-b189-827468059bf5,"Write a program that prints a simple triangle using stars (\*).

#### Explanation

Print one star on the first line, two stars on the second line and three stars on the third line.

<MultiLineNote>
There is a space after every star
</MultiLineNote>

Solution Code:a = ""* ""
print(a)
a = ""* "" + ""* ""
print(a)
a = ""* "" + ""* "" + ""* ""
print(a)"
945b6ff5-9aba-431c-814e-588ae6e4f194,"Write a program that reads a word and prints the first and last characters of the word on two lines.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The first line of output should be a string containing the first character of the word.
The second line of output should be a string containing the last character of the word.

---

#### Explanation

For example, if the given word is **qwerty**, the first character is **q** and the last character is **y**. So, the output should be,

```
q
y
```

Solution Code:word=input()
length=len(word)
print(word[0])
print(word[length-1])"
c9a8654b-0c5f-4bad-9d1b-c8a38e3793b5,"Write a program that prints a simple square using stars (\*).

#### Explanation

Print three stars on the first line, three stars on the second line and three stars on the third line.

<MultiLineNote>
There is a space after every star
</MultiLineNote>

Solution Code:# Print three stars on the first line
print(""* * *"")

# Print three stars on the second line
print(""* * *"")

# Print three stars on the third line
print(""* * *"")"
f16316b7-d8f6-4582-a533-ca3d2b372ba4,"You are given three strings as input. Write a program to print the first character of each string.


---

#### Input

The first, second, and third lines of input are strings.


---

#### Explanation

Consider the given strings to be `apple`, `banana`, and `carrot`. We need to consider the first character in each of these strings. We get the character `a` from the first string `apple`, we get the character `b` from the second string `banana`, and we get the character `c` from the third string `carrot`. So the final output should be `abc`. 


Solution Code:a = input()
b = input()
c = input()
print(a[0] + b[0] + c[0])"
2e72841c-eea4-454b-9a5b-6280a6f424b6,"Write a program that reads a word and prints the first character of the word.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing a string that is the first character of the word.

---

#### Explanation

For example, if the given word is **Python**. The output should be **P** as it is the first character of the given word.

Solution Code:word = input()

first_character = word[0]

print(first_character)"
b9e0ea06-fc2f-4f2e-9e7d-2583eefcf20d,"Write a program that prints a simple triangle using star (\*).

---

#### Explanation

Print a star on the first line and two stars on the second line.

Solution Code:print(""*"")
print(""*"" * 2)"
59b640d6-81e4-4765-813a-a7efe195a0a2,"Write a program that prints a simple square using star (\*).

---

#### Explanation

Print two stars on the first line and two stars on the second line.

<MultiLineNote>
There is a space after every star
</MultiLineNote>

Solution Code:print(""* "" * 2)
print(""* "" * 2)"
63ed91b9-fa5e-4668-835a-2049716781f6,"Write a program that reads a word and prints the word in ""\* \* \* word \* \* \*"" format.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing a string in the format shown in the sample output.

---

#### Explanation

For example, if the given word is **Magician**, the output should be ""\* \* \* Magician \* \* \*"".

Solution Code:word = input()

result = (""* "" * 3) + word + ("" *"" * 3)

print(result)"
390a236e-0c02-451a-b328-e2e4e91fd920,"Write a program that prints a simple square using star (\*).

---

#### Explanation

Print two stars on the first line and two stars on the second line.


Solution Code:print(""*"" * 2)
print(""*"" * 2)"
8eeda1b0-f9d2-4334-bbac-dddfe84b5950,"Write a program that reads a word and prints the third character of the word.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing a string that is the third character of the word.

---

#### Explanation

For example, if the given word is **Programming**. The output should be **o** as it is the third character of the word.

Solution Code:word = input()

third_character = word[2]

print(third_character)"
03914a46-dfd2-40e3-9d65-547787f1a12a,"Given a four-digit number `N` as input. Write a program to print first and last digit of the number.

---

#### Input

The input is a four-digit number `N`.

---

#### Output

Print the first digit in the first line and the last digit in the second line.




Solution Code:number = input()

first_digit = number[0]
last_digit = number[3]

print(first_digit)
print(last_digit)"
bee4395b-fc4c-4904-be03-a2c10ef9b9f2,"Write a program to reverse the digits of a given two-digit number.<hr><b>Input</b><br/><br/>The input will be a single line containing a integer.<hr><b>Output</b><br/><br/>The output should be a single line containing the reverse of the given two-digit number.<hr><b>Explanation</b><br/><br/>For example, if the given two-digit number is 21, the reverse of 21 is 12.

Solution Code:word = input()
first_digit = word[0]
second_digit = word[1]
reversed_number = second_digit + first_digit
print(reversed_number)"
29a2382b-ed45-4aba-bea9-662b70992d2c,"Write a program that takes a word W as input and prints ""Hello"" followed by the given word W.

<MultiLineNote>
There should be a space after **Hello**
</MultiLineNote>

Solution Code:name = input()
print(""Hello "" + name)"
dcf44746-b47e-48e2-bf93-1a00924d3200,"A job applicant is filling out an application form. He entered his first name and last name. Your task is to print his full name by joining his first name and last name with a space.

---

#### Input

The first line of input contains a string (first name).
The second line of input contains a string (last name).

---

#### Output

The output should be a single line containing a string obtained by joining the first name and the last name with a space.

---

#### Explanation

For example, if the given first name is **Harry** and the given last name is **Potter**, the output should be **Harry Potter** as the first name and last name are joined with a space.

Solution Code:first_name = input()
last_name = input()

print(first_name + "" "" + last_name)"
6dd0e79f-4e28-43fe-aa10-38475fcf905d,"Write a program that reads a word and prints the word and ""###"" on two lines.

<MultiLineNote>
The characters used in ""###"" are three hash symbols.
</MultiLineNote>

---

#### Input

The input will be a single line containing a string.

---

#### Output

The first line of output should be a string containing the given word.
The second line of output should be a string containing ""###"".

---

#### Explanation

For example, if the given word is **Algebra**, the output should be

```
Algebra
###
```

Solution Code:word = input()

print(word)
print(""###"")"
42c16fd4-ff15-46fa-a16c-ba6db5aca0e8,"Write a program that reads two words and prints the resultant word by joining the two words.

---

#### Input

The first line of input contains a string.
The second line of input contains a string.

---

#### Output

The output should be a single line containing a string obtained by joining the two words.

---

#### Explanation

For example, if the given words are **Milk** and **shake**. The output should be **Milkshake**.

Solution Code:first_word = input()
second_word = input()

print(first_word + second_word)"
bb9e2653-7e77-4c93-a5df-4fb90abbdb1f,"For this problem, you need to write code to read two lines of input and print the second line of input.<hr><b>Output</b><br/><br/>Print the second line of input.

Solution Code:a = input()
b = input()

print(b)"
231331c1-611d-48b6-b8ba-d0d9b5711a93,"Write a program that reads two lines of input and prints those two lines in the reverse order. (Print the message given in the second line of input before the first line of input)<hr><b>Explanation</b><br/><br/>In the given example, the first line of input is &quot;Book&quot; and the second line of input is &quot;Pen&quot;, so the output should be <br/>Pen<br/>Book

Solution Code:a = input()
b = input()

print(b)
print(a)"
a4fc69fe-8401-4f2f-9184-64d8c185d5c6,"For this problem, you need to write code to read a single line of input and print the line after the message &quot;Given input: &quot;.

Solution Code:message = input()
sentence = ""Given input: "" + message
print(sentence)"
d6b5394d-a1fe-42c8-a73d-9456c9f84243,"Write a program that reads a word and prints half the length of the word.

---


#### Input

The input will be a single line containing a string.

---


#### Output

The output should be a single line containing a float that is half the length of the word.

---


#### Explanation

For example, if the given word is **Airplane**,

* Length of the word is **8**
* Half of the length of the word is **8/2** = **4.0**

So, the output should be **4.0**.

Solution Code:word = input()

word_length = len(word)
half_word_length = word_length/2

print(half_word_length)"
255a852f-dff0-41a3-a2e0-09994c1e62c6,"Write a program that reads a word and prints the first letter of the given word and stars (`*`) instead of the other letters.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing the first letter of the given word and stars (`*`) instead of the other letters.

--- 

#### Explanation

For example, if the given word is **Queue**,

* The number of letters in the word **Queue** is **5**. We have to print the first letter **Q**.
* Now, without the first letter, there are **4** letters. So, we have to print **4** stars (`*`).

The output should be **Q\*\*\*\***.

Solution Code:word = input()

word_length = len(word)

first_character = word[0]
number_of_stars = word_length - 1

result = first_character + (""*"" * number_of_stars)
print(result)"
c095ff68-c1a5-4d94-99fc-959b94b63591,"Write a program that reads a word and prints stars (`*`) equal to the length of the word.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing stars (`*`) equal to the length of the word.

---

#### Explanation

For example, if the given word is **qwerty**, 

* The number of letters in the word **qwerty** is **6**. So, we have to print **6** stars.

The output should be **\*\*\*\*\*\***.

Solution Code:word = input()

word_length = len(word)
result = ""*"" * word_length

print(result)"
177b4220-cf2f-4099-b164-a1444b04a5b4,"Write a program that reads a word and prints the length of the word.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing an integer that is the number of characters in the word.

---

#### Explanation

For example, if the given word is **Software**, the number of characters in the word is **8**.

The output should be **8**.

Solution Code:message = input()
length = len(message)
print(length)"
6baba151-6ad8-4a0b-ab73-25da8e5e1f1a,"Write a program that reads a word and prints `L - 1`, where `L` is the length of the word.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing an integer obtained after subtracting **1** from the length of the word.

---

#### Explanation

For example, if the given word is **Ice**, the output should be **2** as the length of the word is **3**.


Solution Code:word = input()

word_length = len(word) 
result = word_length - 1

print(result)"
fef2d82b-0706-4d7c-8189-7d044425c1dc,"Given a number `N`, write a program that reads `N` numbers and prints a list of numbers that are divisible by **5**.

---

#### Input

The first line of input contains an integer representing `N`.
The next `N` lines of input contain integers.

---

#### Output

The output should be a single line containing a list of numbers that are divisible by **5**.

---

#### Explanation

For example, if the given number is `N = 3`

- The given `3` inputs are **10**, **7**, and **35**.
- In the given inputs **10** and **35** are divisible by **5**.
- As, `10 % 5 == 0`, **10** is divisible by **5**.
- As, `35 % 5 == 0`, **35** is divisible by **5**.

The output should be,

```
[10, 35]
```


Solution Code:n=int(input())
list_a = []
for i in range(n):
    number=int(input())
    if number % 5 == 0:
        list_a+=[number]
print(list_a)"
bd323b63-9c04-45e8-a204-fd2503b512a8,"A list `L` is given in the prefilled code.

Given an index `I`, and a number `N`, write a program that prints the list by replacing the element at index `I` with the number `N`.

```
L = [1, 20, 33, 45, 520, 64, 71, 852, 9999, 101010]
```

---

#### Input

The first line of input contains an integer representing `I`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing a list obtained by replacing the element at index `I` with the number `N`.

---

#### Explanation

For example, if the given index is `I = 3` and the number is `N = 100`,

- The elements in the given prefilled list `L` are **1**, **20**, **33**, **45**, **520**, **64**, **71**, **852**, **9999**, and **101010**.
- The element at index **3** is **45**.

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">1</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">20</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">33</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;font-weight: 900;"">45</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">520</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">64</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">71</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">852</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">9999</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 0;padding: 8px 12px;"">101010</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;text-align: center; vertical-align: inherit; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;text-align: center; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;text-align: center; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
   <div style=""font-family: 'Roboto';display: table-cell;text-align: center; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;font-weight: 900;"">3</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;text-align: center; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;text-align: center; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;text-align: center; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">6</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;text-align: center; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">7</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;text-align: center; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">8</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;text-align: center; vertical-align: inherit;border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">9</div>
</div>

- Replace the number **45** with the number **100**.

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;font-weight: bold; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">1</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">20</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">33</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;font-weight: 900;"">100</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">520</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">64</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">71</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">852</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">9999</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 0;padding: 8px 12px;"">101010</div>
</div>
<div style=""display: table-row;vertical-align: inherit;text-align: center; border-color: inherit;"">
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
   <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;font-weight: 900;"">3</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">6</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">7</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">8</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">9</div>
</div>
<br>
The output should be,

```
[1, 20, 33, 100, 520, 64, 71, 852, 9999, 101010]
```


Solution Code:L = [1, 20, 33, 45, 520, 64, 71, 852, 9999, 101010]

index = int(input())
number = int(input())

L[index] = number

print(L)"
8f810d48-efc1-4504-b596-d038a827c409,"A list `L` is given in the prefilled code.

Write a program that reads a string `S` and checks if `S` is in the given list `L`. Print **True** if `S` is present in `L` else, print **False**.

```
L = [""5"", ""eat"", ""9.80"", ""Water"", ""python"", ""-678"", ""7685.26"", ""-2.5"", ""sing""]
```

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if `S` is present in `L`. Otherwise, **False** should be printed.

---

#### Explanation

For example, if the given string is `S = ""Water""`,

- The elements in the given prefilled list `L` are **""5""**, **""eat""**, **""9.80""**, **""Water""**, **""python""**, **""-678""**, **""7685.26""**, **""-2.5""**, and **""sing""**.
- The given string **""Water""** is present in the prefilled list `L` at the **3rd** index.

The output should be **True**.
<br>
For example, if the given string is `S = ""Java""`,

- The elements in the given prefilled list `L` are **""5""**, **""eat""**, **""9.80""**, **""Water""**, **""python""**, **""-678""**, **""7685.26""**, **""-2.5""**, and **""sing""**.
- The given string **""Java""** is not present in the prefilled list `L`.

The output should be **False**.

Solution Code:L = [""5"", ""eat"", ""9.80"", ""Water"", ""python"", ""-678"", ""7685.26"", ""-2.5"", ""sing""]

string = input()

is_present = False

for each_item in L:
 if each_item == string:
 is_present = True
 break

print(is_present)"
01952514-a133-40ff-be79-873267c10b9e,"A list `L` is given in the prefilled code.

Given a number `N`, write a program that reads `N` inputs and prints the list by adding the given `N` inputs at the end of the list `L`.

```
L = [""apple"", ""78"", ""970.03""]
```

---

#### Input

The first line of input contains an integer representing `N`.
The next `N` lines of input contain strings.

---

#### Output

The output should be a single line containing a list obtained by adding the given `N` inputs at the end of the list `L`.

---

#### Explanation

For example, if the given number is `N = 2`

- The given **2** inputs are, 

```
38
grapes
```

- The elements in the given prefilled list `L` are **""apple""**, **""78""**, and **""970.03""**.
- After adding the given **2** inputs at the end of the list `L` is **""apple""**, **""78""**, **""970.03""**, **""38""**, and **""grapes""**

The output should be,

```
['apple', '78', '970.03', '38', 'grapes']
```

Solution Code:L = [""apple"", ""78"", ""970.03""]

number_of_inputs = int(input())

for i in range(number_of_inputs):
 new_item = input()
 L += [new_item]
 
print(L)"
9b75e06d-d540-4eae-ad51-82610a7ae772,"For this problem, the prefilled code will contain a list. You need to concatenate the given number to the list. The first list should have the number concatenated at the beginning. The second list should have the number concatenated at the end.<hr><b>Input</b><br/><br/>The input will be a single line containing an integer.<hr><b>Output</b><br/><br/>The first line of output should be a list containing the given number at the beginning of the list.<br/>The second line of output should be a list containing the given number at the end of the list.<hr><b>Explanation</b><br/><br/>For example, if the given number is 20, by adding this to the existing list, the output should be as below<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[20, 10, 20, 40, 100]
[10, 20, 40, 100, 20]
</code></pre>

Solution Code:num_list = [10, 20, 40, 100]
n = int(input())

first_list = [n] + num_list
second_list = num_list + [n]

print(first_list)
print(second_list)"
40a5fffc-5838-4b26-8f2b-8ef1081ff5b5,"Write a program to print a list with the given N inputs.<hr><b>Input</b><br/><br/>The first line of input will contain a positive integer (N).<br/>The next following N lines will be containing the list elements.<hr><b>Output</b><br/><br/>The output should be a single line containing the list created with the given inputs.<hr><b>Explanation</b><br/><br/>For example, if the given N is 5, read the inputs in the next five lines and print the list containing the given five elements. If the given five inputs are<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">20
Tiger
Cinema
5.5
93
</code></pre><br/> the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">['20', 'Tiger', 'Cinema', '5.5', '93']
</code></pre>

Solution Code:n = int(input())

list_a = []
for i in range(n):
 value = input()
 list_a += [value]

print(list_a)"
706352c6-abf2-4518-9a0b-291dc88638de,"Given two integers M and N, write a program to create a list with element M repeated by N times.<hr><b>Input</b><br/><br/>The first line of input will be an integer.<br/>The second line of input will be a positive integer.<hr><b>Output</b><br/><br/>The output should be a single line containing a list with element M repeated by N times.<hr><b>Explanation</b><br/><br/>For example, if the given M and N are 5 and 4, the output should contain a list with the number 5 repeated 4 times.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[5, 5, 5, 5]
</code></pre>

Solution Code:m = int(input())
n = int(input())

list_a = [m] * n # repeat n times
print(list_a)"
fdca9d93-a0e4-4e13-8de4-211ee3d3b92a,"Write a program to print a list with the given elements<br/>&quot;Rose&quot;, 183, 148, 123.64, False<hr><b>Output</b><br/><br/>The output should be a single line containing a list with the above elements.<hr><b>Explanation</b><br/><br/>Your code should print the following output.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">['Rose', 183, 148, 123.64, False]
</code></pre>

Solution Code:player = [""Rose"", 183, 148, 123.64, False]
print(player)"
a321f1b7-62eb-467e-80da-444c2e21d868,"Write a program to read N inputs and print a list containing the first and last three inputs.<hr><b>Input</b><br/><br/>The first line of input will contain a positive integer (N).<br/>The next following N lines will contain a string each in a line.<hr><b>Output</b><br/><br/>The output should be a single line containing a list with the first and last three inputs.<hr><b>Explanation</b><br/><br/>For example, if the given N is 8, read the inputs in the next eight lines. If the given eight inputs are the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">Anjali
Ravi
Akbar
Suresh
Gopal
Latha
Mohan
Ashok
</code></pre>Your code should print a list containing the first and last three inputs. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">['Anjali', 'Ravi', 'Akbar', 'Latha', 'Mohan', 'Ashok']
</code></pre>

Solution Code:n = int(input())

list_a = []
for i in range(n):
 value = input()
 list_a += [value]

new_list = list_a[:3] + list_a[n-3:]
print(new_list)"
819d867a-7a15-427e-ab07-428cd9095fbc,"For this problem, the prefilled code will contain a list. Your program should create a new list with all the elements in existing list that are greater than given number.<br/>Note: The order of elements in the new list should be same as the order of those elements in the list given in the prefilled code.<hr><b>Input</b><br/><br/>The first line of input will contain an integer.<hr><b>Output</b><br/><br/>The output should be a single line containing the list with elements greater than N.<hr><b>Explanation</b><br/><br/>For example, if the given number is 50, your code should print the list of numbers that are greater than 50 in the given list. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[93, 71]
</code></pre>

Solution Code:num_list = [1, 6, 32, 93, 71, -20, 30, -90, 50]

n = int(input())
new_list = []
for number in num_list:
 if number > n:
 new_list += [number]

print(new_list)"
4199735b-b23b-401f-bd76-897ebec388da,"For this problem, the prefilled code will contain a list. You need to write a program to read N integers, and print the elements at the index locations represented by those integers.<hr><b>Input</b><br/><br/>The first line of input will contain a positive integer (N).<br/>The following N lines will contain a positive integer in each line.<hr><b>Output</b><br/><br/>The output should be N lines containing the list elements at the given indexes each in a line.<hr><b>Explanation</b><br/><br/>For example, if the given number N is 2, read the inputs in the next two lines and print the elements at the given indexes. If the given two indexes are 1 and 4, the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">Java
C++
</code></pre>

Solution Code:programming_languages_list = [""Python"", ""Java"", ""Ruby"", ""C"", ""C++"", ""Go"", ""R"", ""JavaScript"", ""Swift"", ""PHP"", ""Kotlin"", ""Perl""]

m = int(input())
for i in range(m):
 index = int(input()) # Read the list indexes
 print(programming_languages_list[index]) # Print the elements at given index"
b240eeea-2802-420a-b65a-53cf4bed609c,"You are given `N` numbers as input. Create a list and add the `N` numbers which are given as input and print the list.


---

#### Input

The first line of input is an integer `N`.
The next `N` lines each contain an integer.



---

#### Explanation

In the given example, `N=4` and the numbers are `1, 2, 3, 4`.
So, the output should be `[ 1, 2, 3, 4 ]`

Solution Code:n = int(input())

l = []

for i in range(n):
 number = int(input())
 l += [number]

print(l)"
16752162-b47b-4b4c-8679-4bb10ff95fe9,"# Question Details:
```
Sourav learnt the basic addition of two numbers which does not involve a carry. When he tries to add two numbers which involve a carry, he faces difficulty.

Write a program that reads two numbers A and B and checks if Arjun faces difficulty or not.

---

#### Input

The input will be a single line contains two space-separated integers representing `A` and `B`.

---

#### Output

The output should be a single line containing a string. `Hard` should be printed if the addition of two numbers requires a carry, otherwise `Easy` should be printed.

---

#### Explanation

For example, if the given `A = 229` and `B = 390`.

In order to add `229 + 390`, it must require a carry, which means the answer is **Hard**.
```

Solution Code:def check_addition_involves_carry(first_number, second_number):
 first_number_length, second_number_length = len(first_number), len(second_number)
 greater_length = max(first_number_length, second_number_length)

 # Making two numbers equal by length by add zeros infront of smaller number
 if(len(first_number) < greater_length):
 first_number = ""0"" * (greater_length - len(first_number)) + first_number
 elif(len(second_number) < greater_length):
 second_number = ""0"" * (greater_length - len(second_number)) + second_number

 is_carry_exist = False
 for index in range(len(first_number)):
 if(int(first_number[index]) + int(second_number[index]) > 9):
 is_carry_exist = True
 break
 return is_carry_exist

def main():
 first_number, second_number = input().split()

 is_carry_exist = check_addition_involves_carry(first_number, second_number)
 if(is_carry_exist):
 print(""Hard"")
 else:
 print(""Easy"")

main()"
a3402e26-1e9d-47f6-b63c-beee22a0227a,"Arun is in a class with **N** students. He has been assigned the responsibility of measuring the height of each student in the class.

After completing the above-mentioned task, the teacher asked him the **Q** queries. In each query, he will be given a number **X** and his task is to find the number of students in the class who have a height of at least **X**. Help Arun by answering his teacher's queries.

Write a program that reads **N** students' heights and **Q** queries asked by the teacher and prints the answers to each query.

---

#### Input

The first line of input contains space-separated integers representing number of students `N` and number of queries `Q`.

The second line of input contains `N` space-separated integers representing the heights of `N` students in the class.

The next `Q` lines of input contain an integer value representing each query `X` asked by the teacher.

---

#### Output

The output should be `Q` lines containing an integer obtained by calculating the number of students in the class who have a height of at least `X` on each line.

---

#### Explanation

**Test Case:** If the given `N = 3`, `Q = 1` and `heights = 100 160 130`

In this example, we have **3** students in the class and **1** query has been asked by the teacher.

For the given query `120`, the number of students that have a height of at least `120` are **2**.

The output should be **2**.

Solution Code:def get_students_list(no_of_students):
 students_heights_list = list(map(int, input().split()))
 return students_heights_list

def get_queries_list(no_of_queries):
 queries_list = []
 for i in range(no_of_queries):
 query = int(input())
 queries_list.append(query)
 return queries_list

def get_answer_to_the_query(students_heights_list, query):
 answer = 0
 for each_height in students_heights_list:
 if(each_height >= query):
 answer += 1
 return answer

def answer_the_queries(students_heights_list, queries_list):
 for each_query in queries_list:
 answer = get_answer_to_the_query(students_heights_list, each_query)
 print(answer)

def main():
 no_of_students, no_of_queries = map(int, input().split())
 students_heights_list = get_students_list(no_of_students)
 queries_list = get_queries_list(no_of_queries)
 answer_the_queries(students_heights_list, queries_list)

main()"
d724c7f4-da04-4dd1-b24e-a7a95e2774e5,"There is an English competition in which players are divided into **N** groups, each group having 2 players. 

As part of the competition, each player in a group selects a word. The group will be eligible for the next round if they are able to rearrange the letters in the first player's word to form the second player's word. Your task is to check whether the group is eligible for the next round or not.

Write a program that reads the **N** groups of two space-separated words and checks if the players are able to rearrange the letters in the first player's word to form the second player's word in each group.

<MultiLineNote>

All characters in the input will be in lowercase.

</MultiLineNote>

---

#### Input

The first line of input contains an integer representing the number of groups `N`.

The next `N` lines of input contain space-separated strings representing the player's words on each line.

---

#### Output

The output should be a single line containing space-separated strings. `YES` should be printed if the second player's word can be formed by rearranging the letters in the first player's word otherwise, `NO` should be printed.

---

#### Explanation

**Test Case:** If the given `N = 2`

```
noon moon

part trap
```

`noon moon` the second player's word cannot be formed by rearranging the letters in the first player's word.

So the condition for winning is not satisfied. The result of this group is **NO**.

`part trap` the second player's word can be formed by rearranging the letters in the first player's word in reverse order.

So the condition for winning is satisfied. The result of this group is **YES**.

The output should be **NO YES**.

Solution Code:def check_for_rearrangement_of_letters(first_word, second_word):
 if len(first_word) != len(second_word):
 return ""NO""
 is_rearrangement_possible = ""YES""
 for each_letter in first_word:
 if (first_word.count(each_letter) != second_word.count(each_letter)):
 is_rearrangement_possible = ""NO""
 break
 return is_rearrangement_possible
 
def main():
 test_cases = int(input())
 result = """"
 for i in range(test_cases):
 first_word, second_word = input().split()
 is_rearrangement_possible = check_for_rearrangement_of_letters(first_word, second_word)
 result += is_rearrangement_possible + "" ""
 print(result)
 
main()"
3977315e-64d3-46ec-b9c5-8712bf1ff812,"Akshay has been given a few numbers. In the given numbers, every number except one will appear twice.

Your task is to identify the number that appears exactly once.

Write a program that reads the space-separated numbers and prints the number that appears exactly once.

---

#### Input

The input will be a single line containing space-separated integers representing numbers.

---

#### Output

The output should be a single line containing an integer, which is a number that appears only once.

---

#### Explanation

**Test Case:** If the given `numbers = 2 2 1`.

As the number `1` has appeared only once.

The output should be **1**.

Solution Code:def get_number_appeared_exactly_once(numbers):
 for number in numbers:
 if(numbers.count(number) == 1):
 return number

def main():
 numbers = input().split()
 number_appeared_exactly_once = get_number_appeared_exactly_once(numbers)
 print(number_appeared_exactly_once)

main()"
622b1def-5299-4316-a09c-7dd3a0c1475e,"A shopkeeper records all purchases at the end of the day. He has prices for all the purchases that happened at the shop today. He wants to know which item got sold only once and which item got sold more than once.

Write a program that reads the space-separated prices and prints the price of items that sold only once and more than once.

<MultiLineNote>

In the case of ties, choose the price of the item that was sold earlier in the day.

</MultiLineNote>

___

#### Input

The input will be a single line containing space-separated integers representing the prices of the purchases.

___

#### Output

The first line of the output should contain an integer that is the price of an item that is sold only once.

The second line of the output should contain an integer that is the price of an item that is sold more than once.

Print `None` if no purchase meets the given criteria.

___

#### Explanation

**Test Case:** If the given `purchases = 5 5 4 7 4 1 11`.

The price of the item that got sold only once earlier in the day is **7**.

The price of the item that got sold more than once earlier in the day is **5**.

The output should be,

```
7
5
```

Solution Code:def get_item_sold_only_once(prices_list):
 item_sold_only_once = None
 for each_price in prices_list:
 if (prices_list.count(each_price) == 1):
 item_sold_only_once = each_price
 break
 return item_sold_only_once

def get_item_sold_more_than_once(prices_list):
 item_sold_more_than_once = None
 for each_price in prices_list:
 if (prices_list.count(each_price) > 1):
 item_sold_more_than_once = each_price
 break
 return item_sold_more_than_once

def main():
 prices_list = input().split()
 sold_only_once = get_item_sold_only_once(prices_list)
 sold_more_than_once = get_item_sold_more_than_once(prices_list)
 print(sold_only_once)
 print(sold_more_than_once)

main()"
7ac69212-6fa8-4cd5-9d08-d6fc1783f175,"Shreya has been given two different earthquake magnitudes **A** and **B** and her task is to find how many times earthquake **A** is more powerful than earthquake **B**.

She knows that when the magnitude of an earthquake increases by **1**, the amount of energy multiplies by **32**. Help Shreya in determining the intensity of earthquake **A** compared to earthquake **B**.

Write a program that reads the magnitudes of earthquakes **A** and **B** and prints the number of times earthquake **A** is more powerful than earthquake **B**.

---

#### Input

The input will be a single line containing space-separated integers representing the magnitudes of the earthquakes `A` and `B`.

---

#### Output

The output should be a single line containing an integer obtained by calculating the number of times earthquake `A` is more powerful than earthquake `B`.

---

#### Explanation

**Test case:** If the given `A = 6` and `B = 4`.


The difference between `6` and `4` is `2`, Since, the magnitude of an earthquake increases by `2`, the amount of energy multiplies by `32 x 32`.

```
32 x 32 = 1024
```

Earthquake `A` is **1024** times more powerful than the earthquake `B`.

The output should be **1024**.

Solution Code:def get_the_amount_of_energy(magnitude_a, magnitude_b):
 magnitudes_difference = magnitude_a - magnitude_b
 amount_of_energy = 32 ** magnitudes_difference
 return amount_of_energy

def main():
 magnitude_a, magnitude_b = input().split()
 magnitude_a, magnitude_b = int(magnitude_a), int(magnitude_b)
 amount_of_energy = get_the_amount_of_energy(magnitude_a, magnitude_b)
 print(amount_of_energy)

main()"
936b5ced-4c36-40bd-80f3-fdc1350ea9fe,"Given an MxN matrix filled with `X`'s and `O`'s, find the largest rectangle containing only `X`'s and return its area.
If there are no `X`s in the entire matrix print 0.


___

#### Input

The first line of input will be containing two space-separated integers, denoting M and N.
The next M lines will contain N space-separated integers, denoting the elements of the matrix.


___

#### Output

The output should be a single line containing the area of the maximum rectangle.


___

#### Explanation

For example, if the given M, N and elements of matrix are as the following

```
4 5
X O X O O
X O X X X
X X X X X
X O O X O
```

The matrix from indices (1, 2) to (2, 4) has the maximum rectangle with `X`. So the output should be the area of the maximum rectangle with `X`, which is 6.


Solution Code:def read_matrix(rows):
    matrix = []
    for i in range(rows):
        row = input().split()
        matrix.append(row)
    return matrix

def check_if_sub_matrix_contains_zero(matrix, i, j, k, l):
    for m in range(0, k + 1):
        for n in range(0, l + 1):
            if (matrix[i + m][j + n] == ""O""):
                return True
    return False
    
def get_max_sub_matrix_area(matrix, rows, columns, i, j):
    max_sub_matrix_area = 0
    for k in range(0, rows - i):
        for l in range(0, columns - j):
            is_sub_matrix_contains_zero = check_if_sub_matrix_contains_zero(matrix, i, j, k, l)
            # If the submatrix does not contain zero, then it is possible that the submatrix may contain the maximum area
            if not is_sub_matrix_contains_zero:
                # Here, (k + 1) * (l + 1) provides the newly discovered sub matrix area
                max_sub_matrix_area = max(max_sub_matrix_area, (k + 1) * (l + 1))
    return max_sub_matrix_area

def get_max_area_of_rectangle(matrix, rows, columns):
    max_area_of_rectangle = 0
    for i in range(rows):
        for j in range(columns):
            if (matrix[i][j] == ""X""): 
                # When the current element is ""X"", start finding the maximum submatrix area 
                # on the bottom right that starts with the current element.
                max_sub_matrix_area = get_max_sub_matrix_area(matrix, rows, columns, i, j)
                max_area_of_rectangle = max(max_area_of_rectangle, max_sub_matrix_area)
    return max_area_of_rectangle 
    
def main():
    rows, columns = map(int, input().split("" ""))
    matrix = read_matrix(rows)
    max_area_of_rectangle = get_max_area_of_rectangle(matrix, rows, columns)
    print(max_area_of_rectangle)
    
main()"
8965df1b-eccd-45b5-abac-5fcc18ec98e4,"You are given the arrival and departure times of some trains in 24-hour format. Your task is to determine the minimum number of platforms needed at a railway station to accommodate all trains arriving and departing (i.e. ensuring that no two trains overlap at a single platform and no train is left waiting).

All trains arrive and depart on the same day, with distinct arrival and departure times. To prevent conflicts, separate platforms are needed for trains whose arrival overlaps with the departure of another train on the same platform.

Write a program that reads the arrival and departure times of the trains in 24-hour format and prints the minimum number of platforms needed at a railway station to accommodate all trains.

---

#### Input

The first line of input contains space-separated integers representing the arrival times of the trains in 24-hour format.

The second line of input contains space-separated integers representing the departure times of the trains in 24-hour format.

---

#### Output

The output should be single line containing an integer representing the minimum number of platforms needed to accommodate all arriving and departing trains without any overlap or delays.

---

#### Explanation

For example, consider the following arrival and departure times of 5 trains:

trains arrival timings = `0900 0940 0950 1100 1500`

trains departure timings = `0910 1200 1120 1130 1900`

To handle these `5` trains, let's start with platform `1`:

- `Train 1` arrives at `0900` and is accommodated on `platform 1`. It departs at `0910`.

- `Train 2` arrives at `0940` and is accommodated on `platform 1`. It departs at `1200`.

- `Train 3` arrives at `0950` and cannot be accommodated on `platform 1` as `Train 2` is already present. Hence, an additional platform is needed and `Train 3` is accommodated on `platform 2`. It departs at `1120`.

- `Train 4` arrives at `1100` and cannot be accommodated on `platform 1 and 2` as they are already occupied. Hence, an additional platform is needed and `Train 4` is accommodated on `platform 3`. It departs at `1130`.

- `Train 5` arrives at `1500` and can easily be accommodated on `platform 1` as it is now empty.

| Platform | Train arrival times | Train departure times |
| -------- | ------------------- | --------------------- |
| 1        | 0900                | 0910                  |
| 1        | 0940                | 1200                  |
| 1        | 1500                | 1900                  |
| 2        | 0950                | 1120                  |
| 3        | 1100                | 1130                  |

The output should be **3**.

Solution Code:def get_number_of_platforms_required(train_arrival_times_list, train_depature_times_list, total_no_of_trains):
 train_arrival_times_list.sort()
 train_depature_times_list.sort()

 platforms_required = 1
 max_platforms_required = 1
 i = 1
 j = 0

 while ((i < total_no_of_trains) and (j < total_no_of_trains)):
 if (train_arrival_times_list[i] <= train_depature_times_list[j]):
 platforms_required += 1
 i += 1
 else:
 platforms_required -= 1
 j += 1

 if (platforms_required > max_platforms_required):
 max_platforms_required = platforms_required

 return max_platforms_required

def main():
 train_arrival_times_list = input().split()
 train_depature_times_list = input().split()
 total_no_of_trains= len(train_arrival_times_list)
 result = get_number_of_platforms_required(train_arrival_times_list, train_depature_times_list, total_no_of_trains)
 print(result)

main()"
28f27ccb-bfe8-44b2-a74c-fdd977b6f8aa,"Write a program that reads an **N x N** matrix and checks if it is a unique matrix or not.

<MultiLineNote>
A **Unique Matrix** is a matrix in which every row and column contains all integers from **1** to **N**.
</MultiLineNote>

---

#### Input

The first line of input contains an integer representing `N`.

The next `N` lines of input contain `N` space-separated integers representing the matrix.

---

#### Output

The output should be a single line containing a string, **True** should be print if the matrix is unique, otherwise **False** should be printed.


---

#### Explanation

**Test Case**: The given `N = 4`, and `N x N` matrix is:

```
1 2 3 4
2 1 4 3
3 4 1 2
4 3 2 1
```

Every row and column of the matrix contains all the integers from `1` to `4`.

So, the given matrix is a unique matrix.

The output should be **True**.

Solution Code:def read_matrix(rows):
 matrix = []
 for i in range(rows):
 row = list(map(int, input().split()))
 matrix.append(row)
 return matrix

def get_expected_numbers_set(n):
 expected_numbers_set = set()
 for i in range(1, n+1):
 expected_numbers_set.add(i)
 return expected_numbers_set

def check_for_unique_rows(matrix):
 are_unique_rows = True
 rows = len(matrix)
 expected_numbers_set = get_expected_numbers_set(rows)
 for row in matrix:
 if(set(row) != expected_numbers_set):
 are_unique_rows = False
 break
 return are_unique_rows

def get_matrix_column(matrix, column_no):
 column = []
 for row in matrix:
 column.append(row[column_no])
 return column

def check_for_unique_columns(matrix):
 are_unique_columns = True
 columns = len(matrix)
 expected_numbers_set = get_expected_numbers_set(columns)
 for column_no in range(columns):
 column = get_matrix_column(matrix, column_no)
 if(set(column) != expected_numbers_set):
 are_unique_columns = False
 break
 return are_unique_columns

def check_for_unique_matrix(matrix):
 are_unique_rows = check_for_unique_rows(matrix)
 are_unique_columns = check_for_unique_columns(matrix)
 is_unique_matrix = are_unique_rows and are_unique_columns
 return is_unique_matrix

def main():
 n = int(input())
 matrix = read_matrix(n)
 is_unique_matrix = check_for_unique_matrix(matrix)
 print(is_unique_matrix)

main()"
0b79e83d-f2c2-44ed-9326-222efcd19e9d,"Aryan has two strings **S** and **T** containing lowercase alphabets. His student Ram has been asked to encode the string in the following manner.

Ram should think a positive number **K** that may transform **S** into **T** by shifting each character of **S** to the right of **K** positions.

For example, if **K = 1**

<br/>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">Alphabet</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">a</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">b</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">c</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">d</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">-</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">-</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">-</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">y</div>
     <div style=""display: table-cell;vertical-align: inherit; font-weight: bold;text-align: center;border-right: 0;padding: 8px 12px;"">z</div>
  </div>
  <div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
     <div style=""display: table-cell; vertical-align: inherit;font-weight: bold;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">Encoded Alphabet</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">b</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">c</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">d</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">e</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">-</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">-</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">-</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">z</div>
     <div style=""display: table-cell; vertical-align: inherit;border-right: 0;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">a</div>
  </div>
<br/>

Similarly,

* If **K = 2** then **a** is shifted to the right of **2** positions, it will become **c**. 
* If **K = 3** then **x** is shifted to the right of **3** positions, it will become **a**.

Your task is to help Aryan determine whether Ram can transform **S** into **T** after encoding.

Write a program that reads the two strings **S** and **T** and checks if Ram can transform **S** into **T** by encoding the string. 

---

#### Input

The first line of input contains a string representing `S`.

The second line of input contains a string representing `T`.

---

#### Output

The output should be a single line containing a string. **Yes** should be printed if Ram can transform `S` into `T` by encoding the string. Otherwise **No** should be printed.

---

#### Explanation

**Test Case 1**: If the given `S = abc` and `T = ijk`

If Ram has considered a positive number `K = 8`.

Each character of `S` should be shifted to the right of `8` positions.

- `a` is shifted to the right of **8** positions, it will become `i`
- `b` is shifted to the right of **8** positions, it will become `j`
- `c` is shifted to the right of **8** positions, it will become `k`

So, Ram can transform `S` into `T`.

The output should be **Yes**.

**Test Case 2**: If the given `S = ppq` and `T = qqp`

There is no possibility of a positive integer `K` that Ram can consider to transform `S` into `T`.

So, Ram cannot be transformed `S` into `T`.

The output should be **No**.

Solution Code:def check_string_transformation(s, t):
 expected_difference = (ord(t[0]) - ord(s[0])) % 26
 can_transform_string = ""Yes""
 for i in range(len(s)):
 current_difference = (ord(t[i]) - ord(s[i])) % 26
 if (current_difference != expected_difference):
 can_transform_string = ""No""
 return can_transform_string
 
def main():
 s, t = input(), input()
 can_transform_string = check_string_transformation(s, t)
 print(can_transform_string)
 
main()"
97cbf280-1b67-4004-a30a-828ceb19be47,"There are **N** pyramids in a line. Given their heights, your task is to find the minimum absolute difference between the heights of any two different pyramids.

Write a program that reads the **N** space-separated heights of the pyramids and prints the minimum absolute difference between the heights of any two different pyramids.

---

#### Input

The input will be a single line containing space-separated integers representing the heights of the `N` pyramids.

---

#### Output

The output should be a single line containing the minimum absolute difference between the heights of any two different pyramids.

---

#### Explanation

**Test Case:** If the given `N = 7 1 5`

The absolute difference between the heights of any two different pyramids are

| Pyramid-A | Pyramid-B | Diff |
|--|--|--|
| 7 | 1 | 6 |
| 7 | 5 | 2 |
| 1 | 5 | 4 |

From the above table, the minimum absolute difference is **2**.

The output should be **2**.

Solution Code:def get_min_absolute_difference(pyramid_heights):
 min_absolute_difference = abs(pyramid_heights[1] - pyramid_heights[0])
 for i in range(len(pyramid_heights)):
 for j in range(i + 1, len(pyramid_heights)):
 difference = abs(pyramid_heights[i] - pyramid_heights[j])
 if(difference < min_absolute_difference):
 min_absolute_difference = difference
 return min_absolute_difference

def main():
 pyramid_heights = list(map(int,input().split()))
 min_absolute_difference = get_min_absolute_difference(pyramid_heights)
 print(min_absolute_difference)

main()"
2150f0a6-41f3-4a39-aa91-1a3846806f8b,"The **N** students in the class have recently finished a science viva exam and received their results from the teacher. They are standing in the order in which they took the exam, each holding their results in hand.

The teacher asked the students to note the number of students who took the viva after them and received a lower score. Your task is to help students.

Write a program that reads **N** space-separated viva scores of students and prints the number of students who took the viva after them and received a lower score.

---

#### Input

The first line of input contains an integer representing the number of students `N`.

The second line of input contains `N` space-separated integers representing the viva scores of students `S`.

---

#### Output

The output should contain `N` space-separated integers representing the number of students who took the viva after each student and received a lower score.

---

#### Explanation

**Test Case:** If the given `N = 3` and `S = 13 12 11`

Score of student 1 is `13`.
Score of student 2 is `12`.
Score of student 3 is `11`.

The number of people who took the viva after student 1 and scored less than `13` is `2`(`12`, `11`).
The number of people who took the viva after student 2 and scored less than `12` is `1` (`11`).
The number of people who took the viva after student 3 and scored less than `11` is `0`.

The output should be **2 1 0**.

Solution Code:def get_counts_of_students(no_of_students, scores):
 counts_of_students = []
 for i in range(no_of_students):
 students_count_with_less_score = 0
 for j in scores[i+1:]:
 if (scores[i] > j):
 students_count_with_less_score += 1 
 counts_of_students.append(students_count_with_less_score)
 return counts_of_students

def main():
 no_of_students = int(input())
 scores = list(map(int, input().split()))
 counts_of_students = get_counts_of_students(no_of_students, scores)
 print(*counts_of_students)
 
main()"
b67008de-1eb8-4281-ab6a-414732435269,"Yash is solving a matrix problem as part of his entrance exam preparation.

In that matrix problem, there is a square matrix of size **N x N**. Yash needs to calculate the sum of the upper and lower triangular elements of the matrix. Help Yash solve the given matrix problem.

Write a program that reads the **N x N** matrix and prints the sum of the upper and lower triangular elements.

<MultiLineNote>
The upper triangle consists of elements on the anti-diagonal and above on it.

The lower triangle consists of elements on the anti-diagonal and below it.
</MultiLineNote>

---

#### Input

The first line of input contains an integer representing `N`.

The next `N` lines of input contain `N` space-separated integers representing the matrix.

---

#### Output

The first line of output should contains an integer obtained by adding all elements in the upper triangle.

The second line of output should contains an integer obtained by adding all elements in the lower triangle.

---

#### Explanation

**Test Case:** If the given `N = 3`, the matrix as follows:

```
1 2 3
4 5 6
7 8 9
```

The upper triangle consists of elements on the anti-diagonal and above on it.

<Img imageSrc='https://res.cloudinary.com/dccbrxgpq/image/upload/v1669362805/anti-diagnol-idp-prep-series-matrix-triangle-v2_rip121.png' widthPercent='20'/>

The sum of upper triangle elements is,

```
1 + 2 + 3 + 4 + 5 + 7 = 22
```

The lower triangle consists of elements on the anti-diagonal and below it.

<Img imageSrc='https://res.cloudinary.com/dccbrxgpq/image/upload/v1669362805/anti-diagnol-idp-prep-series-matrix-triangle-reverse_kfahut.png' widthPercent='20'/>

The sum of lower triangle elements is,

```
3 + 5 + 6 + 7 + 8 + 9 = 38
```

The output should be,

```
22
38
```

Solution Code:def get_sum_of_lower_triangle(matrix):
 sum_of_lower_triangle = 0 
 for i in range(len(matrix)):
 sum_of_lower_triangle += sum(matrix[i][-i-1:])
 return sum_of_lower_triangle

def get_sum_of_upper_triangle(matrix):
 sum_of_upper_triangle = sum(matrix[0])
 for i in range(len(matrix)):
 sum_of_upper_triangle += sum(matrix[i][:-i])
 return sum_of_upper_triangle

def read_matrix(n):
 matrix = []
 for i in range(n):
 row = list(map(int,input().split()))
 matrix.append(row)
 return matrix

def main():
 n = int(input())
 matrix = read_matrix(n)
 sum_of_upper_triangle = get_sum_of_upper_triangle(matrix)
 sum_of_lower_triangle = get_sum_of_lower_triangle(matrix)
 print(sum_of_upper_triangle)
 print(sum_of_lower_triangle)

main()"
3fc8bee8-bcb4-4b39-a0bf-763f7112a73e,"Mr Stark is facing the north. Peter is in trouble, and he is facing the south. Stark being his mentor will protect him as soon as he sees that Peter is in trouble.

Stark's suit is programmed to rotate automatically in the direction of most enemies. By analyzing the direction in which most enemies are heading, the suit provides you with the next set of suit instructions in the form of a string **S**.

When Stark faces south, he ignores the rest of his suit instructions and immediately goes to rescue Peter.

Write a program that reads the set of suit instructions **S** and determines whether Stark will be able to save Peter.


<MultiLineNote>
The string **S** contains either **L** or **R**. The letter **L** indicates left and the letter **R** indicates right.
</MultiLineNote>

---

#### Input

The first line of input contains an integer `T` representing the number of test cases.

The next `T` lines of input contains a string representing the next set of suit instructions `S`. 

---

#### Output

The output should be `T` lines containing a string. **YES** should be printed if the Stark will be able to save Peter, otherwise **NO** should be printed on each test case.

---

#### Explanation

If the given test cases `T = 1`.

**Test Case 1:** If the given `S = RLRLLLR`, after following the given instructions,

Initially Stark is facing North.

|Instruction    |Direction    |
| ------------- | ----------- |
|R: Turns right |Faces east   |
|L: Turns left  |Faces north  |
|R: Turns right |Faces east   |
|L: Turns left  |Faces north  |
|L: Turns left  |Faces west   |
|L: Turns left  |Faces south  |

As Stark is facing the South, he rescues Peter, ignoring the rest of the instructions.

The output should be **YES**.

Solution Code:def get_changed_direction(current_facing_direction, direction):
 updated_direction = None
 if (current_facing_direction == ""NORTH"" and direction == ""R""):
 updated_direction = ""EAST""
 elif (current_facing_direction == ""NORTH"" and direction == ""L""):
 updated_direction = ""WEST""
 elif (current_facing_direction == ""SOUTH"" and direction == ""R""):
 updated_direction = ""WEST""
 elif (current_facing_direction == ""SOUTH"" and direction == ""L""):
 updated_direction = ""EAST""
 elif (current_facing_direction == ""EAST"" and direction == ""R""):
 updated_direction = ""SOUTH""
 elif (current_facing_direction == ""EAST"" and direction == ""L""):
 updated_direction = ""NORTH""
 elif (current_facing_direction == ""WEST"" and direction == ""R""):
 updated_direction = ""NORTH""
 else:
 updated_direction = ""SOUTH""
 return updated_direction 
 
def check_stark_saved_peter(directions):
 current_facing_direction = ""NORTH""
 for each_direction in directions:
 updated_direction = get_changed_direction(current_facing_direction, each_direction)
 if(updated_direction == ""SOUTH""):
 return ""YES""
 current_facing_direction = updated_direction
 return ""NO""

def main():
 test_cases = int(input())
 for i in range(test_cases):
 directions = input()
 is_stark_saved_peter = check_stark_saved_peter(directions)
 print(is_stark_saved_peter)
 
main()"
e19069bd-55c7-4fe8-8c40-6a87f24fad99,"Your friend is hosting a game with **N** players. The players are seated around a circular table in chairs numbered from **1 to N**.

At the beginning of the game, the host randomly chooses a chair number **S** among the chairs numbered from **1 to N**.

Beginning with the player in chair **S**, one chocolate will be handed to each player sequentially around the table until all of the **M** pieces of chocolates have been distributed.

The player who receives the last chocolate wins this game. Help your friend to find who is going to win.

Write a program that reads the **N** number of players, **M** pieces of chocolates and the randomly choosen chair number **S** and prints the chair number of the player who received the last chocolate.

---

#### Input

The first line of input contains an integer representing the number of test cases `T`.

The next `T` lines of input contain three space-separated integers representing the `N` number of players, `M` pieces of chocolates and the randomly choosen chair number `S`.

---

#### Output

The output should be `T` lines, each line containing an integer that is the chair number of the player who received the last chocolate.

---

#### Explanation

If the given test cases `T = 2`

**Test Case 1 :** If the given `N = 4`, `M = 6` and `S = 2` (`4` players, `6` pieces of chocolates and `2` is the randomly choosen chair number)

- There are `4` players seated around a circular table in chairs numbered from `1 to 4`.

- Chocolate distribution starts from chair `2`.

- One chocolate will be handed to each player sequentially around the table until all of the `6` chocolates have been distributed.

![](https://res.cloudinary.com/dccbrxgpq/image/upload/v1673251018/illustration_final_evkpvz.png)

- The player seated in chair `3` receives the last chocolate and going to win this round.

- The output should be **3**.

**Test Case 2** If the given `N = 1`, `M = 1` and `S = 1` (`1` player, `1` piece of chocolate and `1` is the randomly choosen chair number)

- There is `1` player seated around a circular table in chair numbered `1`.

- Chocolate distribution starts from chair `1`.

- The player seated in the chair `1` receives the last chocolate and going to win this round.

- The output should be **1**.

Solution Code:def get_winning_chair_number(no_of_players, chocolates, start_position):
 current_chair_position = start_position
 chocolates -= 1
 while(chocolates != 0):
 current_chair_position += 1
 chocolates -= 1
 if(current_chair_position > no_of_players):
 current_chair_position %= no_of_players
 return current_chair_position

def main():
 t = int(input())
 for i in range(t):
 no_of_players, chocolates, start_position = map(int, input().split())
 winning_chair_number = get_winning_chair_number(no_of_players, chocolates, start_position)
 print(winning_chair_number)
 
main()"
9dc0f4d3-04f4-4a44-ac2d-94dacd0e6311,"There are **N** people living in your village. You know the names and nicknames of all the people in the village.

Write a program that reads the **N** people names and nicknames and checks whether any two people have the same name and nickname.

---

#### Input

The first line of the input contains an integer `T` representing the number of test cases.

The next lines of input contains,

   - The first line of the input contains an integer `N` representing the number of people living in the village.
   - The next `N` lines of input contains two space-separated strings representing the name and nickname of the person.

---

#### Output

The output should be `N` lines containing a string. **Yes** should be printed if there is a pair of people with the same name and nickname, otherwise **No** should be printed.

---

#### Explanation

If the given test cases `T = 1`

**Test case 1:** If the given `N = 3`

Following are the 3 people in the village.

```
stephen steve
sato hanako
stephen steve
```

As person `1` and `3` have the same name and nickname.

The output should be **Yes**.

Solution Code:def check_name_and_nick_name_are_same(names, nick_names):
 are_duplicates_exist = ""No""
 for i in range(len(names)):
 for j in range(i + 1, len(names)):
 if(names[i] == names[j] and nick_names[i] == nick_names[j]):
 are_duplicates_exist = ""Yes""
 return are_duplicates_exist
 
def read_names_and_nick_names(no_of_persons):
 names, nick_names = [], []
 for i in range(no_of_persons):
 name, nick_name = input().split()
 names.append(name)
 nick_names.append(nick_name)
 return names, nick_names
 
def main():
 test_cases = int(input())
 for i in range(test_cases):
 no_of_persons = int(input())
 names, nick_names = read_names_and_nick_names(no_of_persons)
 are_name_and_nick_name_same = check_name_and_nick_name_are_same(names, nick_names)
 print(are_name_and_nick_name_same)
 
main()"
d5c709f8-701a-4af8-9c28-00e04e93aff7,"Write a program that prints `Hello World` as output.

Solution Code:print(""Hello World"")"
266cf941-66b1-47e6-b87d-6662166003dc,"Write a program that prints the result when **596** is subtracted from **193856**.

Solution Code:result = 193856 - 596

print(result)"
e162821d-1ac8-46a2-891c-bd6571f549ca,"Write a program that prints the sum of two numbers, **2495** and **789358**.

Solution Code:result = 2495 + 789358

print(result)"
244aac03-2aff-4a9c-abf9-9a969dd8fe0e,"Write a program that prints the product of three numbers, **37**, **61** and **391**.

Solution Code:result = 37 * 61 * 391

print(result)"
e7d71c99-7684-4a85-9f4a-b54501364d25,"The Unix timestamp is a way to track time as a running total of seconds.<br/>This count starts at the Unix Epoch on January 1st, 1970, at UTC.<br/>Therefore, the Unix timestamp is merely the number of seconds between a particular date and the Unix Epoch.<br/>You are given UNIX timestamp U.<br/>Write a program to convert U to a readable date time(in UTC) and print it.<hr><b>Input</b><br/><br/>The input will be a single line containing a UNIX timestamp U.<hr><b>Output</b><br/><br/>The output should be a single line containing the timestamp in UTC DateTime format.<br/>DateTime format: YYYY-MM-DD HH:MM:SS.<br/>Time is in 24-hour format.<br/><hr><b>Explanation</b><br/><br/>For example, if the given timestamp is 1284105682 states that, that many number of seconds have passed from the reference time mentioned in the above question.<br/>Your code should print the datetime corresponds to the timestamp in UTC after the given number of seconds have passed from the reference time. So the output should be<br/>2010-09-10 08:01:22

Solution Code:import datetime

zero = datetime.datetime(1970, 1, 1)
seconds = datetime.timedelta(seconds=int(input()))
dt_format = '%Y-%m-%d %H:%M:%S'
result_time = zero + seconds
print(result_time.strftime(dt_format))"
595ceac1-7aab-492c-8d61-3c9fe86cf97e,"Write a program to convert the date given in the string format to a datetime object.<br/>The date in string format is like &quot;8 Feb 2021&quot;.<hr><b>Input</b><br/><br/>The input will be a single line containing the date in the string format.<hr><b>Output</b><br/><br/>The output should be a single line containing the appropriate datetime object.<hr><b>Explanation</b><br/><br/>For example, if the given date is &quot;2 July 2000&quot;, your code should convert this date into a datetime object.<br/>So the output should be<br/>2000-07-02 00:00:00

Solution Code:from datetime import datetime

date = input()
date_string = ""%d %b %Y""
datetime_object = datetime.strptime(date, date_string)
print(datetime_object)"
ca179c53-e962-49bd-bcec-4990e73d00cd,"Write a program to print the name of the weekday of a given date.<br/>The date in string format is like &quot;8 Feb 2021&quot;.<hr><b>Input</b><br/><br/>The input will be a single line containing the date in the string format.<hr><b>Output</b><br/><br/>The output should be a single line containing the name of the weekday.<hr><b>Explanation</b><br/><br/>For example, if the given date is &quot;7 Sept 2020&quot;, your code should print the name of the weekday on 7th September 2020. So the output should be &quot;Sunday&quot;.

Solution Code:from datetime import datetime

date = input()
date_string = ""%d %b %Y""
datetime_object = datetime.strptime(date, date_string)
name_of_the_day = datetime_object.strftime(""%A"")
print(name_of_the_day)"
726ea299-e1a5-45bc-bc41-817bf3cdaca4,"You are given a date D1 and an integer Y.<br/>Write a program to add the years Y to D1 and display the new date D2.<br/>Note: Assume 1 year has 365 days<br/><hr><b>Input</b><br/><br/>The first line of input will be a string, denoting the D1 in the string format similar to &quot;Jul 11 2021&quot;.<br/>The second line of input will be an integer, denoting the Y to be added.<hr><b>Output</b><br/><br/>The output should be a single line containing the new date D2.<hr><b>Explanation</b><br/><br/>For example, if the given D1 is &quot;Jul 11 2014&quot; and Y is 5. Your code should print the date which is ahead of 5 years from the D1. So the output should be<br/>2019-07-11 00:00:00

Solution Code:from datetime import datetime, timedelta

# string to datetime
date_time_string = input()
n = int(input())
date_object = datetime.strptime(date_time_string, '%b %d %Y')

d_2 = date_object + timedelta(days=n*365)
print(d_2)"
b299e1ed-6a98-4732-ba59-746665b65817,"Write a program to print the previous day of D, the current day D, and the next day of D.<br/>The date in string format is like &quot;8 Feb 2021&quot;.<hr><b>Input</b><br/><br/>The input will be a single line containing the date in the string format.<hr><b>Output</b><br/><br/>The first line of output should contain the date of the previous day.<br/>The second line of output should contain the date of the current day.<br/>The third line of output should contain the date of the next day.<hr><b>Explanation</b><br/><br/>For example, if the given date is &quot;26 Jan 2021&quot;, your code should print the previous day of that day, which is &quot;25 Jan 2021&quot;, the given date and the next day, which is &quot;27 Jan 2021&quot;. So the output should be<br/>2021-01-25 00:00:00<br/>2021-01-26 00:00:00<br/>2021-01-27 00:00:00

Solution Code:from datetime import datetime, timedelta

date = input()
date_string = ""%d %b %Y""
today = datetime.strptime(date, date_string)

yesterday = today - timedelta(days=1)
next_day = today + timedelta(days=1)

print(yesterday)
print(today)
print(next_day)"
a44c05ee-ddb3-4bd0-a2fa-579086cb1a2c,"Write a program that reads two numbers `M` and `N`, and finds the product of the numbers from `M` to `N` that are divisible by **3**.

Print the product of the numbers from `M` to `N` that are divisible by **3**. If there are no numbers that are divisible by **3** from `M` to `N`. Otherwise, print **1**.

---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the product of the numbers from `M` to `N` that are divisible by **3** if there are numbers that are divisible by **3** from `M` to `N`. Otherwise, print **1**.

---

#### Constraints

`N` should be greater than or equal to `M`.

---

#### Explanation

For example, if the given numbers are `M = 2` and `N = 7`,

- The numbers from **2** to **7** are **2**, **3**, **4**, **5**, **6** and **7**.
- Numbers from **2** to **7** that are divisible by **3** are **3** and **6**.
- The product of numbers from **2** to **7** that are divisible by **3** is **18**. (`3 * 6 = 18`)

|Number | Previous Product | Current Product (Previous Product * Number) |
|---|---| -- |---|
|3 | 1 |1 * 3 = 3 |
|6 | 3 |3 * 6 = 18 |

The output should be **18**.

Solution Code:m = int(input()) 
n = int(input())
product = 1 
if m > n:
    print(1)

for i in range(m,n + 1):
    if (i % 3 == 0):
        product = product * i
print(product)"
335932da-1d60-492e-9ae3-ef6dd4198f83,"Given an integer `N`, and exponent `M` as input, write a program to calculate `N` power `M` without using the power operator (`**`).

---

#### Input

The first line of input is an integer `N`.
The second line of input is an integer `M`.

---

#### Output

The output should be an integer representing the `N` power `M`.

---


#### Explanation

Given `N = 2`, `M = 3`

2<sup>3</sup> = 8

So, the output should be `8`.

Solution Code:M = int(input())
N = int(input())
total = 1
for i in range(N):
    total = total * M
print(total)"
8456c04a-843c-481a-821a-b67cb54d5c78,"Write a program that reads two numbers `N` and `K` and prints the sum of the `Kth` power of all the numbers from **1** to `N`.

---

#### Input

The first line of input contains an integer representing `N`.
The second line of input contains an integer representing `K`.

---

#### Output

The output should be a single line containing an integer that is the sum of the `Kth` power of all the numbers from **1** to `N`.

---

#### Explanation

For example, if the given two numbers are `N = 5` and `K = 3`,

* The numbers from **1** to **5** are **1**, **2**, **3**, **4** and **5**.
* The **3** (`K`) power of all numbers from **1** to **5** are **1<sup>3</sup>**, **2<sup>3</sup>**, **3<sup>3</sup>**, **4<sup>3</sup>** and **5<sup>3</sup>**).
* The sum of **3** (`K`) power of the numbers from **1** to **5** is **225**. (**1<sup>3</sup>+2<sup>3</sup>+3<sup>3</sup>+4<sup>3</sup>+5<sup>3</sup>**)

|Number (X) | 3 power of Number (X<sup>3</sup>)| Previous Sum | Current Sum (Previous Sum + (X<sup>3</sup>)) |
|---|---| -- |---|
|1 | 1 | 0 |0 + 1 = 1 |
|2 | 8 | 1 |1 + 8 = 9 |
|3 | 27 | 9 |9 + 27 = 36 |
|4 | 64 | 36 |36 + 64 = 100 |
|5 | 125 | 100 |100 + 125 = 225 |

The output should be `225`.

Solution Code:number = int(input())
kth_number = int(input())
sum_of_scores = 0 

for counter in range(1, number + 1):
    power = counter ** kth_number 
    sum_of_scores = sum_of_scores + power 
print(sum_of_scores)"
23159177-f8aa-4ae4-a996-42f29efb5fb0,"Given two integers `M`, `N`. Write a program to print the product of numbers in the range `M` and `N` (inclusive of `M` and `N`).

---

#### Input

The first line of input is an integer `M`.
The second line of input is an integer `N`.

---




#### Explanation

In the given example, the product of numbers between the range `2` and `5` is `2 * 3 * 4 * 5`. Therefore, the output should be `120`.

Solution Code:m = int(input())
n = int(input())
product = 1
for i in range(m,n+1) :
    product = product * i 
print(product)"
6ea8a38a-30f3-4a92-aac9-e9386c45ed10,"Given two strings `S1` and `S2`, write a program that checks if `S2` is at the beginning or ending of `S1`.

Print **True** if `S2` is at the beginning or ending of `S1`. Otherwise, print **False**.

---

#### Input

The first line of input contains a string representing `S1`.
The second line of input contains a string representing `S2`.

---

#### Output

The output should be a single line containing a string. **True** should be printed if `S2` is at the beginning or ending of `S1`. Otherwise, **False** should be printed.

---

#### Explanation

For example, if the given strings are `S1 = ""Manager""` and `S2 = ""Man""`,

   - **Man**ager begins with **Man**.

The output should be **True** as the `S1` starts with `S2`.

<br/>

For example, if the given strings are `S1 = ""helicopter""` and `S2 = ""cop""`,

   - **helicopter** does not begins with **cop** or ends with **cop**.

The output should be **False** as `S1` does not begin with or end with `S2`.

Solution Code:string1 = input()
string2 = input()

len_2 = len(string2)

first_part = string1[:len_2]
last_part = string1[-len_2:]

result = (string2 == first_part) or (string2 == last_part)

print(result)"
a1f9f59e-ddc8-4ea5-bfb8-e6fb6fa45774,"Write a program that reads a number `N` and prints the numbers from **0** to `N`.

<MultiLineNote>
Use **For** loop for iteration.
</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should contain all the numbers from **0** to `N`, each on a new line. 

---

#### Explanation

For example, if the given number is `N = 4`,

* The numbers from **0** to **4** are **0**, **1**, **2**, **3** and **4**.

The output should be,

```
0
1
2
3
4
```


Solution Code:a=int(input())         
for i in range(a+1):   
    print(i) "
892bfcce-2cc9-433d-b225-00db3a7d7f7d,"Write a program to print the sum of the squares of the first N natural numbers.<hr><b>Input</b><br/><br/>The input will be a single line containing a positive integer (N).<hr><b>Output</b><br/><br/>The output should be a single line containing the sum of the squares of the first N natural numbers.<hr><b>Explanation</b><br/><br/>For example, if the given number is 6, the sum of the squares of the first 6 natural numbers, which is (1 + 4 + 9 + 16 + 25 + 36). So the output should be 91.<br/><br/>For example, if the given number is 3, the sum of the squares of the  first 3 natural numbers, which is (1 + 4 + 9). So the output should be 14.

Solution Code:n = int(input())
sum_of_squares = 0
for i in range(1,n+1) :
    sum_of_squares = sum_of_squares +(i * i)  
print(sum_of_squares)"
5340c267-91c6-4a8e-8435-3907b64ee080,"Given an integer `N`. Write a program to print integers from `N` to 1.

---

#### Input

The first line of input is an integer `N`.

---




#### Explanation

In the given example, `N = 5` the integers from 5 to 1 are `5, 4, 3, 2, 1`.

Therefore, the output should be 

```
5
4
3
2
1
```

Solution Code:n = int(input())

counter = n

while counter > 0:
    print(counter)
    counter = counter - 1  "
9467be0c-7c8f-4a7b-998c-f095963d52aa,"Write a program that reads a number `N` and print `N` numbers starting from **0**.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be `N` lines, with each line containing an integer that is one of the `N` numbers starting from **0**.

---

#### Explanation

For example, if the given number is `N = 2`,

* The **2** numbers from **0** are **0** and **1**.

The output should be,

```
0
1
```

Solution Code:N = int(input())

if N == 0:
    print(""No Output"")
for i in range(N):
    print(i)"
6b298afa-d7cf-4cbf-bde2-7d82ee99a4cf,"Given two integer numbers M and N, write a program to print the integers from M to N.<hr><b>Input</b><br/><br/>The first line of input will contain an integer.<br/>The second line of input will contain an integer.<hr><b>Output</b><br/><br/>The output should be printing an integer in each line, starting from M to N.<hr><b>Explanation</b><br/><br/>For example, if the given numbers are 2 and 6, the output should be<br/><br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 0em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255, 0.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">2
3
4
5
6
</code></pre><br/>Similarly, if the given numbers are -2 and 2, the output should be<br/><br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 0em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255, 0.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">-2
-1
0
1
2
</code></pre>

Solution Code:m = int(input())
n = int(input())

while m <= n:
 print(m)
 m = m + 1"
91c64883-4b67-4a54-bb33-39c9f59ca3fa,"Write a program to print integers from 1 to the given integer (N).

---

#### Input  
  
The first line of input will contain a positive integer.

---

#### Output  
  
The output should be of N lines, printing an integer in each line.

---

#### Explanation  
  
For example, if the given number is 3, your code should print the  
  

    1
    2
    3
    

  
Similarly, if the given number is 5, your code should print the  
  

    1
    2
    3
    4
    5

Solution Code:n = int(input())
counter = 1
while counter <= n:
 print(counter)
 counter = counter + 1"
3bd215a5-334a-4a29-9833-8b99e84f3c32,"Write a program that reads a number `N` and prints the **sum** of `N` Natural Numbers.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output  

The output should be a single line containing an integer that is the **sum** of `N` Natural Numbers.

---

#### Explanation  

For example, if the given number is `N = 6`, 

* The numbers from **1** to **6** are **1**, **2**, **3**, **4**, **5** and **6**.
* The **sum** of the numbers is **21**. (`1 + 2 + 3 + 4 + 5 + 6 = 21`)

|Number | Previous Sum | Previous Sum + Number = Current Sum |
|---|---|---|
|1 | 0 | 0 + 1 = 1 |
|2 | 1 | 1 + 2 = 3|
|3 | 3 | 3 + 3 = 6|
|4 | 6 | 6 + 4 = 10|
|5 | 10| 10 + 5 = 15|
|6 | 15 | 15 + 6 = 21|

The output should be **21**.

Solution Code:number = int(input())

counter = 0
sum_of_numbers = 0
while counter < number:
 counter = counter + 1
 sum_of_numbers = sum_of_numbers + counter

print(sum_of_numbers)"
bd8160f2-9bcb-45e6-ac4b-ae8dded55417,"Write a program that reads a word and prints each character of the word in a new line.<hr><b>Input</b><br/><br/>The first line of input will contain a word.<hr><b>Output</b><br/><br/>The output should contain N lines, equal to the length of the word. Each of the N lines should contain a character of the word.<hr><b>Explanation</b><br/><br/>For example, if the given word is &quot;Python&quot;.<br/>Your code should print each character of the word in a line.<br/>So the output should be<br/><br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 0em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255, 0.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">P
y
t
h
o
n
</code></pre>

Solution Code:a = input()
counter = 0
length_of_a = len(a)
while counter <= (length_of_a - 1):
 print(a[counter])
 counter = (counter + 1)"
952875b5-ef28-4d2b-a7b5-a0ce4e7d98ee,"Write a program that reads a number `N` and prints the cube of `N` numbers from **1**.

<MultiLineNote>
The cube of a number `X` is `X` to the power of **3**. (**X<sup>3</sup>**)
</MultiLineNote>


---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should contain cubes of `N` numbers from **1**, each on a new line.

---

#### Explanation

For example, if the given number is `N = 4`,

* The **4** numbers from **1** are **1**, **2**, **3** and **4**.
* The cube of the numbers is **1**, **8**, **27** and **64**.

The output should be,

```
1
8
27
64
```


Solution Code:number = int(input())

counter = 0

while counter < number:
 counter = counter + 1
 print(counter ** 3)"
1ecd10a6-53a2-4067-af44-a09604ee7552,"Write a program that reads a number `N` and prints **10** numbers after `N`.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should contain **10** numbers after `N`, each on a new line.

---

#### Explanation

For example, if the given number is `N = 2`,

* The **10** numbers after **2** are **3**, **4**, **5**, **6**, **7**, **8**, **9**, **10**, **11** and **12**.

The output should be,

```
3
4
5
6
7
8
9
10
11
12
```

Solution Code:number = int(input())

counter = 0
 
while counter < 10: 
 counter = counter + 1
 number = number + 1 
 print(number)"
f19da66b-cd5b-4eaf-bcbb-f7c54c38a50e,"Write a program that reads a number `N` and prints `N` Natural Numbers from **1**.

<MultiLineNote>
All the positive numbers from **1** are called **Natural Numbers**.
</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should contain `N` Natural Numbers from **1**, each on a new line.

---

#### Explanation

For example, if the given number is `N = 3`,

* The **3** numbers from **1** are **1**, **2** and **3**.

The output should be,

```
1
2
3
```


Solution Code:number = int(input())

counter = 0

while counter < number:
 counter = counter + 1
 print(counter)"
24898413-d32b-4945-9c3e-bc3e4a66f244,"Given a password `S`, check if `S` is a valid password.
The password is valid only if it contains at least one digit.

Print **Valid Password** if `S` is a valid Password. Otherwise, print **Invalid Password**.

---

#### Input

The input will be a single line containing a string representing password `S`.

---

#### Output

The output should be a single line containing a string **Valid Password** if the password as at least one digit. Otherwise, **Invalid Password**.

---

#### Explanation

For example, if the given password is ` S = Qwerty00`,

- The characters in the password `S` are **Q**, **w**, **e**, **r**, **t**, **y**, **0** and **0**.
- The password **Qwerty00** contains **2** digits **0** and **0**.

The output should be **Valid Password**.

Solution Code:password = input()

contains_digit = False
for character in password:
 is_digit = character.isdigit()
 if is_digit:
 contains_digit = True

if contains_digit:
 print(""Valid Password"")
else:
 print(""Invalid Password"")"
805488d6-b241-42fc-b333-e2b5826060df,"Given a word, write a program to convert all the uppercase letters to lowercase letters and vice versa.<hr><b>Input</b><br/><br/>The input will be a single line containing a string.<hr><b>Output</b><br/><br/>The output should be a single line containing the modified word.<hr><b>Explanation</b><br/><br/>For example, if the given word is &quot;Coding&quot;, your code should print the output by swapping the case of all letters (&quot;cODING&quot;).

Solution Code:word = input()

modified_word = """"
for character in word:
 uppercase_char = character.upper()
 if uppercase_char == character:
 modified_word = modified_word + character.lower()
 else:
 modified_word = modified_word + character.upper()

print(modified_word)"
50c5a206-2d37-4e0d-951b-38bbb9dc082d,"Write a program to check whether the given password is valid or not.<br/>Consider the password to be valid if it contains at least one uppercase letter.<hr><b>Input</b><br/><br/>The input will be a single line containing a string.<hr><b>Output</b><br/><br/>The output should be a single line containing either &quot;Valid Password&quot; or &quot;Invalid Password&quot;.<hr><b>Explanation</b><br/><br/>For example, if the given password is &quot;Qwerty00&quot;, the output should be &quot;Valid Password&quot; as it contains an uppercase letter.<br/>Whereas, if the given password is &quot;stadium&quot;, the output should be &quot;Invalid Password&quot; as it does not contain a uppercase letter.

Solution Code:password = input()

is_all_lower = (password.lower() == password)

if is_all_lower:
 print(""Invalid Password"")
else:
 print(""Valid Password"")"
4927c98b-9326-43a7-8a71-e23e7306aa9a,"Given an URL, write a program that checks if the given URL is a secured URL.

Print **True** if the given URL is a secured URL. Otherwise, print **False**.

<MultiLineNote>
The url that starts with **https://** is a secured url
</MultiLineNote>

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the URL is secured. Otherwise, **False** should be printed.

---

#### Explanation

For example, if the given URL is **https://docs.google.com**,

- The given URL **https://docs.google.com** starts with **https://**.

The output should be **True**, as the URL is secured.


Solution Code:url = input()

is_secure_url = url.startswith(""https://"") 

print(is_secure_url)"
23554e48-6312-49bb-8bee-a244adb651a4,"Given a string, check if the given string is a palindrome.

A palindrome is a sequence of characters that can be read the same way whether you start from the beginning or the end.

<MultiLineNote>
Consider uppercase characters and lowercase characters as different.
</MultiLineNote>

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the given string is a palindrome. Otherwise, **False** should be printed.

---

#### Explanation

For example, if the given string is **madam**,

- The reverse of the string **madam** is **madam**.
- As the reversed string and the given string are the same, the string is a palindrome.

The output should be **True**, as the given string is a palindrome.
<br/>
For example, if the given string is **Noon**,

- The reverse of the string **Noon** is **nooN**.
- Lowercase **n** is not the same as upper case **N**.
- As the reversed string and the given string are not the same, the string is not a palindrome.

The output should be **False**, as the given string is not a palindrome.


Solution Code:string = input()

reversed_string = """"

for each_character in string:
 reversed_string = each_character + reversed_string

is_palindrome = (string == reversed_string)
print(is_palindrome)"
e5804d9e-fead-4d44-8ba7-3cd23ae0d926,"Given a file name with the file extension, write a program that checks if the given file is a Python file.

Print **True** if the file is a Python file. Otherwise, print **False**.

<MultiLineNote>
- A file extension is added to the end of a file name to identify the file's format.
- A Python file has the extension **.py**.
</MultiLineNote>

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if the file is a Python file. Otherwise, **False** should be printed.

---

#### Explanation

For example, if the given file name is **add_numbers.py**,

- The given file name **add_numbers.py** ends with the extension **.py**.

The output should be **True**, as the given file is a Python file.


Solution Code:file_name = input() 

is_python_file = file_name.endswith("".py"") 

print(is_python_file)"
7950e1a6-9008-444a-8d68-de31af7ab873,"Given a string, write a program to modify the string as given below.

- Add a hyphen (`-`) before each upper-case character.
- Convert upper-case characters into lower-case characters.

Print the modified string.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing a string obtained by adding a hyphen (`-`) before each uppercase character and converting uppercase characters to lower-case characters.

---

#### Explanation

For example, if the given string is **aChristmasStory**,

- The upper-case characters in the string **aChristmasStory** are **C and S**.
- After adding a hyphen (`-`) before the upper case characters **C** and **S** the string is **a-Christmas-Story**.
- After converting the upper case characters **C** and **S** to the lower case characters **c** and **s** the string is **a-christmas-story**.
- The modified string after adding hyphen (`-`) before each uppercase character and convert uppercase characters to lower-case characters.

The output should be **a-christmas-story**.


Solution Code:string = input()

length = len(string)
result_string = string[0]

for each_number in range(1, length):
 each_character = string[each_number]
 upper_case_character = each_character.upper()
 lower_case_character = each_character.lower()

 if each_character == upper_case_character:
 result_string = result_string + ""-"" + lower_case_character
 else:
 result_string = result_string + each_character

print(result_string)"
77549672-20b0-4d87-8d97-643baffd3751,"Given a number `N`, write a program to find the count of factors of `N`.

Print **Number has more than 2 factors** if the count of factors is greater than **2**. Otherwise, print **Number doesn't have more than 2 factors**.

<MultiLineNote>
A factor is a number that divides another number, leaving no remainder.

- For example 4 % 2 == 0, 2 is factor of 4.
</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing a string. **Number has more than 2 factors** should be printed if the count of factors of the number `N` is greater than **2**. Otherwise, **Number doesn't have more than 2 factors** should be printed.

---

#### Explanation

For example, if the given number is `N = 6`,

- The factors of **6** are **1**, **2**, **3** and **6**.
- The count of factors for **6** is **4**.

The output should be **Number has more than 2 factors**.

Solution Code:n = int(input()) 
count = 0
for i in range(1,n+1):
    if (n % i == 0):
        count+=1 
if count >2:
    print(""Number has more than 2 factors"") 
else:
    print(""Number doesn't have more than 2 factors"")"
21ad067b-b00e-4ffc-9c8f-ed469ae6adc6,"Given an integer `N`, write a program to print the **sum** of `N` terms in the given series.

**Series:**

<div style=""background-color: #3c4257; padding: 15px; color: #f8f8f2;border-radius: 4px;margin: 10px;font-size: 18px;font-family:Monaco, Menlo, 'Ubuntu Mono', Consolas, source-code-pro, monospace"">
2, 22, 222, ... N terms
</div>

<br/>

**Terms in the given series:**

| Term Number | Term             | Number of 2's |
| ----------- | ---------------- | ------------- |
| First Term  | 2                | 1             |
| Second Term | 22               | 2             |
| Third Term  | 222              | 3             |
| ..          | ..               | ..            |
| Nth Term    | 222... (up to N) | N             |

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the **sum** of the series from **First Term** to **Nth Term**.

---

#### Explanation

For example, if the given number is `N = 3`,

- The number of terms is **3**.
- The terms from **First Term** to **Third Term** in the given series are **2**, **22** and **222**.

**Terms in the given series:**

| Term Number | Term | Number of 2's |
| ----------- | ---- | ------------- |
| First Term  | 2    | 1             |
| Second Term | 22   | 2             |
| Third Term  | 222  | 3             |

- The **sum** of the terms from **First Term** to **Third Term** is **246**. (`2 + 22 + 222 = 246`)

The output should be **246**.

Solution Code:n = int(input())

term_number = ""2""
total = 0
for i in range(1, n+1):
 term = term_number * i
 total = total + int(term)

print(total)"
51244398-3834-498b-bf79-38d09cef6f00,"Given an integer `N`, write a program to print the **sum** of `N` terms in the given series.

**Series:**

<div style=""background-color: #3c4257; padding: 15px; color: #f8f8f2;border-radius: 4px;margin: 10px;font-size: 18px;font-family:Monaco, Menlo, 'Ubuntu Mono', Consolas, source-code-pro, monospace"">
1, 11, 111, ... N terms
</div>

<br/>

**Terms in the given series:**

| Term Number | Term             | Number of 1's |
| ----------- | ---------------- | ------------- |
| First Term  | 1                | 1             |
| Second Term | 11               | 2             |
| Third Term  | 111              | 3             |
| ..          | ..               | ..            |
| Nth Term    | 111... (up to N)  | N             |

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the **sum** of the series from **First Term** to **Nth Term**.


---

#### Explanation

For example, if the given number is `N = 4`,

- The number of terms is **4**.
- The terms from **First Term** to **Fourth Term** in the given series are **1**, **11**, **111**, and **1111**.

**Terms in the given series:**

| Term Number | Term | Number of 1's       |
| ----------- | ---- | ------------------- |
| First Term  | 1    | 1                   |
| Second Term | 11   | 2                   |
| Third Term  | 111  | 3                   |
| Fourth Term | 1111 | 4                   |

- The **sum** of the terms from **First Term** to **Fourth Term** is **1234**. (`1 + 11 + 111 + 1111 = 1234`)

The output should be **1234**.

Solution Code:n = int(input())

term_number = ""1""
sum_of_terms = 0

for i in range(1, n + 1):
 term = term_number * i
 sum_of_terms = sum_of_terms + int(term)

print(sum_of_terms)"
21df2b35-074f-4240-bc4c-869047bb61ad,"Given two numbers `X` and `N`, write a program to print the **sum** of `N` terms in the given series.

**Series:**

<div style=""background-color: #3c4257; padding: 15px; color: #f8f8f2;border-radius: 4px;margin: 10px;font-size: 18px;font-family:Monaco, Menlo, 'Ubuntu Mono', Consolas, source-code-pro, monospace"">
X, XX, XXX, ... N terms
</div>

<br/>

**Terms in the given series:**

| Term Number | Term             | Number of X's |
| ----------- | ---------------- | ------------- |
| First Term  | X                | 1             |
| Second Term | XX               | 2             |
| Third Term  | XXX              | 3             |
| ..          | ..               | ..            |
| Nth Term    | XXXX... (upto N) | N             |

---

#### Input

The first line of input contains an integer representing `X`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the **sum** of the series from **First Term** to **Nth Term**.

---

#### Explanation

For example, if the given numbers are `X = 7` and `N = 4`,

- The number of terms is **4**.
- The terms from **First Term** to **Fourth Term** in the given **7** (`X`) series are **7**, **77**, **777**, and **7777**.

  **Terms in the given series:**

  | Term Number | Term | Number of X's (7's) |
  | ----------- |:----:| ------------------- |
  | First Term  | 7    | 1                   |
  | Second Term | 77   | 2                   |
  | Third Term  | 777  | 3                   |
  | Fourth Term | 7777 | 4                   |

- The **sum** of the terms from **First Term** to **Fourth Term** is **8638**. (`7 + 77 + 777 + 7777 = 8638`)

The output should be **8638**.


Solution Code:x = int(input())
n = int(input())

sum_of_terms = 0

for i in range(1, n + 1):
    term = str(x) * i
    sum_of_terms = sum_of_terms + int(term)

print(sum_of_terms)"
c3e468d4-df88-4511-aadd-2aef538b6fb8,"Given two numbers `M` and `N`, write a program to find the count of numbers from `M` to `N` that are divisible by **9**.

Print **No Numbers found** if the count of numbers from `M` to `N` that are divisible by **9** is **0**. Otherwise, print the numbers from `M` to `N` separated by a space that are divisible by **9**.

---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing the string. **No Numbers found** should be printed if the count of numbers from `M` to `N` that are divisible by **9** is **0**. Otherwise, space-separated numbers from `M` to `N` that are divisible by **9** should be printed.

---

#### Explanation

For example, if the given numbers are `M = 5` and `N = 25`,

- The numbers from **5** to **25** that are divisible by **9** are **9** and **18**.
- So, the count of numbers from **5** to **25** that are divisible by **9** is **2**.
- The string obtained after joining the numbers from **5** to **25** that are divisible by **9** with a space is **9 18**.

The output should be **9 18**.

<br/>

For example, if the given numbers are `M = 3` and `N = 8`,

- There are no numbers from **3** to **8** that are divisible by **9**.
- So, the count of numbers from **3** to **8** that are divisible by **9** is **0**.

The output should be **No Numbers found**.

Solution Code:m = int(input())
n = int(input())

count = 0
numbers_divisible_by_9 = """"

for number in range(m, n + 1):
    
    if number % 9 == 0:
        count = count + 1
        numbers_divisible_by_9 = numbers_divisible_by_9 + str(number) + ("" "")

if count == 0:
    print(""No Numbers found"")
else:
    print(numbers_divisible_by_9)"
046194be-16aa-43ac-86d4-bab26f538e57,"Given a string, write a program to find the count of **Vowels** in the string.

Print **String has more than two vowels** if the count of **Vowels** is greater than **2**. Otherwise, print **String doesn't have more than two vowels**.

<MultiLineNote>
The vowels are **a**, **e**, **i**, **o** and **u**.
</MultiLineNote>

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing a string. **String has more than two vowels** should be printed if the count of **Vowels** in the string is greater than **2**. Otherwise, **String doesn't have more than two vowels** should be printed.

---

#### Explanation

For example, if the given string is **indian**,

- The characters in the string **indian** are **i**, **n**, **d**, **i**, **a**, and **n**.
- The Vowels in the string **indian** are **i**, **i**, and **a**.
- So, the count of **Vowels** in string **indian** is **3**. (**3** is greater than **2**)

The output should be **String has more than two vowels**, as the number of **Vowels** in the string **indian** is greater than **2**.


Solution Code:string = input()

vowels_count = 0

for character in string:
    is_vowel = (character == ""a"") or (character == ""e"") or (character == ""i"") or (character == ""o"") or (character == ""u"")
    if is_vowel:
        vowels_count = vowels_count + 1
    
if vowels_count > 2:
    print(""String has more than two vowels"")
else:
    print(""String doesn't have more than two vowels"")"
96d3f95d-da92-4167-97aa-c610bde9c668,"Given a number `N`, write a program to print the `N` terms in the given series, each on a new line.

**Series:**

<div style=""background-color: #3c4257; padding: 15px; color: #f8f8f2;border-radius: 4px;margin: 10px;font-size: 18px;font-family:Monaco, Menlo, 'Ubuntu Mono', Consolas, source-code-pro, monospace"">
2, 22, 222, 2222, .... N terms
</div>

<br/>

**Terms in the given series:**

| Term Number | Term             | Number of 2's |
| ----------- | ---------------- | ------------- |
| First Term  | 2                | 1             |
| Second Term | 22               | 2             |
| Third Term  | 222              | 3             |
| ..          | ..               | ..            |
| Nth Term    | 2222... (upto N) | N             |

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be `N` lines containing the terms from **First Term** to **Nth Term** in the given series.

---

#### Explanation

For example, if the given number is `N = 6`,

- The number of terms is **6**.
- Print the terms from **First Term** to **Sixth Term** in the given series.

**Terms in the given series:**

| Term Number | Term   | Number of 2's |
| ----------- | ------ | ------------- |
| First Term  | 2      | 1             |
| Second Term | 22     | 2             |
| Third Term  | 222    | 3             |
| Fourth Term | 2222   | 4             |
| Fifth Term  | 22222  | 5             |
| Sixth Term  | 222222 | 6             |

The output should be,

```
2
22
222
2222
22222
222222
```


Solution Code:number = int(input())

for each_number in range(1, number + 1):
 
 term = ""2"" * each_number
 term = int(term)
 print(term)"
22f50ae6-c195-4dd5-a791-db571d99c0dc,"Given a string in the format **dd-mm-yy** `S`, write a program to convert the string from **dd-mm-yy** format to **dd/mm/yy** format.

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a string after converting from **dd-mm-yy** format to **dd/mm/yy**.

---

#### Explanation

For example, if the given string is `S = 07-11-2020`,

- After replacing **"" - ""** with **"" / ""** in the date **07/11/2020**.

The output should be **07/11/2020**

Solution Code:date = input()
date = date.replace(""-"", ""/"")
print(date)"
fab99ec0-93be-4319-b6a8-bed961798e2b,"Given a string `S`, write a program that prints the given string after converting all the characters to lowercase and uppercase.

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The first line of output should be a string containing lowercase characters.
The second line of output should be a string containing uppercase characters.

---

#### Explanation

For example, if the given string is `S = ""Learning""`,

- The characters in the string `S` are **L**, **e**, **a**, **r**, **n**, **i**, **n** and **g**.
- After converting string `S` to lowercase, the string is **learning**.
- After converting string `S` to uppercase, the string is **LEARNING**.

The output should be,

```
learning
LEARNING
```

Solution Code:word = input()

lower_case_word = word.lower()
upper_case_word = word.upper()

print(lower_case_word)
print(upper_case_word)"
a4fac0c8-d543-432f-8321-2ebbecfb0b48,"Given a string, write a program to check if all the characters in the string are in **uppercase**.

Print **True** if the string contains all **uppercase** characters, otherwise print **False**.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if all the characters in the string are in **uppercase**. Otherwise, **False** should be printed.

---

#### Explanation

For example, if the given string is **IEEE**, the output should be **True** as all the characters in the given string are in **uppercase**.


Solution Code:string = input()

is_string_uppercase = string == string.upper()

print(is_string_uppercase"
422cd34b-0663-4262-95f7-1c1b164d0231,"Given a string `S`, write a program that prints the modified string by removing the leading and trailing spaces from the string `S`.

<MultiLineNote>
- Leading spaces are any whitespace characters that appear before the first non-whitespace character in a string. 
- Trailing spaces are any whitespace characters that appear after the last non-whitespace character in a string.

For example, in the string **""  hello world  ""**, there are two leading spaces before the **h** and two trailing spaces after the **d**.
</MultiLineNote>

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a string obtained by removing the leading and trailing spaces from the given string.

---

#### Explanation

For example, if the given string is `S = ""                   practice    ""`.

- `S` has trailing and leading spaces.
- `S` after removing trailing and leading spaces is **practice**.

The output should be **practice**.


Solution Code:string = input()

stripped_string = string.strip("" "")

print(stripped_string)"
33799f63-24ea-4f06-a1f3-6ea154a04ee5,"Given a string, write a program that checks if all the characters in the string are digits.

Print **True** if all the characters in the string are digits. Otherwise, print **False**.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if all the characters in the string are digits. Otherwise, **False** should be printed.

---

#### Explanation

For example, if the given string is **5GNetwork**,

- The characters in the string **5GNetwork** are **5, G, N, e, t, w, o, r** and **k**.
- The digits in **5GNetwork** are **5**.
- The alphabets in **5GNetwork** are **G, N, e, t, w, o, r** and **k**.

The output should be **False**, as all the characters in string **5GNetwork** are not digits.


Solution Code:string = input()

contains_digit = string.isdigit()

print(contains_digit)"
d95fca7c-51e8-442a-9f23-598c8cca461f,"Given a string, write a program that prints all the uppercase letters of the given string.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing a string obtained by joining the uppercase letters of the given string.

---

#### Explanation

For example, if the given string is **SofTwArE**.

- The characters of the given string are **S**, **o**, **f**, **T**, **w**, **A**, **r** and **E**.
- The uppercase letters in the given string are **S**, **T**, **A** and **E**.

The output should be **STAE**.

Solution Code:string = input()

upper_case_letters = """"

for character in string:
 is_upper = (character == character.upper())
 if is_upper:
 upper_case_letters = upper_case_letters + character

print(upper_case_letters)"
295c09f1-1ec1-4e91-b7f7-e3178bf343a9,"Given a string `S`, write a program that prints the modified string by removing the leading and trailing stars (`*`) from the string `S`.

<MultiLineNote>
- Leading stars that appear before the first non-whitespace character in a string. 
- Trailing stars that appear after the last non-whitespace character in a string.

For example, in the string `""****Hello, world****""`, there are four leading stars before the **H** and four trailing stars after the **d**.
</MultiLineNote>

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a string obtained by removing the leading and trailing stars from the given string.

---

#### Explanation

For example, if the given string is `S = ""****python****""`.

- `S` has trailing and leading stars.
- `S` after removing trailing and leading stars is **python**.

The output should be **python**.


Solution Code:string = input()

stripped_string = string.strip(""*"")

print(stripped_string)"
6ec51c7b-9dea-4dd7-969a-99190a1631d5,"Given a string, write a program to print the string by converting all the characters in the string to **lowercase**.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing a string obtained by converting all the characters in the given string to **lowercase**.

---

#### Explanation

For example, if the given string is **NOVEMBER**,

- The characters in the string **NOVEMBER** are **N**, **O**, **V**, **E**, **M**, **B**, **E**, **R**.
- After converting characters into lowercase.

The output should be **november**.


Solution Code:string = input()

lowercase_string = string.lower()

print(lowercase_string)"
88f848a2-1c2b-4408-8360-81995f69c453,"Given a string, write a program to print only the alphabets in the given string.

<MultiLineNote>
In the given string there are two special characters before and two special characters after each letter. 

Ex: ##**P**##**Y**##**T**##**H**##**O**##**N**##.

</MultiLineNote>

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing a string that contains only alphabets.

---

#### Explanation

For example, if the given string is ""**--c--a--r--**"",

- The alphabets in the string with index values are,

<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';display: table-cell; vertical-align: inherit;font-weight: 900; text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">-</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center; border-right: 1px solid #dcdcdc;padding: 8px 12px;"">-</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">c</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit;font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">-</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit;font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">-</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">a</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">-</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit;font-weight: 900; text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">-</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">r</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;border-right: 1px solid #dcdcdc;padding: 8px 12px;"">-</div>
   <div style=""font-family: 'Roboto';display: table-cell;vertical-align: inherit; font-weight: 900;text-align: center;"">-</div>
</div>
<div style=""display: table-row;vertical-align: inherit; border-color: inherit;"">
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit; border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">0</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">1</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell;font-weight: 900; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">2</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">3</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">4</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell;font-weight: 900; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">5</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">6</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">7</div>
   <div style=""font-family: 'Roboto';font-weight: 900;display: table-cell;font-weight: 900; vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">8</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: inherit;border-right: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">9</div>
   <div style=""font-family: 'Roboto';color: #808080;display: table-cell;vertical-align: 1px solid #dcdcdc;padding: 8px 12px;border-top: 1px solid #dcdcdc;"">10</div>
</div>

<br>
- The alphabets in the given string in order are **c**, **a**, **r**.

The output should be **car**.


Solution Code:string = input()

start_index = 2
step = 3

word = string[start_index::step]

print(word)"
0c212af0-751a-4402-a611-fd61c2546d38,"Write a program that reads a number `N` and prints even numbers from **1** to `N`.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should contain all the even numbers from **1** to `N`, each on a new line.

---

#### Explanation

For example, if the given number is `N = 7`,

- The numbers from **1** to **7** are **1**, **2**, **3**, **4**, **5**, **6**, and **7**.

- The even numbers among numbers from **1** to **7** are **2**, **4**, and **6**.

The output should be,

```
2
4
6
```


Solution Code:n = int(input())

for number in range(1, n + 1):
    if number % 2 == 0:
        print(number)"
81c2dcfb-4992-4fa7-a120-6adf458178b7,"Write a program that reads two numbers `M` and `N`, and prints the product of odd numbers from `M` to `N`.

---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the product of the odd numbers from `M` to `N`.

---

#### Explanation

For example, if the given numbers are `M = 2` and `N = 7`,

- Numbers from **2** to **7** are **2**, **3**, **4**, **5**, **6**, and **7**.
- The odd numbers among numbers from **2** to **7** are **3**, **5**, and **7**.
- The product of odd numbers from **2** to **7** is **105**. (`3 * 5 * 7 = 105`)

|Number | Previous Product | Previous Product * Number = Current Product |
|---|---|---|
|3 | 1 | 1 * 3 = 3 |
|5 | 3 | 3 * 5 = 15 |
|7 | 15 | 15 * 7 = 105 |

The output should be **105**.


Solution Code:start_number = int(input())
end_number = int(input())

product = 1

for i in range(start_number, end_number + 1):
    if i % 2 == 1:
        product = product * i

print(product)"
41507b40-b202-47b7-b7bc-861b81b08b6e,"Write a program that reads two numbers `M` and `N`, and prints the sum of squares of numbers from `M` to `N`.

---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the sum of squares of numbers from `M` to `N`.

---

#### Explanation

For example, if the given numbers are `M = 2` and `N = 4`,

- Numbers from **2** to **4** are **2**, **3**, and **4**.
- The squares of numbers from **2** to **4** are **4**, **9**, and **16**.
- The sum of the squares of numbers from **2** to **4** is **29**. (**4 + 9 + 16 = 29**)

|Number (X) | Square of Number (X<sup>2</sup>)| Previous Sum | Previous Sum + (X<sup>2</sup>) = Current Sum |
|---|---| -- |---|
|2 | 4 | 0 |0 + 4 = 4 |
|3 | 9 | 4 |4 + 9 = 13 |
|4 | 16 | 13 |13 + 16  = 29 |

The output should be **29**.


Solution Code:start_number = int(input())
end_number = int(input())

sum_of_squares = 0

for number in range(start_number, end_number + 1):
    square = number ** 2
    sum_of_squares = sum_of_squares + square
    
print(sum_of_squares)"
e73ff989-199e-40de-b0b4-1c32f027f0da,"Write a program to print the factorial of `N`.Factorial is the product of all positive integers less than or equal to `N`.

<MultiLineNote>

The **factorial** of **0** is **1**.
</MultiLineNote>

----

#### Input

The input will be a single line containing a positive integer representing `N`.

---

#### Output
The output should be a single line containing the factorial of the given number `N`.

---

#### Explanation

For example, if the given number is `N = 4`, 

- The factorial of **4** is **24** .`(4 × 3 × 2 × 1 = 24)`

So, the output should be **24**.


For example, if the given number is `N = 7`, 

- The factorial of **7** is **5040**. `(7 × 6 × 5 × 4 × 3 × 2 × 1 = 5040)`

So the output should be **5040**.

Solution Code:number = int(input())

factorial = 1
for i in range(1, number + 1):
 factorial = factorial * i

print(factorial)"
fec1469d-0500-4468-a63c-4007b292a9de,"Given two integers M and N, write a program to print the sum of the odd numbers from M to N.<hr><b>Input</b><br/><br/>The first line of input will contain an integer.<br/>The second line of input will contain an integer.<hr><b>Output</b><br/><br/>The output should be a single line containing the sum of the odd numbers from M to N.<hr><b>Explanation</b><br/><br/>For example, if the given numbers are 5 and 13, the output should be the sum of the odd numbers from 5 to 13 (5 + 7 + 9 + 11 + 13), which is 45.

Solution Code:m = int(input())
n = int(input())

total = 0
for number in range(m, n+1):
 if (number % 2) == 1:
 total = total + number

print(total)"
fe946d0b-531a-4333-949a-437029746267,"Write a program to print the sum of all the digits in the given number.<hr><b>Input</b><br/><br/>The input will be a single line containing a positive integer.<hr><b>Output</b><br/><br/>The output should be a single line containing the sum of the digits in the given number.<hr><b>Explanation</b><br/><br/>For example, if the given number is 151893, your code should print the sum of all the digits in the given number (1 + 5 + 1 + 8 + 9 + 3), which is 27.<br/><br/>For example, if the given number is 692, your code should print the sum of all the digits in the given number (6 + 9 + 2 ), which is 17.

Solution Code:number = input()

total = 0
for digit in number:
 total = total + int(digit)

print(total)"
1aef90d9-39d9-4937-ae70-c8384e1ff3aa,"Write a program that reads a number `N` and prints the sum of the odd numbers from **1** to `N`.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the sum of the odd numbers from **1** to `N`.

---

#### Explanation

For example, if the given number is `N = 6`,

- The numbers from **1** to **6** are **1**, **2**, **3**, **4**, **5**, and **6**.
- The odd numbers among numbers from **1** to **6** are **1**, **3**, and **5**.
- The sum of odd numbers from **1** to **6** is **9**. (`1 + 3 + 5 = 9`)

|Number | Previous Sum | Previous Sum + Number = Current Sum |
|---|---|---|
|1 | 0 | 0 + 1 = 1 |
|3 | 1 | 1 + 3 = 4 |
|5 | 4 | 4 + 5 = 9 |

The output should be **9**.

Solution Code:number = int(input())

total = 0
for i in range(1, number + 1):
 if (i % 2) == 1:
 total = total + i

print(total)"
736c2bfe-2f39-4f37-9026-caef10abc3a2,"Write a program that reads a number `N`, and prints the sum of the cubes of numbers from **1** to `N`.

<MultiLineNote> 
The cube of a number `X` is `X` power **3**.(**X<sup>3</sup>**)
</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the sum of the cubes of numbers from **1** to `N`.

---

#### Explanation

For example, if the given number is `N = 3`,

- Numbers from **1** to **3** are **1**, **2**, and **3**.
- The cubes of numbers from **1** to **3** are **1**, **8**, and **27**.
- The sum of the cube of numbers from **1** to **3** is **36**. (**1 + 8 + 27 = 36**)

|Number (X) | Cube of Number (X<sup>3</sup>)| Previous Sum | Previous Sum + (X<sup>3</sup>) = Current Sum |
|---|---| -- |---|
|1 | 1 | 0 |0 + 1 = 1 |
|2 | 8 | 1 |1 + 8 = 9 |
|3 | 27 | 9 |9 + 27  = 36 |

The output should be **36**.

Solution Code:number = int(input())

total = 0
for i in range(1, number + 1):
 total = total + (i ** 3)

print(total)"
e83aa281-7a9d-4126-a3c1-37cd80aa793a,"Write a program that reads a number `N` and prints the sum of the even numbers from **1** to `N`.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the sum of the even numbers from **1** to `N`.

---

#### Explanation

For example, if the given number is `N = 6`,

- The numbers from **1** to **6** are **1**, **2**, **3**, **4**, **5**, and **6**.
- The even numbers among the numbers from **1** to **6** are **2**, **4**, and **6**.
- The sum of even numbers from **1** to **6** is **12**. (`2 + 4 + 6 = 12`)

|Number | Previous Sum | Previous Sum + Number = Current Sum |
|---|---|---|
|2 | 0 | 0 + 2 = 2 |
|4 | 2 | 2 + 4 = 6 |
|6 | 6 | 6 + 6 = 12 |

The output should be **12**.

Solution Code:number = int(input())

total = 0
for i in range(1, number + 1):
 if (i % 2) == 0:
 total = total + i

print(total)"
d1ad8360-25f0-4022-8d73-113bcf5fee31,"Write a program that reads two numbers `M` and `N` and prints the sum of the even numbers from `M` to `N`.

---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `N`.


---

#### Output

The output should be a single line containing an integer that is the sum of the even numbers from `M` to `N`.

---

#### Explanation

For example, if the given two numbers are `M = 2` and `N = 6`,

- The numbers from **2** to **6** are **2**, **3**, **4**, **5**, and **6**.
- The even numbers among the numbers from **2** to **6** are **2**, **4**, and **6**.
- The sum of even numbers from **2** to **6** is **12**. (`2 + 4 + 6 = 12`)

|Number | Previous Sum | Previous Sum + Number = Current Sum |
|---|---|---|
|2 | 0 | 0 + 2 = 2 |
|4 | 2 | 2 + 4 = 6 |
|6 | 6 | 6 + 6 = 12 |

The output should be **12**.

Solution Code:m = int(input())
n = int(input())

total = 0
for number in range(m, n+1):
 if (number % 2) == 0:
 total = total + number

print(total)"
32f659b9-eb50-404f-a64e-8d69e005ac61,"Write a program that reads two numbers `M` and `N`, and prints the numbers from `N` to `M`.

---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should contain all the integers from `N` to `M`, each on a new line.

---

#### Constraints

`N` should be greater than or equal to `M`.

---

#### Explanation

For example, if the given numbers are `M = 2` and `N = 5`,

- The numbers from **5** to **2** are **5**, **4**, **3** and **2**.

The output should be,

```
5
4
3
2
```


Solution Code:first_number = int(input())
last_number = int(input())

total_numbers = last_number - first_number

for i in range(total_numbers + 1):
 number = last_number - i
 print(number)"
341b6b68-7df3-4a0c-9503-0857de1673a6,"Write a program that reads a string and prints the **a** and **z** characters in the string.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should contain all the **a** and **z** characters in the string, each on a new line.

---

#### Explanation

For example, if the given string is **zigzag**,

- The characters in the string **zigzag** are **z**, **i**, **g**, **z**, **a** and **g**.
- The **a** and **z** characters in the string are **zza**.

The output should be,

```
z
z
a
```


Solution Code:string = input()

for each_character in string:
 if (each_character == ""a"") or (each_character == ""z""):
 print(each_character)"
b83a432c-0f58-4b9b-92cb-51bdb0cb7faf,"Write a program that reads a number `N` and prints the numbers from `N` to **1**.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be `N` lines containing integers from `N` to **1**, each on a new line.

---

#### Explanation

For example, if the given number is `N = 5`,

- Numbers from **5** to **1** are **5**, **4**, **3**, **2**, and **1**.

The output should be,

```
5
4
3
2
1
```


Solution Code:number = int(input())

for i in range(number):
    print(number - i)"
686f100a-39e8-4a14-a3b3-b66a26a70a7e,"Write a program that reads a number `N` and prints the count of numbers from **1** to `N` that are divisible by both **2** and **3**.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the count of numbers from **1** to `N` that are divisible by both **2** and **3**.

---

#### Explanation

For example, if the given number is `N = 12`,

- Numbers from **1** to **12** are **1**, **2**, **3**, **4**, **5**, **6**, **7**, **8**, **9**, **10**, **11** and **12**.
- Numbers from **1** to **12** that are divisible by both **2** and **3** are **6** and **12**.
- The count of numbers from **1** to **12** that are divisible by both **2** and **3** is **2**.

The output should be **2**.


Solution Code:n = int(input())
count = 0

for number in range(1, n + 1):
 if number % 2 == 0 and number % 3 == 0 :
 count = count + 1
 
print(count)"
a1b4272b-f90c-4afd-90ee-1434d70c9779,"Write a program that reads a string and prints the count of vowels in the string.

<MultiLineNote>
Vowels are **a**, **e**, **i**, **o**, and **u**.
</MultiLineNote>

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be a single line containing an integer that is the count of vowels in the string.

---

#### Explanation

For example, if the given string is **code**,

- The characters of the string **code** are **c**, **o**, **d** and **e**.
- The vowels in the string **code** are **o** and **e**.
- The count of vowels in the string **code** is **2**.

The output should be **2**.


Solution Code:string = input()
count = 0

for each_character in string:
    is_vowel = (each_character == 'a') or (each_character == 'e') or (each_character == 'i') or (each_character =='o') or (each_character== 'u')
    
    if is_vowel:
        count = count + 1
        
print(count)"
6bda4bef-7ebb-4c8e-ab38-626637cfe200,"Write a program that reads a string and prints the vowels in the string.

<MultiLineNote>
Vowels are **a**, **e**, **i**, **o**, and **u**.
</MultiLineNote>

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should contain all the vowels in the string, each on a new line.

---

#### Explanation

For example, if the given string is **indian**,

- The vowels in the string **indian** are **i**, **i**, and **a**.

The output should be,

```
i
i
a
```


Solution Code:string = input()

for each_character in string:
 is_vowel = (each_character == 'a') or (each_character == 'e') or (each_character == 'i') or (each_character =='o') or (each_character == 'u')
 if is_vowel:
 print(each_character)"
a0aeba0e-a1dc-4646-b8e5-a6eb51175251,"Write a program that reads two numbers `N` and `T`, and prints all the numbers from **1** to `N` that are divisible by `T`.

---

#### Input

The first line of input contains an integer representing `N`.
The second line of input contains an integer representing `T`.

---

#### Output

The output should contain all the numbers from **1** to `N` that are divisible by `T`, each on a new line.

---

#### Explanation

For example, if the given numbers are `N = 10` and `T = 3`,

- Numbers from **1** to **10** are **1**, **2**, **3**, **4**, **5**, **6**, **7**, **8**, **9**, and **10**.
- Numbers from **1** to **10** that are divisible by **3** are **3**, **6** and **9**.

The output should be,

```
 3
 6
 9
```


Solution Code:n = int(input())
t = int(input())

for each_number in range(1, n + 1):
 if(each_number % t == 0):
 print(each_number)"
9a60fafe-2499-4cde-8c83-049e5dcb3c28,"Write a program that reads a string and prints the characters of a string in reverse order.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should contain all the characters of the string in reverse order, each on a new line.

---

#### Explanation

For example, if the given string is **scale**,

- The characters in the string **scale** are **s**, **c**, **a**, **l**, and **e**.
- The characters in reverse order are **e**, **l**, **a**, **c**, and **s**.

The output should be,

```
e
l
a
c
s
```


Solution Code:string = input()

length = len(string)

for i in range(1, length + 1):
 index = length - i
 print(string[index])"
209ea1b8-241a-47fb-9ad1-27e4896ee34e,"Write a program that reads a number `N` and prints all the numbers from **1** to `N` that are divisible by both **2** and **3**.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should contain all the integers from **1** to `N` that are divisible by both **2** and **3**, each on a new line.

---

#### Explanation

For example, if the given number is `N = 15`,

- Numbers from **1** to **15** are **1**, **2**, **3**, **4**, **5**, **6**, **7**, **8**, **9**, **10**, **11**, **12**, **13**, **14**, and **15**.
- Numbers from **1** to **15** that are divisible by both **2** and **3** are **6** and **12**.

The output should be,

```
 6
 12
```


Solution Code:n = int(input())

for number in range(1, n + 1):
 if number % 2 == 0 and number % 3 == 0 :
 print(number)"
c0dad85c-b03b-4b30-ba0e-8b3b42b377b8,"Write a program that reads a number `N` and prints **10** numbers after `N`.

<MultiLineNote>
Use **For** loop.
</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should contain **10** numbers after `N`, each on a new line.

---

#### Explanation

For example, if the given number is `N = 4`,

- The **10** numbers after **4** are **5**, **6**, **7**, **8**, **9**, **10**, **11**, **12**, **13** and **14**.

The output should be,

```
5
6
7
8
9
10
11
12
13
14
```


Solution Code:number = int(input())

start_number = number + 1
end_number = start_number + 10

for each_number in range(start_number, end_number):
 print(each_number)"
ee51a883-e1ab-4b55-9737-476958d71054,"Given two integer numbers M and N, write a program to print the integers from M to N.<br/>Note: Use For Loop<hr><b>Input</b><br/><br/>The first line of input will contain an integer.<br/>The second line of input will contain an integer.<hr><b>Output</b><br/><br/>The output should be printing an integer in each line, starting from M to N.<hr><b>Explanation</b><br/><br/>For example, if the given numbers are 2 and 6, the output should be<br/><br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 0em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255, 0.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">2
3
4
5
6
</code></pre><br/>Similarly, if the given numbers are -2 and 2, the output should be<br/><br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 0em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255, 0.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">-2
-1
0
1
2
</code></pre>

Solution Code:start = int(input())
end = int(input())

for number in range(start, end + 1):
 print(number)"
229dcec3-cc0d-4756-bd8d-4576beb9012a,"Given two integers M and N, write a program to print the sum of the numbers from M to N.<hr><b>Input</b><br/><br/>The first line of input will contain an integer.<br/>The second line of input will contain an integer.<hr><b>Output</b><br/><br/>The output should be a single line containing the sum of the numbers from M to N.<hr><b>Explanation</b><br/><br/>For example, if the given numbers are 2 and 6, the output should be the sum of the numbers from 2 to 6 (2 + 3 + 4 + 5 + 6), which is 20.

Solution Code:m = int(input())
n = int(input())

total = 0
for i in range(m, n+1):
 total = total + i

print(total)"
083d496c-7076-4958-a509-bd82f80bbdb4,"Given two numbers `X` and `N`, write a program to print the **sum** of `N` terms in the given series.

**Series:**

<div style=""background-color: #3c4257; padding: 15px; color: #f8f8f2;border-radius: 4px; margin: 10px;font-size: 18px;font-family: Monaco, Menlo, 'Ubuntu Mono', Consolas, source-code-pro, monospace"">
X<sup>1</sup>, X<sup>3</sup>, X<sup>5</sup>, ... N terms
</div>

<br/>

**Terms in the given series:**

| Term Number | Term          | Power |
| ----------- | ------------- | ----- |
| First Term  | X<sup>1</sup> | 1     |
| Second Term | X<sup>3</sup> | 3     |
| Third Term  | X<sup>5</sup> | 5     |
| ..          | ..            | ..    |
| Nth Term    | X<sup>2N-1</sup>| 2N-1 |

---

#### Input

The first line of input contains an integer representing `X`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the **sum** of the series from the **first term** to the **Nth term**.

---

#### Explanation

For example, if the given numbers are `X = 2` and `N = 6`,

- Number of terms is **6**.
- The terms from **First Term** to **Sixth Term** in the given series are **2** (2<sup>1</sup>), **8** (2<sup>3</sup>), **32** (2<sup>5</sup>), **128** (2<sup>7</sup>), **512** (2<sup>9</sup>) and **2048** (2<sup>11</sup>).

  **Terms in the given series:**

  | Term Number | Term (X = 2)          | Power |
  | ----------- | --------------------- | ----- |
  | First Term  | 2<sup>1</sup> (2)     | 1     |
  | Second Term | 2<sup>3</sup> (8)     | 3     |
  | Third Term  | 2<sup>5</sup> (32)    | 5     |
  | Fourth Term | 2<sup>7</sup> (128)   | 7     |
  | Fifth Term  | 2<sup>9</sup> (512)   | 9     |
  | Sixth Term  | 2<sup>11</sup> (2048) | 11    |

- Sum of the terms from the **First Term** to the **Sixth Term** is **2730**. (`2 + 8 + 32 + 128 + 512 + 2048 = 2730`)

The output should be **2730**.


Solution Code:x = int(input())
n = int(input())

sum_of_terms = 0

power = 1

for each_number in range(1, n + 1):

    term = x ** power
    power = power + 2
    sum_of_terms = sum_of_terms + term

print(sum_of_terms)"
b03a0ace-284d-43aa-bd49-e7562fd4f6c4,"Given two numbers `X` and `N`, write a program to print the **sum** of `N` terms in the given series.

**Series:**

<div style=""background-color: #3c4257; padding: 15px; color: #f8f8f2;border-radius: 4px; margin: 10px;font-size: 18px;font-family: Monaco, Menlo, 'Ubuntu Mono', Consolas, source-code-pro, monospace"">
X<sup>2</sup>, X<sup>4</sup>, X<sup>6</sup>, ... N terms
</div>

<br/>

**Terms in the given series:**

| Term Number | Term          | Power |
| ----------- | ------------- | ----- |
| First Term  | X<sup>2</sup> | 2     |
| Second Term | X<sup>4</sup> | 4     |
| Third Term  | X<sup>6</sup> | 6     |
| ..          | ..            | ..    |
| Nth Term  | X<sup>2N</sup> | 2N     |

---

#### Input

The first line of input contains an integer representing `X`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the **sum** of the series from the **first term** to the **Nth term**.

---

#### Explanation

For example, if the given numbers are `X = 3` and `N = 4`,

- Number of terms is **4**.
- The terms from **First Term** to **Fourth Term** in the given series are **9** (3<sup>2</sup>), **81** (3<sup>4</sup>), **729** (3<sup>6</sup>) and **6561** (3<sup>8</sup>).

  **Terms in the given series:**

  | Term Number | Term (X = 3)         | Power |
  | ----------- | -------------------- | ----- |
  | First Term  | 3<sup>2</sup> (9)    | 2     |
  | Second Term | 3<sup>4</sup> (81)   | 4     |
  | Third Term  | 3<sup>6</sup> (729)  | 6     |
  | Fourth Term | 3<sup>8</sup> (6561) | 8     |

- Sum of the terms from the **First Term** to the **Fourth Term** is **7380**. (`9 + 81 + 729 + 6561 = 7380`)

The output should be **7380**.


Solution Code:x = int(input())
n = int(input())

sum_of_terms = 0
power = 0

for each_number in range(1, n + 1):

 power = power + 2
 term = x ** power
 sum_of_terms = sum_of_terms + term

print(sum_of_terms)"
6b177ec0-c2a4-483d-990e-a9827a2411f9,"Write a program that reads a string and prints the first character (The character at index **0**) of the given string on `N` lines, where `N` is the length of the given string.

<MultiLineNote>
Use the **For** loop to iterate over the string.
</MultiLineNote>

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be `N` lines containing a string that is the first character of the given string, each on a new line.

---

#### Explanation

For example, if the given string is **query**,

- The first character in the string **query** is **q**.
- The length of the string **query** is **5**.
- The character **q** should be printed on **5** lines.

The output should be,

```
q
q
q
q
q
```


Solution Code:string = input()
length_of_string = len(string)

for i in range(length_of_string):
 print(string[0])"
82dac7f1-2d93-4737-8527-79789ecf520e,"Write a program that reads a string and prints each character of the given string on a new line.

<MultiLineNote>
Use the **For** loop to iterate over the string.
</MultiLineNote>

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should contain all the characters of the given string with each character on a new line.

---

#### Explanation

For example, if the given string is **python**,

- The characters in the string **python** are **p**, **y**, **t**, **h**, **o**, and **n**.

The output should be,

```
p
y
t
h
o
n
```


Solution Code:string = input()

for each_char in string:
 print(each_char)"
6449c975-4076-41cb-9903-d2f8b6c74955,"Write a program that reads a number `N` and prints the cube of numbers from **1** to `N`.

<MultiLineNote>
* The cube of a number `X` is `X` power **3**.(**X<sup>3</sup>**)
* Use the **For** loop to iterate over the range of numbers.
</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be `N` lines containing integers that are the cubes of numbers from **1** to `N`.


---

#### Explanation

For example, if the given number is `N = 3`,

- The numbers from **1** to **3** are **1**, **2** and **3**.
- The cubes of numbers from **1** to **3** are **1**, **8**, and **27**.

|Number (N) | Cube of N (N<sup>3</sup>)| 
|---|---|---|
|1 | 1 | 
|2 | 8 | 
|3 | 27 |

The output should be,

```
1
8
27
```


Solution Code:number = int(input())

for each_num in range(1, number + 1):
 print(each_num ** 3)"
24fc8d81-9ead-469b-816b-edd5ed7b6eb5,"Given an integer `N`, write a program that reads `N` inputs and prints the product of the given inputs.

<MultiLineNote>
Use the **For** loop to iterate over the range of numbers.
</MultiLineNote>

---

#### Input

The first line of input contains an integer representing `N`.
The next `N` lines of input contain integers.

---

#### Output

The output should be a single line containing an integer that is the product of the given inputs.

---

#### Explanation

For example, if the given number is `N = 3`,

* The **3** inputs are **2**, **3**, and **7**.
* The product of the given inputs is **42**. (`2 * 3 * 7 = 42`)

|Number | Previous Product | Previous Product * Number = Current Product |
|---|---|---|
|2 | 1 | 1 * 2 = 2 |
|3 | 2 | 2 * 3 = 6|
|7 | 6 | 6 * 7 = 42|

The output should be **42**.

Solution Code:N = int(input())
total = 1

for i in range(N):
 num = int(input())
 total = total * num

print(total)"
07606d90-42af-4f95-800a-4d32677a004d,"Given an integer N, write a program which reads N inputs and prints the sum of the given input integers.<br/>Note: Use For Loop<hr><b>Input</b><br/><br/>The first line of input will contain a positive integer, N.<br/>The next N lines will contain the integers, each in a line.<hr><b>Output</b><br/><br/>The output should be the sum of the given input integers.<hr><b>Explanation</b><br/><br/>For example, if the given N is 3, then read the inputs in the next 3 lines and print the sum of the three input integers. If the given input integers in the next three lines are 8, 11, and 25, the output should be 44.

Solution Code:number_of_inputs = int(input())

total = 0
for counter in range(number_of_inputs):
 number = int(input())
 total = total + number

print(total)"
9c3ad172-3eb2-47f7-8804-56c88d940918,"Given an integer N, write a program which reads N inputs and prints them.<br/>Note: Use For Loop<hr><b>Input</b><br/><br/>The first line of input will contain a positive integer, N.<br/>The following N lines will contain an integer in each line.<hr><b>Output</b><br/><br/>The output should be N lines, containing an integer per line.<hr><b>Explanation</b><br/><br/>For example, if the given N is 3, then read the inputs in the next 3 lines and print them. If the given input integers in the next three lines are 8, 11, and 25, the output should be<br/><br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 0em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255, 0.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">8
11
25
</code></pre>

Solution Code:number_of_inputs = int(input())

for counter in range(number_of_inputs):
 number = int(input())
 print(number)"
1cb6fcad-9462-4da4-8631-3520d57dc32f,"Write a program that reads a number `N` and prints the sum of Natural Numbers from **1** to `N`.

<MultiLineNote>
Use the **For** loop to iterate over the range of numbers.
</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the sum of Natural Numbers from **1** to `N`.

---

#### Explanation

For example, if the given number is `N = 6`,

- The Natural Numbers from **1** to **6** are **1**, **2**, **3**, **4**, **5**, and **6**.
- The sum of **6** Natural Numbers is **21**. (`1 + 2 + 3 + 4 + 5 + 6 = 21`)

|Number | Previous Sum | Previous Sum + Number = Current Sum |
|---|---|---|
|1 | 0 | 0 + 1 = 1 |
|2 | 1 | 1 + 2 = 3|
|3 | 3 | 3 + 3 = 6|
|4 | 6 | 6 + 4 = 10|
|5 | 10| 10 + 5 = 15|
|6 | 15 | 15 + 6 = 21|

The output should be **21**.

Solution Code:number = int(input())

total = 0
for counter in range(1, number + 1):
 total = total + counter

print(total)"
820c3eca-3c15-4e38-b89e-a37cc051e82b,"Write a program that prints the individual characters of the given word separated with hyphens (&quot;-&quot;).<hr><b>Input</b><br/><br/>The input will be a single line containing a word.<hr><b>Output</b><br/><br/>The output should be a single line containing characters separated with hyphens (&quot;-&quot;).<hr><b>Explanation</b><br/><br/>For example, if the given word is &quot;Python&quot;, your code should print the individual characters in it separated with hyphens (&quot;-&quot;). So the output should be &quot;P-y-t-h-o-n&quot;.

Solution Code:a = input()
len_of_a = len(a)
b = a[0]
for i in range(1, len_of_a):
 b = b + ""-"" + a[i]
print(b)"
db5f902f-6db7-48b1-92c6-e151261c941b,"Given a number `N`, write a program that reads `N` inputs and prints the greatest number among the given inputs.

---

#### Input

The first line of input contains an integer representing `N`.
The next `N` lines of input contain integers.

---

#### Output

The output should be a single line containing an integer that is the greatest among the given numbers.

---

#### Explanation

For example, if the given number is `N = 5`,

* The **5** inputs are **8**, **11**, **96**, **49**, and **25**.


* The maximum of the input **8** is **8**.
* The maximum of the inputs **8** and **11** is **11**.
* The maximum of the inputs **8**, **11** and **96** is **96**.
* The maximum of the inputs **8**, **11**, **96** and **49** is **96**.
* The maximum of the inputs **8**, **11**, **96**, **49** and **25** is **96**.
* The greatest among the given numbers is **96**.

The output should be **96**.

Solution Code:number_of_inputs = int(input())

first_input = int(input())
greatest_number = first_input

for i in range(number_of_inputs - 1):
 number = int(input())
 if number > greatest_number:
 greatest_number = number

print(greatest_number)"
74d9214a-5fcc-4680-84c3-7d003a516950,"Write a program to print the reverse of the given string.<hr><b>Input</b><br/><br/>The input will be a single line containing a string.<hr><b>Output</b><br/><br/>The output should be a single line containing the reverse of the given string.<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;Hurray! We have won the match.&quot;, your code should print the reverse of the string, which is &quot;.hctam eht now evah eW !yarruH&quot;.

Solution Code:a = input()

reverse_a = """"
for char in a:
 reverse_a = char + reverse_a

print(reverse_a)"
9da16786-8cdb-4258-83e2-3954863489a5,"Write a program to check whether the given number is a perfect number or not.<br/>A number is considered as a Perfect number if sum of all factors excluding itself is equal to the number.<hr><b>Input</b><br/><br/>The input will be a single line containing a positive integer.<hr><b>Output</b><br/><br/>The output should be a single line containing either &quot;Perfect Number&quot; or &quot;Not a Perfect Number&quot;.<hr><b>Explanation</b><br/><br/>For example, if the given number is 6, the factors of 6 excluding it are 1, 2, and 3. The sum of these factors is 6, which is equal to the given number. So the output should be &quot;Perfect Number&quot;.<br/><br/>Similarly, if the given number is 21, the factors of 21 excluding it are 1, 3, and 7. The sum of these factors is 11, Which is not equal to the given number. So the output should be &quot;Not a Perfect Number&quot;.

Solution Code:number = int(input())

total = 0
for i in range(1, number):
 if (number % i) == 0:
 total = total + i

if total == number:
 print(""Perfect Number"")
else:
 print(""Not a Perfect Number"")"
da413f6d-47ac-4ba9-a797-1e3de2f179e0,"Given a number `N`, write a program to print the factors of the number `N`.

<MultiLineNote>

**Factors of N:**

If a number `N` is divisible by `X`, then `X` is a factor of `N`.

**Example:**

If `N = 15` and `X = 3`, then **3** is a factor of **15** as **15** is divisible by **3**.

If `N = 15` and `X = 7`, then **7** is **not** a factor of **15** as **15** is not divisible by **7**.

</MultiLineNote>

---

#### Input

The input will be a single line containing a positive integer.

---

#### Output

The output should contain all the factors of the given number, each on a new line. 

---

#### Explanation

For example, if the given number is `N = 6`,

- The number **6** is divisible by the numbers **1**, **2**, **3** and **6**.
- So, the factors of the number **6** are **1**, **2**, **3** and **6**.

The output should be,

```
1
2
3
6
```

Solution Code:number = int(input())

for i in range(1, number+1):
 if (number % i) == 0:
 print(i)"
4864d8a8-9163-4a18-a400-8b9fba7e2b31,"Write a program that reads a number `N` and checks if `N` is an Armstrong Number.

Print **Armstrong Number** is the given number is an Armstrong Number. Otherwise, print **Not an Armstrong Number**.

<MultiLineNote>

**Armstrong Number**

A number is said to be an **Armstrong Number** if the sum of powers of all the digits of the number is the number itself.

**Example:**

**1634** is an **Armstrong Number** as the sum of powers of all digits of `N` is equal to **1634**. (**1<sup>4</sup>+ 6<sup>4</sup>+ 3<sup>4</sup>+ 4<sup>4</sup> = 1634**)

</MultiLineNote>

---

#### Input

The input will be a single line containing an integer.

---

#### Output

The output should be a single line containing a string. **Armstrong Number** should be printed if the given number is an Armstrong Number. Otherwise, print **Not an Armstrong Number**.

---

#### Explanation

For example, if the given number is **54748**,

* The digits in **54748** are **5**, **4**, **7**, **4** and **8**.
* Number of digits in **54748** is **5**.
* Sum of digits to the power of **5** is **54748**. (**5<sup>5</sup>+4<sup>5</sup>+7<sup>5</sup>+4<sup>5</sup>+8<sup>5</sup>**)
* Sum of digits to the power of **5** (**54748**) is equal to the number (**54748**).

The output should be **Armstrong Number**.

Solution Code:number = input()

length = len(number)
total = 0
for digit in number:
 total = total + (int(digit) ** length)

if total == int(number):
 print(""Armstrong Number"")
else:
 print(""Not an Armstrong Number"")"
0eb7b9f2-4f13-43ed-82e3-7002ca816cc4,"Given a number `N`, write a program to print the sum of all the factors of the number `N`.

<MultiLineNote>

**Factors of N:**

If a number `N` is divisible by `X`, then `X` is a factor of `N`.

**Example:**

If `N = 15` and `X = 3`, then **3** is a factor of **15** as **15** is divisible by **3**.

If `N = 15` and `X = 7`, then **7** is **not** a factor of **15** as **15** is not divisible by **7**.

</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the sum of the factors of `N`.


---

#### Explanation

For example, if the given number is `N = 12`,

- The number **12** is divisible by the numbers **1**, **2**, **3**, **4**, **6**, and **12**.
- So, the factors of the number **12** are **1**, **2**, **3**, **4**, **6**, and **12**.
- The sum of all the factors of **12** is **28** (**1 + 2 + 3 + 4 + 6 + 12**).

The output should be **28**.

Solution Code:number = int(input())

total = 1 + number
for i in range(2, number):
 if (number % i) == 0:
 total = total + i

print(total)"
a68a5aa5-f669-4ee9-af6f-5087df18adbd,"Given a number `N`, write a program to print all the factors of `N` separated by a space as shown in the sample output.

<MultiLineNote>

**Factors of N:**

If a number `N` is divisible by `X`, then `X` is a factor of `N`.

**Example:**

If `N = 15` and `X = 3`, then **3** is a factor of **15** as **15** is divisible by **3**.

If `N = 15` and `X = 7`, then **7** is **not** a factor of **15** as **15** is not divisible by **7**.

</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing a string that has space-separated factors of `N`, as shown in the sample output.

---

#### Explanation

For example, if the given number is `N = 15`,

- In the numbers from **1** to **15**, **15** is divisible by the numbers **1**, **3**, **5** and **15**.
- So, the factors of the number **15** are **1**, **3**, **5** and **15**.
- The string obtained by joining all the factors of **15** with a space is **1 3 5 15**.

The output should be **1 3 5 15**.


Solution Code:n = int(input())

result = """"

for each_number in range(1, n + 1):
    is_factor = (n % each_number == 0)
    
    if is_factor:
        result = result + str(each_number) + "" ""

print(result)"
cdae9304-0598-4664-875b-199df1ec6094,"Write a program that reads a string and prints each character of the given string on a new line.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be `N` lines, with each line containing a string that is one of the characters of the given string. Here, `N` is the length of the given string.

---

#### Explanation

For example, if the given string is **shine**,

- The length of the given string is **5**.
- Each character of the string should be printed on a new line.

The output should be,

```
s
h
i
n
e
```


Solution Code:string = input()

index = 0
length = len(string)

while index < length:
 character = string[index]
 print(character)
 index = index + 1"
cac7af31-d437-4213-a880-582d78a48ea5,"You are given a positive integer `I`. Write a program to convert the integer in a decimal system to the one represented in roman numerals.

---

#### Input

The input line contains an integer `I`.

---

#### Output

The output contains a string which is the Roman numeral representation of given `I`.

---

#### Explanation

Given `I = 9`.

The roman numeral representation of `9` is `IX`. 

Solution Code:ROMAN_NUMERALS = [
 (1000, ""M""), (900, ""CM""), (500, ""D""), (400, ""CD""), (100, ""C""), (90, ""XC""), (50, ""L""), (40, ""XL""), (10, ""X""), (9, ""IX""), (5, ""V""), (4, ""IV""), (1, ""I"")
]

def get_quotient_and_remainder(number, diviser):
 quotient = number // diviser
 remainder = number % diviser
 return quotient, remainder

def get_roman_number(number):
 roman_number = """"
 for roman_numeral in ROMAN_NUMERALS:
 quotient, remainder = get_quotient_and_remainder(number, roman_numeral[0])
 roman_number += roman_numeral[1] * quotient
 number -= (roman_numeral[0] * quotient)
 if number <= 0:
 break
 return roman_number

def main():
 number = int(input())
 roman_number = get_roman_number(number)
 print(roman_number)

main()"
a7e74ec3-293b-49bf-aaab-e4a01d70ec0a,"Given a list of unique words, write a program to print all the pairs of the distinct indices (i, j) in the given list, so that the concatenation of two words at indices i and j is a palindrome.


___

#### Input

The input will be a single line containing a sentence.


___

#### Output

The output should be printing each distinct pair of indices (i, j) each in a line in ascending order.
If there are no distinct pairs found, print `-1`
Note: Consider (i, j) and (j, i) as two different pairs.


___

#### Explanation

For example, if the given sentence is

```

was it a car or a cat I saw
```
The words that can be concatenated to make a palindrome are

|Words | Indices|
|--- | ---|
|(was, saw) | (0, 8)|
|(a, a) | (2, 5)|
|(a, a) | (5, 2)|
|(saw, was) | (8, 0)|

So the output should be

```
0 8
2 5
5 2
8 0
```



Solution Code:def get_palindrome_pairs_list(sentence):
 palindrome_pairs_list = []
 for i in range(len(sentence)):
 for j in range(len(sentence)):
 if (i != j):
 pair = sentence[i] + sentence[j]
 if (pair == pair[::-1]):
 palindrome_pair_indices = str(i) + "" "" + str(j)
 palindrome_pairs_list.append(palindrome_pair_indices)
 return palindrome_pairs_list
 
def print_palindrome_pairs(palindrome_pairs_list):
 if (len(palindrome_pairs_list) > 1):
 for each_pair_indices in palindrome_pairs_list:
 print(each_pair_indices)
 else:
 print(-1)

def main():
 sentence = input().split()
 palindrome_pairs_list = get_palindrome_pairs_list(sentence)
 print_palindrome_pairs(palindrome_pairs_list)
 
main()"
90532287-f897-466e-ab12-7a717224dffc,"Peter is making a new dictionary. He wants to arrange the words in the ascending order of their length and later arrange the ones with the same length in lexicographic order. Each word is given a serial number according to its position. Find the word according to the serial number.

The serial number of words in Peter's dictionary is as follows

| Word | Serial Number|
|--- | ---|
|A | 1|
|B | 2|
|C | 3|
|... | ...|
|X | 24|
|Y | 25|
|Z | 26|
|AA | 27|
|AB | 28|
|... | ...|
|BA | 53|
|... | ...|
|ZZ | 702|
|AAA | 703|
|... | ...|

---

#### Input

The first line of input is a positive integer which is the serial number.

---

#### Output

The output should be a single line containing the word that represents the serial number.

---

#### Explanation

Given serial number is `42`.

As the serial number is between `26` and `52`, the first character of the word is `A`. The remaining counter of the serial number is `16`(42-26).

The second character of the word is the `16th` alphabet, which is `P`.

So, the output should be `AP`.


Solution Code:ALPHABET_LETTERS = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""

def get_the_word_from_serial_number(serial_number):
 final_word = """"
 while serial_number > 0:
 remainder = serial_number % 26
 if remainder == 0:
 alphabet = ALPHABET_LETTERS[25]
 serial_number = serial_number - 26
 else:
 alphabet = ALPHABET_LETTERS[remainder-1]
 serial_number = serial_number - remainder
 final_word = alphabet + final_word
 serial_number = serial_number // 26
 return final_word

def main():
 serial_number = int(input())
 word = get_the_word_from_serial_number(serial_number)
 print(word)
 
main()"
c8ef519e-7f1c-44da-a0dd-b7cc32854d32,"Your friend John has been given a sentence **S** and asked to modify it by replacing each letter with its previous letter in the alphabet as shown in the table (A becomes Z, B becomes A, etc.).

| Letter | Previous Letter |
| ------ | --------------- |
| A      | Z               |
| B      | A               |
| C      | B               |
| ...    | ...             |
| Z      | Y               |
| a      | z               |
| b      | a               |
| c      | b               |
| z      | y               |

Your task is to help John in modifying the sentence.

Write a program that reads the sentence **S**, and prints the modified sentence by replacing each letter with its previous letter in the alphabet.

<MultiLineNote>
Consider the lower and upper case letters as different.
</MultiLineNote>

---

#### Input

The input will be a single line containing a string representing the sentence `S`.

---

#### Output

The output should be a single line containing a string representing the modified sentence.

---

#### Explanation

**Test Case**: If the given sentence is `Fourty Nine`,

The previous letter of `F` is `E`, similarly replace each letter with the previous letter.

| Letter | Previous Letter |
| ------ | --------------- |
| F      | E               |
| o      | n               |
| u      | t               |
| r      | q               |
| t      | s               |
| y      | x               |
|        |                 |
| N      | M               |
| i      | h               |
| n      | m               |
| e      | d               |

The output should be **Entqsx Mhmd**.

Solution Code:def get_new_sentence(sentence):
 new_sentence = []
 for word in sentence:
 new_word = """"
 for letter in word:
 if (letter == ""a""):
 new_word += ""z""
 elif (letter == ""A""):
 new_word += ""Z""
 else:
 letter_ascii_value = ord(letter)
 previous_letter_ascii_value = letter_ascii_value - 1
 new_word += chr(previous_letter_ascii_value)
 new_sentence.append(new_word) 
 return new_sentence

def main():
 sentence = input().split()
 new_sentence = get_new_sentence(sentence)
 print(*new_sentence)
 
main()"
d9e9be0d-83dc-4adc-949e-a3dbe8253528,"There are multiple(`T`) bookstores in the area. Each shopkeeper has a list of `B` integers that represents the cost of each book. You have different pocket money(`P`) for each bookstore. Write a program to calculate the maximum number of books you can buy in each store with the corresponding pocket money.

---

#### Input

- The first line of input is a positive integer `T` that represents the number of shops.
- The following lines represent the details of the `T` shops.
- Each set of two consecutive lines represents the details of a shop.
- The first line of each set contains two space-separated integers `B` and `P`. 
- The second line of each set contains `B` space-separated integers.

---

#### Output

The output should be `T` lines.
Each line contains an integer that represents the maximum number of books that can be bought in each shop.

---

#### Explanation

Given `P = 600` and `B = [120, 140, 110, 180, 120, 110]` 
With a pocket money of `600`, we can buy the books at index `0, 1, 2, 4, 5` , whose sum is `120+140+110+120+110` is equal to `P`.

Given `P = 300` and `B = [120 110 1300 130]` 
With pocket money of `300`, we can buy the books at index `0, 1` whose sum is `120+110` and is less than `P`.

Given `P = 100` and `B = [220 1000 500 2000]` 
With pocket money of `100`, we can't buy any book.

So, the output should be

```
5
2
0
```


Solution Code:def get_no_of_books_can_buy(books_prices_list, pocket_money):
 no_of_books_can_buy = 0
 books_prices_list.sort()
 for each_book_price in books_prices_list:
 if(each_book_price <= pocket_money):
 no_of_books_can_buy += 1
 pocket_money -= each_book_price
 return no_of_books_can_buy

def main():
 no_of_book_stores= int(input()) 
 for i in range(no_of_book_stores):
 no_of_books, pocket_money = map(int, input().split())
 books_prices_list = list(map(int, input().split()))
 no_of_books_can_buy = get_no_of_books_can_buy(books_prices_list, pocket_money)
 print(no_of_books_can_buy)
 
main()"
e0d8a892-e11c-4322-9060-57cf43dee613,"Given a number having ten digits, convert it to a string following the below-mentioned rules.

Rules for conversion:

- Separate the number into a set of four-three-three digits
- Use the following prefixes for successive digits
  - Single numbers: just read them separately.
  - Two Consecutive numbers: `double`
  - Three Consecutive numbers: `triple`
  - Four Consecutive numbers: `quadruple`

---

#### Input

The first line of input is a string of ten digits.

---

#### Output

The output should print the given number in a human-readable format.
Refer to the sample input and output.

---

#### Explanation

In the example, the first test case number is `9966777819` and this number should be divided into `4-3-3` format.
By separating the number in the dividing format the number will be like

| 4    | 3   | 3   |
| ---- | --- | --- |
| 9966 | 777 | 819 |

The first divided part should be read as `double nine double six`. As there are two consecutive `9`'s, it should be read as `double nine`. Similarly, there are two consecutive `6`'s, it should be read as `double six`

In the second divided part, there are three consecutive `7`'s, it should be read as `triple seven`

In the third divided part, there are no consecutive digits, each digit should be read separately.

So, the total number should be read as `double nine double six triple seven eight one nine`

Here are some more examples,

| Number     | Dividing Format | Output                                                 |
| ---------- | --------------- | ------------------------------------------------------ |
| 9090407368 | 9090-407-368    | nine zero nine zero four zero seven three six eight    |
| 1111222233 | 1111-222-233    | quadruple one triple two two double three              |
| 9999999999 | 9999-999-999    | quadruple nine triple nine triple nine                 |
| 1234567890 | 1234-567-890    | one two three four five six seven eight nine zero      |
| 9467925555 | 9467-925-555    | nine four six seven nine two five triple five          |
| 7064582309 | 7064-582-309    | seven zero six four five eight two three zero nine     |
| 8527834259 | 8527-834-259    | eight five two seven eight three four two five nine    |
| 7436874843 | 7436-874-843    | seven four three six eight seven four eight four three |


Solution Code:number_dict = {
 ""0"": ""zero"",
 ""1"": ""one"",
 ""2"": ""two"",
 ""3"": ""three"",
 ""4"": ""four"",
 ""5"": ""five"",
 ""6"": ""six"",
 ""7"": ""seven"",
 ""8"": ""eight"",
 ""9"": ""nine"",
}

consecutive_number_dict = {2: ""double"", 3: ""triple"", 4: ""quadruple""}

def get_number_seperation_list(number):
 number_seperation_list = []
 number_seperation_list.append(number[:4])
 number_seperation_list.append(number[4:7])
 number_seperation_list.append(number[7:])
 return number_seperation_list
 
def convert_number_to_human_readable(number):
 human_readable = """"
 i = 0
 while i < len(number):
 repeated_digits_count = 1
 
 j = i + 1
 while (j < len(number) and number[i] == number[j]):
 repeated_digits_count += 1
 j += 1
 
 if repeated_digits_count == 1:
 human_readable += number_dict[number[i]] + "" ""
 else:
 human_readable += consecutive_number_dict[repeated_digits_count] + "" "" + number_dict[number[i]] + "" ""
 
 i += repeated_digits_count
 
 return human_readable

def get_human_readable_number(number_seperation_list):
 human_readable_number = """"
 for each_number in number_seperation_list:
 human_readable_number += convert_number_to_human_readable(each_number)
 return human_readable_number

def main():
 number = input()
 number_seperation_list = get_number_seperation_list(number)
 human_readable_number = get_human_readable_number(number_seperation_list)
 print(human_readable_number)

main()"
815e4a89-c212-48d5-9870-4ea165e50adc,"As a member of the creative content team for a newspaper company, your task is to publish a puzzle. The puzzle involves finding the sum of all elements in a square matrix of size `M x M`, excluding the numbers on both diagonals.

Write a program that reads an `M x M` matrix and prints the sum of all elements other than the elements on the both diagonals.

---

#### Input

The first line of input contains an integer representing `M`.

The next `M` lines of input contain `M` space-separated integers representing the `M x M` matrix.

---

#### Output

The output should be a single line containing an integer obtained by adding all the elements other than elements on both diagonals.

---

#### Explanation

**Test Case:** If the given `M = 3`, the given `3 x 3` matrix is as follows:

```
4 1 3
2 5 6
1 2 3
```

![](https://new-assets.ccbp.in/frontend/content/programming-foundations/diagnol-anti_r.png)

In the first row, the non-diagonal element is **1**.

In the second row, the non-diagonal elements are **2** and **6**.

In the third row, the non-diagonal element is **2**.

The sum of the non-diagonal elements is,

```
2 + 1 + 6 + 2 =  11
```

The output should be **11**.

Solution Code:def read_matrix(m):
 matrix = []
 for i in range(m):
 row = list(map(int, input().split()))
 matrix.append(row)
 return matrix

def get_sum_of_elements_satisfies_conditions(matrix, m):
 sum_of_elements = 0 
 for i in range(m):
 for j in range(m):
 if((i != j) and (i + j) != (m - 1)):
 sum_of_elements += matrix[i][j]
 return sum_of_elements
 
def main(): 
 m = int(input())
 matrix = read_matrix(m)
 sum_of_elements = get_sum_of_elements_satisfies_conditions(matrix, m)
 print(sum_of_elements)
 
main()"
8b50edbd-5d59-4f66-98fd-93aa17d12664,"Murli is attending a quiz. In the quiz, the question contains an integer `N`, Murli has to tell the closest number to `N` where all the digits of that number are even.
 
In case of a tie between two numbers, choose the smallest one. 
Write a program to find the number.

---

#### Input

The input is a single line containing an integer `N`.

---

#### Output

The output should be a single line containing the closest integer, that has all even digits.

---

#### Explanation

In the example, the number is `17`. The closest number that has all even digits in it is `20`. So the output should be `20`.

In example two, the number is `-33`. The closest number that has all even digits in it is `-28`. So the output should be `-28`.

Solution Code:def check_even_digit_number(number):
 number = str(number)
 if number[0] == ""-"":
 number = number[1:]
 for each_digit in number:
 if int(each_digit) % 2 != 0:
 return False
 return True
 
def get_lower_even_digit_number(number):
 while True:
 is_even_digit_number = check_even_digit_number(number)
 if(is_even_digit_number):
 return number
 number -= 1
 
def get_higher_even_digit_number(number):
 while True:
 is_even_digit_number = check_even_digit_number(number)
 if(is_even_digit_number):
 return number
 number += 1

def get_closest_even_digits_number(number):
 lower_even_digit_number = get_lower_even_digit_number(number)
 higher_even_digit_number = get_higher_even_digit_number(number)
 
 diff_with_lower_number = number - lower_even_digit_number
 diff_with_higher_number = higher_even_digit_number - number

 if(diff_with_lower_number <= diff_with_higher_number):
 return lower_even_digit_number
 else:
 return higher_even_digit_number

def main():
 number = int(input())
 closest_number = get_closest_even_digits_number(number)
 print(closest_number)
 
main()"
0d378653-15f9-4c24-b9d6-9f8190300e50,"Sameer is participating in a competition where the task is to combine **N** lines of space-separated strings vertically (column-wise).

For example,

If the given **N = 3**, and each line contains space-separated strings as follows:

```
He
enjoys basketball
playing and football
```

<br/>
<div style=""display:flex; justify-content:center; text-align: center;"">
    <img src=""https://new-assets.ccbp.in/frontend/content/programming-foundations/concatenation-game-v1.png"" alt=""concatenation-game"" style=""max-width:70%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

The output should be,

```
Heenjoysplaying
basketballand
football
```

Your task is to help Sameer by combining the **N** lines of space-separated strings vertically (column-wise).

Write a program that reads an integer **N** and the **N** lines of space-separated strings and prints the resultant strings.

---

#### Input

The first line of input contains an integer representing `N`.

The next `N` lines of the input contain space-separated strings.

---

#### Output

The output should be a line-seperated strings obtained by combining the `N` lines of space-separated strings vertically (column-wise).

---

#### Explanation

For example,

If the given `N = 2`, and each line contains of space-separated strings as follows:

```
I solve
can this
```

Combine the first word of the first line `I` with the first word of the second line `can` => **Ican**.

Combine the second word of the first line `solve` with the second word of the second line `this` => **solvethis**.

<br/>
<div style=""display:flex; justify-content:center; text-align: center;"">
    <img src=""https://new-assets.ccbp.in/frontend/content/programming-foundations/concatenation-game-image-2_c1.png"" alt=""concatenation-game"" style=""max-width:60%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

The output should be,

```
Ican
solvethis
```

---

For example,

If the given `N = 2`, and each line contains of space-separated strings as follows:

```
by by
hy hy
```

Combine the first word of the first line `by` with the first word of the second line `hy` => **byhy**.

Combine the second word of the first line `by` with the second word of the second line `hy` => **byhy**.

<br/>
<div style=""display:flex; justify-content:center; text-align: center;"">
    <img src=""https://res.cloudinary.com/dccbrxgpq/image/upload/v1675940367/concatenation-game-image-3_hr6rst.png"" alt=""concatenation-game"" style=""max-width:60%;box-shadow:0 2.8px 2.2px rgba(0, 0, 0, 0.12)"">
</div>
<br/>

The output should be,

```
byhy
byhy
```

Solution Code:def read_sentences_list(number):
 sentences_list = []
 for i in range(number):
 sentence = input().split()
 sentences_list.append(sentence)
 return sentences_list

def get_length_of_max_length_sentence(sentences_list):
 max_length = 0
 for each_sentence in sentences_list:
 if(len(each_sentence) > max_length):
 max_length = len(each_sentence)
 return max_length
 
def get_concatinated_words_list(sentences_list, max_length):
 concatinated_words_list = []
 for index in range(max_length):
 concatinated_word = """"
 for each_sentence in sentences_list:
 if(len(each_sentence) > index):
 concatinated_word += each_sentence[index]
 concatinated_words_list.append(concatinated_word)
 return concatinated_words_list
 
def print_concatinated_words(concatinated_words):
 for each_word in concatinated_words:
 print(each_word)
 
def main():
 number = int(input())
 sentences_list = read_sentences_list(number)
 max_length = get_length_of_max_length_sentence(sentences_list)
 concatinated_words_list = get_concatinated_words_list(sentences_list, max_length)
 print_concatinated_words(concatinated_words_list)
 
main()"
8f8c08c8-9061-4633-8c35-3eec63da06ea,"A Keyword Cipher is a monoalphabetic substitution cipher which uses a **key** to provide encryption on given string of message.

In a substitution cipher each letter of the plaintext alphabet is matched with a different letter according to the ciphertext alphabet. Using these letter matchings, every letter of the message is substituted to get the encrypted message.

In a keyword cipher, the **key** determines the letter matchings. The ciphertext alphabet is created by keeping the letters of the **key** in the beginning (after removing the repeated letters in the key), and then the rest of remaining letters are used in alphabetic order. 

For example, if the key is `zebras`,
```
Plaintext Alphabet :  a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z
Ciphertext Alphabet : z|e|b|r|a|s|c|d|f|g|h|i|j|k|l|m|n|o|p|q|t|u|v|w|x|y
```
Notice that with this key, we are able to match each letter of english alphabet with a different letter. Using these matchings we can encrypt the word `discovered` as `rfpbluaoar`. (`d` is replaced with `r`, `i` is replaced with `f`, and so on ...)

Given a key `K` and the message `M`, encrypt the message with Keyword Cipher, using the given key.

---

#### Input

The first line contains two space-separated strings `K`, `M`.


---

#### Output

The output is a string representing the encrypted message. 


---

#### Explanation

##### Sample Output 2 

Given K = `apple`  M = `abcde` 

```
Plaintext Alphabet :  a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z
Ciphertext Alphabet : a|p|l|e|b|c|d|f|g|h|i|j|k|m|n|o|q|r|s|t|u|v|w|x|y|z
```

According to the above matching, the letters of the given message `abcde` should be replaced in the following way.
```
a -> a
b -> p
c -> l
d -> e
e -> b
```
Som the encrypted message is `apleb`.

Solution Code:ALL_LOWERCASE_LETTERS = 'abcdefghijklmnopqrstuvwxyz'
 
def get_alphabet_mapping(ciphertext_alphabet):
 alphabet_mapping_dict = {}
 for i in range(len(ALL_LOWERCASE_LETTERS)):
 alphabet_mapping_dict[ALL_LOWERCASE_LETTERS[i]] = ciphertext_alphabet[i]
 return alphabet_mapping_dict
 
def remove_letter_repetitions(word):
 new_word = """"
 letters_set = set()
 for letter in word:
 if letter not in letters_set:
 new_word += letter
 letters_set.add(letter)
 return new_word

def remove_letters_from_word(word, letters_to_remove):
 new_word = """"
 for letter in word:
 if letter not in letters_to_remove:
 new_word += letter
 return new_word

def get_cipher_alphabet(key):
 key = remove_letter_repetitions(key)
 remaining_alphabet = remove_letters_from_word(ALL_LOWERCASE_LETTERS, key)
 return key + remaining_alphabet

def get_encryted_message(word, alphabet_mapping_dict):
 encrypted_message = ''
 for each_alphabet in word:
 encrypted_message += alphabet_mapping_dict[each_alphabet]
 return encrypted_message

def main():
 key, message = input().split()
 key, message = key.lower(), message.lower()
 cipher_alphabet = get_cipher_alphabet(key)
 alphabet_mapping_dict = get_alphabet_mapping(cipher_alphabet)
 encrypted_message = get_encryted_message(message, alphabet_mapping_dict)
 print(encrypted_message)

main()"
b65899ce-117a-47e2-ae10-db0e0c64ec4c,"You are given a N entries denoting incomes of people. Same person can have more than one income entry. Write a program to print person's name and index of the first income entry of the person with highest total income. In case of tie in total income, choose the lexicographically smallest name. 

**Note**:

- Name will contain only alphabets and spaces.
- Names are case insensitive (i.e Ravi and ravi are same). 
- Ignore spaces in the name while comparing (i.e Ravi Kishore and RaviKishore are same).

---

#### Input

The first line contains an integer `N` .

Each of next N lines contains the name and income entry of a person

---

#### Output

The output contains a space-separated pair of name and first entry index of the person with highest total income.

---

#### Explanation

##### Sample Output 1

For `N = 4`, the input is:

```
John Cena 1000
Jane 2000
Jack 4000
Tom 4000
```

Both `Jack` and `Tom` have the highest net income. As `jack` is lexicographically smaller than `tom` and found at index `2`, the output is `Jack 2`.

##### Sample Output 2
For `N = 4`, the input is:

```
John Cena 1000
Patel 1500
Mar K 1000
Mark 500
```

`mark`(1000 + 500) and `patel`(1500) both earn the same. So, we have a tie here. In case of tie choose the name that is smallest lexicographically which is mark(`m` comes before `p` in dictionary). The first index of the mark in the given input is `Mar K` which is at index `2`.

So the output is `Mar K 2`.

Solution Code:def read_inputs(no_of_persons):
 names_list, incomes_list = [], []
 for i in range(no_of_persons):
 each_entry = input().split()
 name = "" "".join(each_entry[:len(each_entry) - 1])
 income = int(each_entry[-1])
 names_list.append(name)
 incomes_list.append(income)
 return names_list, incomes_list 
 
def get_formatted_name(name):
 name = """".join(name.split())
 name = name.lower()
 return name
 
def get_persons_dict(names_list, incomes_list):
 persons_dict = dict()
 for i in range(len(names_list)):
 # Getting the name by converting it to lower case and removing spaces
 name = get_formatted_name(names_list[i]) 
 if name not in persons_dict.keys():
 persons_dict[name] = incomes_list[i]
 else:
 persons_dict[name] += persons_dict[name] 
 return persons_dict

def get_richest_person_name(persons_dict):
 max_income = max(persons_dict.values())
 richest_person_names_list = []
 for each_person in persons_dict.keys():
 if (persons_dict[each_person] == max_income): 
 richest_person_names_list.append(each_person)
 richest_person_names_list.sort()
 return richest_person_names_list[0]

def print_richest_person_first_entry(names_list, richest_person_name):
 for i in range(len(names_list)):
 # Getting the name by converting it to lower case and removing spaces
 name = get_formatted_name(names_list[i]) 
 if (name == richest_person_name):
 print(names_list[i] + "" "" + str(i))
 break
 
def main():
 no_of_persons = int(input())
 names_list, incomes_list = read_inputs(no_of_persons)
 persons_dict = get_persons_dict(names_list, incomes_list)
 richest_person_name = get_richest_person_name(persons_dict)
 print_richest_person_first_entry(names_list, richest_person_name)
 
main()"
64f372bf-d5fd-4aeb-bfa7-ff590ea8324d,"Joseph has been given a sentence **S** and a number **N**. He needs to rotate the letters of the sentence **S** by the given number **N** towards the left without changing the length of the words and the positions of the spaces.

**Example:** if S = `I am Ajay`,

if **N = 1**, the modified sentence should be `a mA jayI`
if **N = 2**, the modified sentence should be `m Aj ayIa` and so on.

Help Joseph rotates the sentence.

Write a program that reads the sentence **S** and the number **N** and prints the resultant sentence.

---

####Input

The first line of input contains a string representing the sentence `S`. 

The second line of input contains an integer representing the number `N`.

---

####Output

The output should be a single line containing the string representing the resultant sentence.

---

#### Explanation:
**Test Case:** Given `S = Welcome to your first problem` and `N = 5`,

Rotate the sentence by 5 letters towards the left without changing the length of the words and position of spaces in the original sentence.

The output should be **metoyou rf irst probl emWelco**.

Solution Code:def get_each_word_length(words_list):
 length_of_each_word_list = []
 for each_word in words_list:
 length_of_each_word_list.append(len(each_word))
 return length_of_each_word_list

def get_rotated_sentence(words_list, positions):
 length_of_each_word_list = get_each_word_length(words_list)
 sentence = """".join(words_list)
 
 positions = positions % len(sentence)
 rotated_sentence = sentence[positions:] + sentence[:positions]

 new_words_list= []
 start_index = 0
 for each_word_length in length_of_each_word_list:
 word = rotated_sentence[start_index : start_index+each_word_length]
 new_words_list.append(word)
 start_index += each_word_length

 new_sentence = "" "".join(new_words_list)
 return new_sentence

def main():
 words_list = input().split()
 positions = int(input())
 rotated_sentence = get_rotated_sentence(words_list, positions)
 print(rotated_sentence)
 
main()"
c6d5404d-6909-4c28-a799-ad6b583332b8,"Eren and his friends are all passionate about computer programming. One of Eren's friends challenged him. In that challenge, Eren has been given a sentence there he should change the sentence in such a way that the smaller numbers should appear before the bigger numbers.

Help Eren to change the sentence in such a way that the smaller numbers should appear before the bigger numbers.

Write a program that reads the sentence and print the sentence in such way that smaller numbers should appear before the bigger numbers.

<MultiLineNote>
- Only positive number in will be there in between sentence
</MultiLineNote>

---

#### input

The input will be a single line containing a string representing the sentence.


---

#### Output

The output should be a single line containing a modified string.

---

#### Explanation

**Test Case**: if the given string is `I am 5 years 11 months, and 8 days old`, 

The numbers are 5, 11, and 8 in the string. 

As per question you should print the sentence in such a way that the smaller numbers should appear before the bigger numbers.

So, the output should be I am 5 years 8 months, and 11 days

Solution Code:def adding_numbers_and_words(word_chunks_list, sorted_numbers_list):
 reordered_sentence = ''
 for each_word in word_chunks_list:
 reordered_sentence += each_word
 if len(sorted_numbers_list) != 0:
 # Removing the last number from the list and converting it to a string
 reordered_sentence += str(sorted_numbers_list.pop()) 
 return reordered_sentence
 
def get_number_end_index(sentence, start_index):
 end_index = len(sentence)
 for j in range(start_index, len(sentence)):
 if not sentence[j].isdigit():
 end_index = j
 break
 return end_index
 
def get_word_chunks_and_numbers_list(sentence):
 word_chunks_list, numbers_list = [], []
 i = 0
 while i < len(sentence):
 number = """"
 if sentence[i].isdigit():
 start_index = i
 end_index = get_number_end_index(sentence, start_index) 
 number = int(sentence[start_index:end_index])
 word_chunk = sentence[:start_index]
 numbers_list.append(number)
 word_chunks_list.append(word_chunk)
 sentence = sentence[end_index:]
 i = 0
 else:
 i += 1
 word_chunks_list.append(sentence)
 return word_chunks_list, numbers_list
 
def get_reordered_string(sentence):
 word_chunks_list, numbers_list = get_word_chunks_and_numbers_list(sentence)
 sorted_numbers_list = sorted(numbers_list, reverse=True)
 reordered_sentence = adding_numbers_and_words(word_chunks_list, sorted_numbers_list)
 return reordered_sentence

def main():
 sentence = input()
 reordered_sentence = get_reordered_string(sentence)
 print(reordered_sentence)
 
main()"
0b580e44-23a6-4937-99d2-f0496ce7bdbf,"Shyam and Vimal are classmates. Vimal challenged Shyam. 

The challenge is that Shyam is given numbers, Shyam should find the largest negative number that is missing from the given numbers. Help Shyam to win this challenge.

Write a program that reads space-separated numbers and print the largest negative number missing from given numbers.

---

#### Input

The input will be a single line containing space-separated integers representing the numbers.

---

#### Output

The output should be a single line containing an integer that is the largest negative number missing from the given numbers.

---

#### Explanation

**Test Case:** If the given numbers `-3 -1 -2 -5 -3 -7 -7`,

The largest negative number missing from the given numbers is `-4`.


The output should be **-4**.

Solution Code:def get_missing_number(numbers):
 missing_number = -1
 for each_number in range(1, len(numbers)):
 if missing_number not in numbers:
 break
 missing_number = missing_number - 1
 return missing_number
 
def main(): 
 numbers = list(map(int, input().split()))
 missing_number = get_missing_number(numbers)
 print(missing_number)
 
main()"
cd8c9479-5a8f-49d9-ae9d-49e33d240bd4,"Ram was given an assignment by his teacher to find the special factors of a positive number **N**. 

A factor is a number which exactly divides the given number (including the number). A factor is special if it is a prime number.

Help Ram by identifying all the special factors of the number **N**.

Write a program that reads the number **N** and prints the special factors of the number **N**.

---

#### input

The input will be a single line containing an integer representing a positive number `N`.


---

#### Output

The output should be a single line containing the space-separated special factors of the number `N` in ascending order.

---

#### Explanation

**Test Case**: If `N = 20`,

The factors of `20` are `1, 2, 4, 5, 10, 20`. Whereas the special factors are `2, 5`.

The output should be **2 5**.

Solution Code:def check_is_prime(number):
 is_prime = True
 for i in range(2, number):
 if number % i == 0:
 is_prime = False
 break
 return is_prime

def get_the_special_factors_list(number):
 special_factors_list = []
 for i in range(2, number + 1):
 if number % i == 0:
 is_prime = check_is_prime(i)
 if is_prime:
 special_factors_list.append(str(i))
 return special_factors_list

def main():
 number = int(input())
 special_factors_list = get_the_special_factors_list(number)
 print(*special_factors_list)
 
main()"
1e806177-7355-4a86-94b5-f8493a2c8a51,"Robert has been given an assignment. In that assignment **N** words has been given, he should find whether all these words belongs to the same **Family** or not by considering the below rules.

Except the first word, if we can obtain each word by:

- changing exactly one letter from the previous word.

- Or, by adding exactly one letter to the previous word.

- Or, by removing exactly one letter from the previous word.

Help Robert to find whether all the given words belongs to the same **Family** or not.

Write a program that reads the **N** space-separated words and prints whether all the given words belongs to the same **Family** or not.

---

#### input

The first line of input contains an integer `T` representing the number of test cases.

The next `T` lines of input contains

* The first line of input contains an integer `N` representing the number of words.

* The second line of input contains `N` space-separated strings representing the words.


---

#### Output

The output should be `T` lines, each line containing a string. 

**Family** should be printed if every word is equal to its previous word, otherwise **Not a Family** should be printed.

---

#### Explanation

Given the number of test cases `T = 3`

**Test Case 1:** If the given the `N = 3` and  `S = hip hop top`,

To obtain 2nd word `hop` from the 1st word `hip`, the letter `i` should be changed to `o`.

To obtain 3rd word `top` from the 2nd word `hop`, the letter `h` should be changed to `t`.

As all the words are obtained from its previous words, the output should be `Family`.

--- 

**Test Case 2:** If the given `N = 3` and `S = hip top hop`,

To obtain 2nd word `top` from the 1st word `hip`, the letter `i` should be changed to `o` and letter `h` should be changed to `t`.

As two changes are needed to obtain the word `top`, the output should be `Not a Family`.

---

**Test Case 3:** If the given `N = 4` and  `S = teat treat greet meet`,

To obtain 2nd word `treat` for the 1st word `teat`, the letter `r` is added by making the word `treat`.

To obtain 3rd word `greet` from the 2nd word `treat`, the letter `t` should be changed to `g` and letter `a` should be changed to `e`.

As two changes are needed to obtain the word `greet`, the output should be `Not a Family`.

Solution Code:def check_equal_lengths_are_of_same_family(first_word, second_word):
 letter_difference = 0
 for i in range(len(first_word)):
 if(first_word[i] != second_word[i]):
 letter_difference += 1
 return letter_difference == 1

def check_letter_removal_makes_family(max_length_word, min_length_word):
 is_same_family = False
 for i in range(len(max_length_word)):
 if(max_length_word[:i] + max_length_word[i+1:] == min_length_word):
 is_same_family = True
 break
 return is_same_family
 
def check_if_list_is_family(words_list):
 is_same_family = True
 for i in range(len(words_list) - 1):
 first_word, second_word = words_list[i], words_list[i+1]
 first_word_length, second_word_length = len(first_word), len(second_word)
 if(first_word_length == second_word_length):
 is_same_family = check_equal_lengths_are_of_same_family(first_word, second_word)
 elif(first_word_length > second_word_length):
 is_same_family = check_letter_removal_makes_family(first_word, second_word)
 else:
 is_same_family = check_letter_removal_makes_family(second_word, first_word)
 if not is_same_family:
 break
 
 if(is_same_family):
 return ""Family""
 else:
 return ""Not a Family""
 

def main():
 test_cases = int(input()) 
 for i in range(test_cases):
 no_of_words = int(input())
 words_list = input().split()
 is_family = check_if_list_is_family(words_list)
 print(is_family)
 
main()"
df481e15-d786-4e12-90f0-5c82ace2810d,"You are given a rectangular binary matrix (contains only zeros and ones) of `R` rows and `C` columns. Print the number of different regions in the given matrix. A separate region is a collection of ones interconnected horizontally or vertically. A region can have holes in it.

![](https://assets.ccbp.in/tech-foundations/programming-foundations/coding/python_293.png)

In the above image, different regions in the matrix are represented by different colors.

---

#### Input

The first line of input contains two space-separated integers, `R` and `C`.
The next `R` lines contain `C` space-separated integers.

---

#### Output

The first line of output is an integer.


---

#### Explanation

Given R =`6` C = `10`

and the matrix
```
1 1 1 1 0 1 1 0 1 1
1 0 0 0 0 0 0 1 1 1
1 0 1 1 0 0 0 1 0 1
1 0 1 1 0 1 0 1 1 1
0 0 0 0 0 1 1 0 0 1
0 0 0 0 1 1 1 0 1 0
```

Different regions of this matrix are highlighted with different colors in the above image.

As a region is a collection of ones interconnected horizontally or vertically, but not diagonally, the regions green, yellow, purple, red are not considered as single region as highlighted in the above image.

Also, notice that the yellow region has a hole in it.

As it can be observed from the image, there are a total of 6 regions (blue, green, yellow, purple, red, pink).
So the output is `6`.

Solution Code:def read_matrix(rows, columns):
 matrix = []
 for i in range(rows):
 row = list(map(int, input().split()))
 matrix.append(row)
 return matrix

def get_ones_list(matrix):
 ones_list = []
 for i in range(len(matrix)):
 for j in range(len(matrix[i])):
 if matrix[i][j] == 1:
 ones_list.append((i, j))
 return ones_list
 
def get_neighbours(pos):
 i, j = pos
 neighbours = []
 neighbours.append((i, j-1))
 neighbours.append((i, j+1))
 neighbours.append((i-1, j))
 neighbours.append((i+1, j))
 return neighbours
 
def get_connected_ones(region, ones_list):
 connected_ones = []
 for position in region:
 neighbours = get_neighbours(position)
 for each_neighbour in neighbours:
 if (each_neighbour in ones_list) and (each_neighbour not in region):
 connected_ones.append(each_neighbour)
 ones_list.remove(each_neighbour)
 return connected_ones

def get_no_of_regions(matrix):
 ones_list = get_ones_list(matrix) # Getting all the ones in the matrix
 no_of_regions = 0
 while len(ones_list) != 0:
 start = ones_list.pop()
 region = [start]
 while True:
 # Getting the connected ones that are connected to the current ones present in the region
 connected_ones = get_connected_ones(region, ones_list) 
 if(len(connected_ones) == 0):
 break
 region.extend(connected_ones)
 no_of_regions += 1
 return no_of_regions
 
def main():
 rows, columns = map(int, input().split())
 matrix = read_matrix(rows, columns)
 no_of_regions = get_no_of_regions(matrix)
 print(no_of_regions)

main()"
b3f33f8a-d13a-492f-b7fc-cdac18cd2e69,"Write a program that reads an amount `A` and prints the minimum number of **5** and **1** rupee notes required for the given amount.

---

#### Input

The input will be a single line containing an integer representing the amount `A`.

---

#### Output

The first line of output should be a string containing the required number of **5** rupee notes as shown in the sample output.

The second line of output should be a string containing the required number of **1** rupee notes as shown in the sample output.

---

#### Explanation

For example, if the given amount `A = 16`,

* The number of **5** rupee notes required for **16** is **3**. (`16 / 5 = 3.2`)
  * The remaining amount is **1**. (`16 - (5 * 3) = 1`)
* The number of **1** rupee notes required for **1** is **1**. (`1 / 1 = 1`)

Number of **5** rupee notes => 5 x 3 = 15
Number of **1** rupee notes  => 1 x 1  =   1
----------------------------------------
Total                                   =>               16
----------------------------------------

The output should be,

```
5:3
1:1
```

Solution Code:amount = int(input())

no_of_5s = amount / 5
no_of_5s = int(no_of_5s)
no_of_1s = amount % 5

print(""5:"" + str(no_of_5s))
print(""1:"" + str(no_of_1s))"
ab82b38d-413c-4c07-aa4c-e5f984cb5a83,"The numbers from **1** to **30** are divided into six groups, **Group 1**, **Group 2**, **Group 3**, **Group 4**, **Group 5** and **Group 6**.

| Group 1 | Group 2 | Group 3 | Group 4 | Group 5 | Group 6 |
| :-----: | :-----: | :-----: | :-----: | :-----: | :-----: |
|    1    |    2    |    3    |    4    |    5    |    6    |
|    7    |    8    |    9    |   10    |   11    |   12    |
|   13    |   14    |   15    |   16    |   17    |   18    |
|   19    |   20    |   21    |   22    |   23    |   24    |
|   25    |   26    |   27    |   28    |   29    |   30    |

Write a program that reads a number `N` and prints the group in which the given number `N` is present. The number `N` is always from **1** to **30**.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing a string representing the group of the number `N`.

---

#### Constraints

The number `N` given as input is always greater than **0** and less than or equal to **30**.

---

#### Explanation

For example, if the given number is `N = 29`,


<details style=""margin:0;"">
      <summary style=""margin:0;padding:0;"">Detailed Explanation to find the group</summary>
        <p>The total number of groups are **6**.</p>
        <ul>
          <li style=""margin:0;padding:0;"">The number that leaves **1** as the remainder when divided by **6** is in **Group 1**.</li>
          <li style=""margin:0;padding:0;"">The number that leaves **2** as the remainder when divided by **6** is in **Group 2**.</li>
          <li style=""margin:0;padding:0;"">The number that leaves **3** as the remainder when divided by **6** is in **Group 3**.</li>
          <li style=""margin:0;padding:0;"">The number that leaves **4** as the remainder when divided by **6** is in **Group 4**.</li>
          <li style=""margin:0;padding:0;"">The number that leaves **5** as the remainder when divided by **6** is in **Group 5**.</li>
          <li style=""margin:0;padding:0;"">The number that leaves **0** as the remainder when divided by **6** is in **Group 6**.</li>
        </ul>
</details>

* When **29** is divided by **6** the remainder is **5**. So, **29** will be in **Group 5**.


The output should be **Group 5**.

Solution Code:number = int(input())

remainder = number % 6

if remainder == 1:
 print(""Group 1"")
elif remainder == 2:
 print(""Group 2"")
elif remainder == 3:
 print(""Group 3"")
elif remainder == 4:
 print(""Group 4"")
elif remainder == 5:
 print(""Group 5"")
else:
 print(""Group 6"")"
995e7762-7626-4046-96f4-070f19a222d0,"The numbers from **1** to **10** are divided into two groups, **Group A** and **Group B**.

| Group A | Group B |
| :-----: | :-----: |
|    1    |    2    |
|    3    |    4    |
|    5    |    6    |
|    7    |    8    |
|    9    |   10    |

Write a program that reads a number `N` and prints the group in which the given number `N` is present. The number `N` is always from **1** to **10**.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing a string representing the group of the number `N`.

---

#### Constraints

The number `N` given as input is always greater than **0** and less than or equal to **10**.

---

#### Explanation

For example, if the given number is `N = 6`,

* The total number of groups is **2**.
* The number that leaves **1** as the remainder when divided by **2** is in **Group A**.
* The number that leaves **0** as the remainder when divided by **2** is in **Group B**.
* When **6** is divided by **2** the remainder is **0**. So, **6** should be in **Group B**.

The output should be **Group B** as the remainder is **0** when **6** is divided by **2**.

Solution Code:number = int(input())

remainder = number % 2

if remainder == 1:
 print(""Group A"")
else:
 print(""Group B"")"
a8ff0847-e2fe-400b-943c-d15cbd0f9125,"Write a program to print a greeting message based on the given time.<hr><b>Input</b><br/><br/>The first line of input will be an integer.<hr><b>Output</b><br/><br/>If the time is greater than or equal to 4 and less than 12, print &quot;Good Morning&quot;.<br/>If the time is greater than or equal to 12 and less than 16, print &quot;Good Afternoon&quot;.<br/>If the time is greater than or equal to 16 and less than 20, print &quot;Good Evening&quot;.<br/>If the time is greater than or equal to 20 or less than 4, print &quot;Good Night&quot;.<hr><b>Explanation</b><br/><br/>For example, if the given time is 9, your code should print &quot;Good Morning&quot;.<br/>For example, if the given time is 14, your code should print &quot;Good Afternoon&quot;.

Solution Code:time = int(input())

is_morning = ((time >= 4) and (time < 12))
is_afternoon = ((time >= 12) and (time < 16))
is_evening = ((time >= 16) and (time < 20))

if is_morning:
 print(""Good Morning"")
elif is_afternoon:
 print(""Good Afternoon"")
elif is_evening:
 print(""Good Evening"")
else:
 print(""Good Night"")"
73d3cc83-e84d-4703-a7b0-e37138c73eb4,"Write a program that reads the weight `W` of a box in kg and checks,

* If `W` is greater than or equal to **100**.
* If `W` is **not** greater than or equal to **100**, check if `W` is greater than or equal to **30**.

Print **Box is Heavier** if `W` is greater than or equal to **100**.

Print **Box is Heavy** if `W` is **not** greater than or equal to **100** but greater than or equal to **30**.


---

#### Input

The input will be a single line containing an integer representing `W`.

---

#### Output

The output should be a single line containing a string. **Box is Heavier** should be printed if `W` is greater than or equal to **100**. **Box is Heavy** should be printed if `W` is **not** greater than or equal to **100** but greater than or equal to **30**.

---

#### Explanation

For example, if the given weight of the box is `W = 60`,

✖ `W` is greater than or equal to **100**. (**60** is **not** greater than or equal to **100**)
✔ `W` is greater than or equal to **30**. (**60** is greater than or equal to **30**)

The output should be **Box is Heavy** as **60** is **not** greater than or equal to **100** but greater than or equal to **30**.

Solution Code:weight = int(input())

is_heavy = weight >= 30
is_heavier = weight >= 100

if is_heavier:
 print(""Box is Heavier"")
else:
 if is_heavy:
 print(""Box is Heavy"")"
ac493116-857a-486c-ad36-0c52b8162f62,"Write a program that reads two strings `H` and `I` and checks,

* If `H` is equal to ""**Y**"".
* If `H` is **not** equal to ""**Y**"", check if `I` is equal to ""**Y**"".

Print **Allowed to Exam - Has Hall ticket** if `H` is equal to ""**Y**"".

Print **Allowed to Exam - Has Identification Card** if `H` is **not** equal to ""**Y**"" and `I` is equal to ""**Y**"".

---

#### Input

The first line of input contains a string representing `H`.
The second line of input contains a string representing `I`.

---

#### Output

The output should be a single line containing a string. **Allowed to Exam - Has Hall ticket** should be printed if `H` is equal to ""**Y**"". **Allowed to Exam - Has Identification Card** should be printed if `H` is **not** equal to ""**Y**"" and `I` is equal to ""**Y**"".

---

#### Explanation

For example, if the given strings are `H = Y` and `I = N`,

✔ `H` is equal to ""**Y**"". (""**Y**"" is equal to ""**Y**"")
✖ `H` is **not** equal to ""**Y**"" and `I` is equal to ""**Y**"".

The output should be **Allowed to Exam - Has Hall ticket** as `H` is equal to ""**Y**"".

Solution Code:hall_ticket = input()
identification = input()

has_hall_ticket = (hall_ticket == ""Y"")
has_identification = (identification == ""Y"")

if has_hall_ticket:
 print(""Allowed to Exam - Has Hall ticket"")
else:
 if has_identification:
 print(""Allowed to Exam - Has Identification Card"")"
bdb88f59-3528-4cca-a42a-72f41a69a89e,"Write a program that reads the rank `R` of a student and checks,

* If `R` is less than or equal to **3**.
* If `R` is **not** less than or equal to **3**, check if `R` is less than or equal to **10**.

Print **One of Top 3** if the `R` is less than or equal to **3**.

Print **Not Top 3 but One of Top 10** if `R` is less than or equal to **10** but **not** less than or equal to **3**.

---

#### Input

The input will be a single line containing an integer representing `R`.

---

#### Output

The output should be a single line containing a string. **One of Top 3** should be printed if `R` is less than or equal to **3**. **Not Top 3 but One of Top 10** should be printed if `R` is less than or equal to **10** but **not** less than or equal to **3**.

---

#### Explanation

For example, if the given rank is `R = 7`, 

✖ `R` is less than or equal to **3**. (**7** is **not** less than or equal to **3**)
✔ `R` is less than or equal to **10**. (**7** is less than or equal to **10**)

The output should be **Not Top 3 but One of Top 10** as **7** is less than or equal to **10** but **not** less than or equal to **3**.


Solution Code:rank = int(input())

is_less_than_or_equal_10 = rank <= 10
is_less_than_or_equal_3 = rank <= 3

if is_less_than_or_equal_10:
 if is_less_than_or_equal_3:
 print(""One of Top 3"")
 else:
 print(""Not Top 3 but One of Top 10"")"
341a2df9-e5bd-44ef-befe-bba325ee1e51,"Write a program that reads the two scores `A` and `B` and compares `A` with the `B`.

Print **Win** if `A` is greater than `B`.
Print **Draw** if `A` is equal to `B`.
Print **Lose** if `A` is less than `B`.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a string. **Win** should be printed if `A` is greater than `B`. **Draw** should be printed if `A` is equal to `B`. **Lose** should be printed if `A` is less than `B`. 

---

#### Explanation

For example, if the given scores are `A = 26` and `B = 47`,

✖ `A` is greater than `B`. (**26** is **not** greater than **47**)
✖ `A` is equal to `B`. (**26** is **not** equal to **47**)
✔ `A` is less than `B`. (**26** is less than **47**)

The output should be **Lose**.


Solution Code:my_points = int(input())
opponent_points = int(input())

is_win = (my_points > opponent_points)
is_draw = (my_points == opponent_points)

if is_win:
 print(""Win"")
elif is_draw:
 print(""Draw"")
else:
 print(""Lose"")"
6a55643f-c3e5-4cae-a227-f65407ff17e7,"Write a program that reads a number `X` and checks,

* If `X` is greater than **30**.
* If `X` is greater than **30**, check if `X` is also greater than **50**.

Print **X is greater than 30** if `X` is greater than **30**.

Print **X is greater than 30** and **X is greater than 50** on each line if `X` is greater than **50**.

---

#### Input

The input will be a single line containing an integer representing `X`.

---

#### Output

If `X` is greater than **30**,

The output should be a single line containing the string **X is Greater than 30**.

If `X` is greater than **30** and if `X` is also greater than **50**,

The first line of output should be a string containing **X is Greater than 30**.
The second line of output should be a string containing **X is Greater than 50**.

---

#### Explanation

For example, if the given number is `X = 45`,

✔ `X` is greater than **30**. (**45** is greater than **30**)
✖ `X` is greater than **50**. (**45** is **not** greater than **50**)

The output should be **X is Greater than 30**.

<br/>

For example, if the given number is `X = 99`,

✔ `X` is greater than **30**. (**99** is greater than **30**)
✔ `X` is greater than **50**. (**99** is greater than **50**)

The output should be,

```
X is Greater than 30
X is Greater than 50
```

Solution Code:number = int(input())

is_number_greater_than_30 = number > 30
is_number_greater_than_50 = number > 50

if is_number_greater_than_30:
 print(""X is Greater than 30"")

 if is_number_greater_than_50:
 print(""X is Greater than 50"")"
24f1d404-6521-45e7-b778-b27f21c9f8a9,"Write a program that reads a number `N` and checks if `N` is divisible by **5** and **10**.

Print **Divisible by 10** if `N` is divisible by **10**.
Print **Divisible by 5** if `N` is divisible by **5** but **not** divisible by **10**.
Print **Not Divisible by 10 or 5** if `N` is **not** divisible by **10** and `N` is **not** divisible by **5**.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing a string. **Divisible by 10** should be printed if `N` is divisible by **10**. **Divisible by 5** should be printed if `N` is divisible by **5** but **not** divisible by **10**. **Not Divisible by 10 or 5** should be printed if `N` is **not** divisible by **10** and **5**.

---

#### Explanation

For example, if the given number is `N = 15`,

✖ `N` is divisible by **10**. (**15** is **not** divisible by **10**)
✔ `N` is divisible by **5** but **not** divisible by **10**. (**15** is divisible by **5**. **15** is **not** divisible by **10**)

The output should be **Divisible by 5** as `N` is divisible by **5** but **not** divisible by **10**.

<br/>

For example, if the given number is `N = 11`,

✖ `N` is divisible by **10**. (**11** is **not** divisible by **10**)
✖ `N` is divisible by **5** but **not** divisible by **10**. (**11** is **not** divisible by **5** and **10**)

The output should be **Not Divisible by 10 or 5** as `N` is **not** divisible by **10** and **5**.


Solution Code:number = int(input())

is_divisible_by_10 = (number % 10 == 0)
is_divisible_by_5 = (number % 5 == 0)

if is_divisible_by_10:
 print(""Divisible by 10"")
elif is_divisible_by_5:
 print(""Divisible by 5"")
else:
 print(""Not Divisible by 10 or 5"")"
c94e8771-81bb-4e49-874d-b03c880577bb,"Write a program that reads the marks `M` of a student and checks,

* If `M` is greater than or equal to **90**.
* If `M` is greater than or equal to **50** but **not** greater than or equal to **90**

Print **Discount is 200** if `M` is greater than or equal to **90**.
Print **Discount is 100** if `M` is greater than or equal to **50** but **not** greater than or equal to **90**.
Print **No Discount** if `M` is **not** greater than or equal to **50**.

---

#### Input

The input will be a single line containing an integer representing `M`.

---

#### Output

The output should be a single line containing a string. **Discount is 200** should be printed if `M` is greater than or equal to **90**. **Discount is 100** should be printed if `M` is greater than or equal to **50** but **not** greater than or equal to **90**.**No discount** should be printed if `M` is **not** greater than or equal to **50**.

---

#### Explanation

For example, if the given marks `M = 93`,

✔ `M` is greater than or equal to **90**. (**93** is greater than or equal to **90**)

The output should be **Discount is 200**.

<br/>

For example, if the given marks `M = 35`,

✖ `M` is greater than or equal to **90**. (**35** is **not** greater than or equal to **90**)
✖ `M` is greater than or equal to **50** but **not** greater than or equal to **90**. (**35** is **not** greater than or equal to **50**)

The output should be **No Discount** as `M` is **not** greater than or equal to **50**.

<br/>

For example, if the given marks `M = 75`,

✖ `M` is greater than or equal to **90**. (**75** is **not** greater than or equal to **90**)
✔ `M` is greater than or equal to **50** but **not** greater than or equal to **90**. (**75** is greater than or equal to **50**)

The output should be **Discount is 100**.


Solution Code:marks = int(input())

is_greater_than_or_equal_90 = marks >= 90
is_greater_than_or_equal_50 = marks >= 50

if is_greater_than_or_equal_90:
    print(""Discount is 200"")
elif is_greater_than_or_equal_50:
    print(""Discount is 100"")
else:
    print(""No Discount"")"
8d56ca68-f7ef-497b-8ccf-af76f84c4d87,"Write a program that reads a three-digit number `N` and checks if `N` is an **Armstrong Number**.

<MultiLineNote>

**Armstrong Number**

A number is said to be an **Armstrong Number** if the sum of powers of all the digits of the number is the number itself.

**Example:**

**371** is an **Armstrong Number** as the sum of the powers of all digits of `N` is equal to **371**. (**3<sup>3</sup>+7<sup>3</sup>+1<sup>3</sup> = 371**)

</MultiLineNote>

---

#### Input

The input will be a single line containing a three-digit integer representing `N`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if `N` is an **Armstrong Number**. Otherwise, **False** should be printed.

---

#### Explanation

For example, if the given number is `N = 371`,

- The digits in **371** are **3**, **7** and **1**.
- Number of digits in **371** is **3**.
- Sum of digits to the power of **3** is **371**. (**3<sup>3</sup>+7<sup>3</sup>+1<sup>3</sup> = 371**)
- **371** (Sum of the powers of all digits of `N`) is equal to **371** (`N`). So, `N` is an **Armstrong Number**.

The output should be **True**.

Solution Code:number = int(input())

number_string = str(number)

first_digit = int(number_string[0])
second_digit = int(number_string[1])
third_digit = int(number_string[2])

sum_of_cubes = first_digit**3 + second_digit**3 + third_digit**3
is_armstrong_number = sum_of_cubes == number

print(is_armstrong_number)"
ac230722-8652-4309-a36e-8bb32e841262,"Write a program that reads two numbers `A` and `B`, and checks if **A<sup>2</sup> + B <sup>2</sup>** (sum of the square of `A` and the square of `B`) is greater than or equal to **60**.

Print **Greater than or Equal to 60** if the sum of the square of `A` and the square of `B` is greater than or equal to **60**. Otherwise, print **Less than 60**.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a string. **Greater than or Equal to 60** should be printed if **A<sup>2</sup> + B <sup>2</sup>** is greater than or equal to **60**. Otherwise, **Less than 60** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 10` and `B = 2`,

- The square of `A` is **100** (**10<sup>2</sup>**).
- The square of `B` is **4** (**2<sup>2</sup>**).
- The sum of the square of `A` and the square of `B` is **104** (`100 + 4 = 104`).
- **104** (sum of the square of `A` and the square of `B`) is greater than or equal to **60**.

The output should be **Greater than or Equal to 60**.


Solution Code:first_number = int(input())
second_number = int(input())

first_number_square = first_number ** 2
second_number_square = second_number ** 2

sum_of_squares = first_number_square + second_number_square

if sum_of_squares >= 60:
 print(""Greater than or Equal to 60"")
else:
 print(""Less than 60"")"
611f2ef1-6e5b-43fe-b05c-b02836f54e3b,"Write a program that reads a number `N` and prints the **Square Root** of `N`.

<MultiLineNote>

To calculate the **Square Root** of `N`, use the `N` power **0.5** (**N<sup>0.5</sup>**).

</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing a float that is the **Square Root** of `N`.

---

#### Explanation

For example, if the given number is `N = 4`,

- The **Square Root** of `N` is **2.0** (**4<sup>0.5</sup> = 2.0**).

The output should be **2.0**.


Solution Code:number = int(input())

result = number ** 0.5
print(result)"
f7115030-1c63-447d-ae83-fa0f880ef5e8,"Write a program that reads a number `N` and checks if the triple of `N` is divisible by **6**.

Print the triple of `N` if the triple of `N` is divisible by **6**. Otherwise, print `N`.

<MultiLineNote>

The Triple of `N` is calculated as `3 * N`.

**Example:** Triple of **6** is **18**. (`3 * 6 = 18`)
  		  
</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing an integer. Triple of `N` should be printed if the triple of `N` is divisible by **6**. Otherwise, `N` should be printed.

---

#### Explanation

For example, if the given number is `N = 6`,

- The triple of `N` is **18**. (`3 * 6 = 18`)
- **18** is divisible by **6**.

The output should be **18** (`3 * 6 = 18`).

<br/>

For example, if the given number is `N = 9`,

- The triple of `N` is **27**. (`3 * 9 = 27`)
- **27** is **not** divisible by **6**.

The output should be **9** (`N`). 



Solution Code:number = int(input())

triple = number * 3

is_triple_divisible = (triple % 6 == 0)

if is_triple_divisible:
 print(triple)
else:
 print(number)"
c7802824-6ae1-48fb-b22f-a4d4c3e2e79a,"Write a program that reads a number `N` and prints the **Cube** of `N` (**N<sup>3</sup>**).

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the **Cube** of `N` (**N<sup>3</sup>**).

---

#### Explanation

For example, if the given number is `N = 4`,

- The **Cube** of `N` is **64** (**4<sup>3</sup> = 64**).

The output should be **64**.


Solution Code:number = int(input())

result = number ** 3
print(result)"
198268ee-a903-483f-9f14-5cfce5c3b5d5,"Write a program that reads a number `N` and checks if `N` is divisible by **2**.

Print **Even** if `N` is divisible by **2**. Otherwise, print **Odd**.


<MultiLineNote>

A Number `N` is divisible by **2**, if the remainder is **0** when `N` is divided by **2**.

**Example:**

- **4** is divisible by **2**. (Remainder is **0** when **4** is divided by **2**)
- **3** is **not** divisible by **2**. (Remainder is **1** (**not 0**) when **3** is divided by **2**)

</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing a string. **Even** should be printed if `N` is divisible by **2**. Otherwise, **Odd** should be printed.

---

#### Explanation

For example, if the given number is `N = 4`,

- The remainder is **0** when **4** is divided by **2**.

The output should be **Even**.

<br/>

For example, if the given number is `N = 3`,

- The remainder is **1** (**not 0**) when **3** is divided by **2**.

The output should be **Odd**.

Solution Code:number = int(input())

remainder = (number % 2)
is_even = (remainder == 0)

if is_even:
 print(""Even"")
else:
 print(""Odd"")"
7500c9a1-695d-443b-9f75-d3693f5a387f,"Write a program that reads a number `N` and finds the,

- Remainder when `N` is divided by **4**.
- Remainder when `N` is divided by **5**.

Print the greatest remainder among the two remainders when `N` is divided by **4** and **5**.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the greatest remainder among the two remainders when `N` is divided by **4** and **5**.

---

#### Explanation

For example, if the given number is `N = 12`,

- The remainder is **0** when `N` is divided by **4**.
- The remainder is **2** when `N` is divided by **5**.
- The greatest remainder among the two remainders **0** and **2** is **2**.

The output should be **2**.


Solution Code:number = int(input())

remainder_1 = number % 4
remainder_2 = number % 5

if remainder_1 > remainder_2:
    greatest_remainder = remainder_1
else:
    greatest_remainder = remainder_2

print(greatest_remainder)"
4081c52f-b733-46b1-b319-19c65ab588f3,"Write a program that reads two numbers `A` and `B`, and checks if all the given conditions are satisfied.

- `A` and `B` are divisible by **3**.
- `A` or `B` is divisible by **12**.

Print **Pair** if all the given conditions are satisfied. Otherwise, print **Not a Pair**.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a string. **Pair** should be printed if all the given conditions are satisfied. Otherwise, **Not a Pair** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 15` and `B = 240`,

✔ `A` and `B` are divisible by **3**. (**15** and **240** are divisible by **3**)
✔ `A` or `B` is divisible by **12**. (**240** is divisible by **12**)

The output should be **Pair** as all the given conditions are satisfied.


Solution Code:first_number = int(input())
second_number  = int(input())

is_first_divisible_by_3 = (first_number % 3) == 0
is_second_divisible_by_3 = (second_number % 3) == 0

is_first_divisible_by_12 = (first_number % 12) == 0
is_second_divisible_by_12 = (second_number % 12) == 0

is_divisible_by_3 = is_first_divisible_by_3 and is_second_divisible_by_3
is_divisible_by_12 = is_first_divisible_by_12 or is_second_divisible_by_12

result = is_divisible_by_3 and is_divisible_by_12

if result:
    print(""Pair"")
else:
    print(""Not a Pair"")"
82c1a5d5-b039-441d-b9e8-bbb07ae399aa,"Write a program that reads two numbers `A` and `B`, and prints the remainder when `A` is divided by `B`.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing an integer that is the remainder when `A` is divided by `B`.

---

#### Explanation

For example, if the given numbers are `A = 10` and `B = 3`,

- The remainder is **1** when **10** is divided by **3**.

The output should be **1**.


Solution Code:first_number = int(input())
second_number = int(input())

remainder = first_number % second_number
print(remainder)"
05d69896-d26a-42b8-83ed-c40e1862175f,"Write a program that reads a number `N` and checks if the number `N` is divisible by **7**.

Print **Divisible by Seven** if `N` is divisible by **7**. Otherwise, print **Not Divisible by Seven**.

<MultiLineNote>

A Number `N` is divisible by **7**, if the remainder is **0** when `N` is divided by **7**.

**Example:**

- **35** is divisible by **7**. (Remainder is **0** when **35** is divided by **7**)
- **27** is not divisible by **7**. (Remainder is **6** (**not 0**) when **27** is divided by **7**)

</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing a string. **Divisible by Seven** should be printed if the number is divisible by **7**. Otherwise, **Not Divisible by Seven** should be printed.

---

#### Explanation

For example, if the given number `N = 35`,

- The remainder is **0** when **35** is divided by **7**.

The output should be **Divisible by Seven**.

Solution Code:number = int(input())

remainder = number % 7
is_divisible_by_7 = (remainder == 0)

if is_divisible_by_7:
 print(""Divisible by Seven"")
else:
 print(""Not Divisible by Seven"")"
250770fd-6cb5-492c-b3d0-e004e2cbc995,"Write a program that reads two numbers `A` and `B` and checks if the square root of `A` is equal to `B`.

<MultiLineNote>
To calculate the **Square Root** of a number `N`, use the `N` power **0.5** (**N<sup>0.5</sup>**).

</MultiLineNote>

Print **Square root of A is equal to B** if the square root of `A` is equal to `B`. Otherwise, print **Square root of A is not equal to B**.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a string. **Square root of A is equal to B** should be printed if the square root of `A` is equal to `B`. Otherwise, **Square root of A is not equal to B** should be printed.

---

#### Explanation

For example, if the given numbers are `A = 64` and `B = 8`, 

* The square root of `A` is **8** (**64<sup>0.5</sup> = 8**).
* **8** (square root of **64**) is equal to **8** (`B`).

The output should be **Square root of A is equal to B** as the square root of `A` is equal to `B`.

Solution Code:a = int(input())
b = int(input())
square_root = a**0.5
result = int(square_root)
if result == b:
    print(""Square root of A is equal to B"")
else: 
    print(""Square root of A is not equal to B"")"
aa0fd41a-6dcb-40a4-a0c6-2232e48e1ca3,"Write a program that reads a number `N` and checks if one of the given conditions is satisfied.

- `N` is divisible by **5** and `N` is divisible by **7**.
- `N` is less than **7**.

Print `N` if one of the given conditions is satisfied. Otherwise, print the remainder when `N` is divided by **5** and the remainder when `N` is divided by **7** on each line.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing an integer `N` if one of the given conditions is satisfied.

Otherwise,

The first line of output should be an integer that is the remainder when `N` is divided by **5**.
The second line of output should be an integer that is the remainder when `N` is divided by **7**.

---

#### Explanation

For example, if the given number is `N = 3`,

<ul style=""list-style-type: none;padding:0;"">
  <li style=""margin:0;"">
    <details style=""margin:0;"">
      <summary style=""margin:0;padding:0;"">✖ `N` is divisible by __5__ and `N` is divisible by __7__</summary>
        <ul style=""list-style-type: none;"">
          <li style=""margin:0;padding:0;"">✖ `N` is divisible by **5**. (**3** is **not** divisible by **5**)</li>
          <li style=""margin:0;padding:0;"">✖ `N` is divisible by **7**. (**3** is **not** divisible by **7**)</li>
        </ul>
    </details>
  </li>
  <li style=""margin:0;"">
    <details style=""margin:0;"">
      <summary style=""margin:0;"">✔ `N` is less than **7**</summary>
        <ul style=""list-style-type: none;"">
          <li style=""margin:0;"">✔ `N` is less than **7** (**3** is less than **7**)</li>
       </ul>
    </details>
  </li>
</ul>

The output should be **3** as one of the given conditions is satisfied.

<br/>

For example, if the given number is `N = 9`,

<ul style=""list-style-type: none;padding:0;"">
  <li style=""margin:0;"">
    <details style=""margin:0;"">
      <summary style=""margin:0;padding:0;"">✖`N` is divisible by __5__ and `N` is divisible by __7__.</summary>
        <ul style=""list-style-type: none;"">
          <li style=""margin:0;padding:0;"">✖ `N` is divisible by **5**. (**9** is **not** divisible by **5**)</li>
          <li style=""margin:0;padding:0;"">✖ `N` is divisible by **7**. (**9** is **not** divisible by **7**)</li>
        </ul>
    </details>
  </li>
  <li style=""margin:0;"">
    <details style=""margin:0;"">
      <summary style=""margin:0;"">✖ `N` is less than **7**.</summary>
        <ul style=""list-style-type: none;"">
          <li style=""margin:0;"">✖ `N` is less than **7**. (**9** is **not** less than **7**)</li>
       </ul>
    </details>
  </li>
</ul>


As both the given conditions are **not** satisfied, the output should be the remainders when **9** is divided by **5** and **7**.

* The remainder when **9** divided by **5** is **4**.
* The remainder when **9** divided by **7** is **2**.

The output should be,

```
4
2
```



Solution Code:N = int(input())
condition_1 = N % 5 == 0 and N % 7 == 0
condition_2 = N < 7

if condition_1 or condition_2:
    print(N)
else:
    print(N % 5)
    print(N % 7)"
019ac4e5-a71b-44af-86c3-1bbdad97a4b1,"Write a program that reads a number `N` and checks if `N` is divisible by **3**.

Print the triple of `N` if `N` is divisible by **3**. Otherwise, print the double of `N`.

<MultiLineNote>
Double of `N` is calculated as `N * 2`
Triple of `N` is calculated as `N * 3`
</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing an integer. The triple of `N` should be printed if `N` is divisible by **3**. Otherwise, the double of `N` should be printed.

---

#### Explanation

For example, if the given number is `N = 6`,

  - **6** is divisible by **3**. So, `N` should be tripled (`N * 3`).
  - The triple of **6** is **18**. (`6 * 3 = 18`)

The output should be **18**.

For example, if the given number is `N = 4`,

  - **4** is not divisible by **3**. So, `N` should be doubled (`N * 2`).
  - The double of **4** is **8**. (`4 * 2 = 8`)

The output should be **8**.

Solution Code:Number=int(input())
if (Number%3==0):
    print(Number*3)
else:
    print(Number*2)"
ea05abdb-3707-43e7-a4ee-454e1320a430,"Write a program that reads a number `N` and checks if `N` is **not divisible** by all the given numbers **2**, **3**, **5** and **7**.

---

#### Input

The input will be a single line containing an integer.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if `N` is **not divisible** by the given numbers **2**, **3**, **5** and **7**. Otherwise, **False** should be printed.

---

#### Explanation

For example, if the given number `N = 5633`,

✔ **5633** is **not divisible** by **2**.
✔ **5633** is **not divisible** by **3**.
✔ **5633** is **not divisible** by **5**.
✔ **5633** is **not divisible** by **7**.

The output should be **True** as **5633** is **not divisible** by **2**, **3**, **5** and **7**.

Solution Code:a = int(input())

divisible_2 = a % 2 != 0
divisible_3 = a % 3 != 0
divisible_5 = a % 5 != 0
divisible_7 = a % 7 != 0


if divisible_2 and divisible_3 and divisible_5 and divisible_7:
  print(""True"")
else:
  print(""False"")"
b57b3bd6-481e-46fd-99d4-4d0a97ff709f,"Write a program that reads two numbers `A` and `B` and finds the,

* Remainder when `A` is divided by `B` (`A % B`).
* Remainder when `B` is divided by `A` (`B % A`).

Print the smallest among the remainders `A % B` and `B % A`.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing an integer that is the smallest among the remainders `A % B` and `B % A`.

---

#### Explanation

For example, if the given numbers are `A = 3` and `B = 7`,

- The remainder `A % B` is **3**. (`3 % 7 = 3`)
- The remainder `B % A` is **1**. (`7 % 3 = 1`)
- Smallest among **1** and **3** is **1**.

The output should be **1**.

Solution Code:a=int(input())
b=int(input())
if (a%b) < (b%a):
    print(a%b)
else:
    print(b%a)"
7e947260-da93-4bf3-af70-0d05098148a1,"Given `N` number of days as input, write a program to convert `N` number of days to years (`Y`), weeks (`W`) and days (`D`).

`Note:` Take 1 year = 365 days.  

---

#### Input

The input contains single integer `N`.

---

#### Output

The first line of output contains an integer `Y` representing the number of years.
The second line of output contains an integer `W` representing the number of weeks.
The third line of output contains an integer `D` representing the number of days.

---

#### Explanation

Given  `N = 1329`. The value can be written as 

`1329 = 3 years + 33 weeks + 3 days`

So the output should be 


```

3 
33 
3

```

Solution Code:N = int(input())

Years = int(N/365)
print(Years)
weeks = int((N%365)/7)
print(weeks)
days = int((N%365)%7)
print(days)"
5aa0599a-3f95-4491-9776-531db9d25c66,"Write a program to find season for the given month number.<hr><b>Input</b><br/><br/>The first line of input will contain an integer that indicates the number of the month.<br/>If the given number of the month is 3, that indicates March month.<hr><b>Output</b><br/><br/>If the given month is either November or December or January, print &quot;Winter&quot;.<br/>If the given month is either February or March, print &quot;Spring&quot;.<br/>If the given month is either April or May or June print &quot;Summer&quot;.<br/>If the given month is either July or August, print &quot;Rainy&quot;.<br/>If the given month is either September or October, print &quot;Autumn&quot;.<hr><b>Explanation</b><br/><br/>For example, if the given month is 1, which indicates January month, the output should be &quot;Winter&quot;.<br/>Similarly, if the given month is 4, which indicates April month, the output should be &quot;Summer&quot;.

Solution Code:month=int(input())
if month==2 or month==3:
    print(""Spring"")
elif month==4 or month==5 or month==6:
    print(""Summer"")
elif month==7 or month==8:
    print(""Rainy"")
elif month==11 or month==12 or month==1:
    print(""Winter"")
else:
    print(""Autumn"")"
8d597db0-ed4f-4667-8c55-0f4c8078df67,"Write a program that reads a number `N` and checks if the number `N` is a Negative Number or a Positive Number.

Print **Positive** if `N` is greater than **0**.
Print **Negative** if `N` is less than **0**.

---

#### Input

The input will be a single line containing a float representing `N`.

---

#### Output

The output should be a single line containing a string. **Positive** should be printed if `N` is greater than **0**. **Negative** should be printed if `N` is less than **0**.

---

#### Constraints

The given number `N` is not equal to **0**.

---

#### Explanation


For example, if the given number is `N = -12.5`, 

* **-12.5** is less than zero (`-12.5 < 0`).

The output should be **Negative**.
<br/>
For example, if the given number is `N = 15.2`,

* **15.2** is greater than zero (`15.2 > 0`).

The output should be **Positive**.

Solution Code:n = float(input())

if n>=0 :
    print(""Positive"")
else :
    print(""Negative"")"
a02dc867-278f-4d1a-9575-3f565b921770,"Write a program to print the relation between two numbers, `A` and `B`.

---


#### Input

The first line is an integer `A`.
The second line is an integer `B`.

---

#### Output

Print `A == B` if A and B are equal.
Print `A > B` if A is greater than B.
Print `A < B` if A is less than B.

---

#### Explanation

Given  `A = 3`, `B = 4`

As 3 < 4, the output should be `A < B`.

Solution Code:a = int(input())
b = int(input())

if (a == b) :
    print(""A == B"")
elif (a > b) :
    print(""A > B"")
elif (a < b) :
    print(""A < B"")"
cc25d6ba-9e49-407d-8e85-f63431fa7b02,"Write a program to display a customized message based on temperature `T`.

---

#### Input

The first line is a real number `T`.

---

#### Output

Print `Freezing weather` if `T < 0`
Print `Very Cold weather` if `0 <= T < 10`
Print `Cold weather` if `10 <= T < 20`
Print `Normal` if `20 <= T < 30`
Print `Hot` if `30 <= T < 40`
Print `Very Hot` if ` T >= 40` .

---

#### Explanation

In the given example, the temperature is `-50.0`. 
As the temperature is less than `0`, the output should be `Freezing weather`.

Solution Code:T = float(input())

if T<0:
    print(""Freezing weather"")
elif 0<=T<10:
    print(""Very Cold weather"")
elif 10<=T<20:
    print(""Cold weather"")
elif 20<=T<30:
    print(""Normal"")
elif 30<=T<40:
    print(""Hot"")
else:
    print(""Very Hot"")"
ac375989-146d-4a0e-bbb9-e74bef4b9f0d,"Write a program that reads the Cost Price `CP` and Selling Price `SP` of a product and compares `SP` with `CP`.

Print **Profit** if `SP` is greater than `CP`.
Print **Loss** if `SP` is less than `CP`.
Print **No Profit - No Loss** if `SP` is equal to `CP`.

---

#### Input

The first line of input contains an integer representing `CP`.
The second line of input contains an integer representing `SP`.

---

#### Output

The output should be a single line containing a string. **Profit** should be printed if `SP` is greater than `CP`. **Loss** should be printed if `SP` is less than `CP`. **No Profit - No Loss** should be printed if `SP` is equal to `CP`.

---

#### Explanation

For example, if the given Cost Price is `CP = 143` and the given Selling Price is `SP = 155`,

* The Selling Price `SP` is greater than the Cost Price `CP`. (**155** is greater than **143**)

The output should be **Profit**.

Solution Code:cp = int(input())
sp = int(input())

if (sp > cp) :
    print(""Profit"")
elif (sp < cp) :
    print(""Loss"")
elif (sp == cp) :
    print(""No Profit - No Loss"")"
dabad9f1-98f1-4260-ad92-d289b49394aa,"Write a program to print the absolute difference between the two given numbers. (Absolute difference is the difference without the negative sign)<hr><b>Input</b><br/><br/>The first line of the input will be an integer N1.<br/>The second line of the input will be an integer N2.<hr><b>Output</b><br/><br/>Print the absolute difference of the given two numbers.<hr><b>Explanation</b><br/><br/>For example, if the given N1 is 200 and N2 is 500<br/>The difference in number is 200 - 500 = -300<br/>The absolute difference is 300.

Solution Code:n1 = int(input())
n2 = int(input())

if n1>n2 :
    difference = n1 - n2
else :
    difference = n2 - n1
print(difference)"
6f68be60-f706-4a8b-b48b-b532d6b7db23,"Given three sides of the triangle(a, b, c) as input. Write a program to determine whether the triangle is Equilateral, Isosceles or Scalene.<hr><b>Input</b><br/><br/>The first line of input will contain an integer A.<br/>The second line of input will contain an integer B.<br/>The third line of input will contain an integer C.<hr><b>Output</b><br/><br/>If the given sides A, B and C are equal, print &quot;Equilateral&quot;.<br/>In the given sides any of two sides are equal print &quot;Isosceles&quot;.<br/>If the given sides A, B, C are not equal to each other, print &quot;Scalene&quot;.<hr><b>Explanation</b><br/><br/>For example, if the given sides are 4, 4, 4 the output should be &quot;Equilateral&quot;.<br/>Similarly, if the given sides are 3, 2, 3 the output should be &quot;Isosceles&quot;.

Solution Code:A = int(input())
B = int(input())
C = int(input())
if A == B and A == C and B == C:
    print(""Equilateral"")
elif A == B or B == C or A == C:
    print(""Isosceles"")
elif A != B and B != C and A != C:    
    print(""Scalene"")"
523836d3-4819-4823-ac7f-cb8a4e7a0a81,"Write a program that reads a distance `D` in km and calculates the total score.

- For the first **50** km (`0 - 50 km`), the score for each km is **3**.
- For the distance above **50** km, the score for each km is **5**.

---

#### Input

The input will be a single line containing an integer representing `D`.

---

#### Output

The output should be a single line containing an integer that is the score.

---

#### Explanation

For example, if the given distance in km is `D = 75`,

As `D` is greater than **50** km, the total score is the sum of the score of first **50** km and the score of the remaining distance after **50** km.

Score is **3** for each km for 0 to 50 km     =>  50 x 3  = 150
Score is **5** for each km for above 50 km =>  25 x 5   = 125
-----------------------------------------------------------
Total                                                           =>                   275 


<details style=""margin:0;"">
      <summary style=""margin:0;padding:0;"">Detailed Explanation to calculate the score</summary>
        <ul>
          <li style=""margin:0;padding:0;"">The score for each km for the first **50** km is **3**.</li>
          <li style=""margin:0;padding:0;"">If the score is **3** for each km, then the score for **50** km is the product of **50** and **3** that is **150**. (`50 * 3 = 150`)</li>
          <li style=""margin:0;padding:0;"">The score for each km for the above **50** km is **5**.</li>
           <li style=""margin:0;padding:0;"">The remaining distance after **50** km is **25**. (`75 - 50 = 25`)</li>
          <li style=""margin:0;padding:0;"">If the score is **5** for each km, then the score for **25** km is the product of **25** and **5** that is **125**. (`25 * 5 = 125`)</li>
          <li style=""margin:0;padding:0;"">The total score is sum of the scores that is **275**. (`150 + 125 = 275`)</li>
        </ul>
</details>
<br/>
The output should be **275**.

<br/>

For example, if the given distance in km is `D = 30`,

As `D` is less than or equal to **50**, the total score is score for **30** km.

- The score for each km for the first **50** km is **3**.

Score is **3** for each km for 0 to 50 km       =>  30 x 3  =  90
Score is **5** for each km for above 50 km   =>     0 x 5  =    0
------------------------------------------------------------
Total                                                             =>                    90 

The output should be **90**.

Solution Code:distance = int(input())

first_50_score = 50 * 3

if distance <= 50:
 score = distance * 3
else:
 remaining_distance = distance - 50
 remaining_distance_score = remaining_distance * 5
 score = first_50_score + remaining_distance_score

print(score)"
06222adc-7a15-458d-9e50-066e7d8ed290,"Write a program that reads a distance `D` in km and calculates the total score.

- For the first **20** km (`0 - 20 km`), the score for each km is **2**.
- For the next **40** km (`21 - 60 km`), the score for each km is **4**.
- For the distance above **60** km, the score for each km is **6**.
- Apart from the above scores, there is a bonus score of **30**.

---

#### Input

The input will be a single line containing an integer representing `D`.

---

#### Output

The output should be a single line containing an integer that is the score.

---

#### Explanation

For example, if the given distance in km is `D = 125`,

As `D` is greater than **60** km, the total score is the sum of the score of first **20** km, score of the next **40** km, score of the remaining distance after **60** km and the bonus score.

Score is **2** for each km for 0 to 20 km       =>  20 x 2  =   40
Score is **4** for each km for 21 to 60 km     =>  40 x 4  =  160
Score is **6** for each km for above 60 km   =>  65 x 6  =  390
------------------------------------------------------------
Total                                                             =>                   590
Bonus Score                                                =>                     30
------------------------------------------------------------
Total Score                                                  =>                    620
------------------------------------------------------------


<details style=""margin:0;"">
      <summary style=""margin:0;padding:0;"">Detailed Explanation to calculate the score</summary>
        <ul>
          <li style=""margin:0;padding:0;"">The score for each km for the first **20** km is **2**. Then the score for **20** km is **40**. (`20 * 2 = 40`)</li>
          <li style=""margin:0;padding:0;"">The score for each km for the next **40** km is **4**. Then the score for **40** km is **160**. (`40 * 4 = 160`)</li>
          <li style=""margin:0;padding:0;"">The score for each km for the above **60** km is **6**. The remaining distance after **60** km is **65** (`125 - 60 = 65`). Then the score for **65** km is **390**. (`65 * 6 = 390`)</li>
          <li style=""margin:0;padding:0;"">Sum of the above scores is **590** (`40 + 160 + 390 = 590`). Then the **total score** is the sum of above scores and bonus score that is **620**. (`590 + 30 = 620`)</li>
        </ul>
</details>

<br/>

The output should be **620**.


<br/>

For example, if the given distance in km is `D = 15`,

As `D` is less than or equal to **20** km, the total score is the sum of the score for **15** km and the bonus score.

- The score for each km for the first **20** km is **2**. Then the score for **15** km is **30**. (`15 * 2 = 30`)
- The **total score** is the sum of the score for **15** km and the bonus score that is **60**. (`30 + 30 = 60`) 

Score is **2** for each km for 0 to 20 km       =>  15 x 2  =  30
Score is **4** for each km for 21 to 60 km     =>    0 x 4  =    0
Score is **6** for each km for above 60 km   =>    0 x 6  =    0
-----------------------------------------------------------
Total                                                             =>                   30
Bonus Score                                                =>                   30
-----------------------------------------------------------
Total Score                                                  =>                   60
-----------------------------------------------------------

The output should be **60**.

Solution Code:distance = int(input())

bonus_score = 30

first_20_score = 20 * 2
next_40_score = 40 * 4

if distance <= 20:
    score = distance * 2
elif distance <= 60:
    remaining_distance = distance - 20
    remaining_distance_score = remaining_distance * 4
    score = first_20_score + remaining_distance_score
else:
    remaining_distance = distance - 60
    remaining_distance_score = remaining_distance * 6
    score = first_20_score + next_40_score + remaining_distance_score

score = score + bonus_score
print(score)"
0026be65-dd7b-475d-bf2a-9439e813a38b,"Write a program that reads a string `S`. The string `S` contains a number except the last character. The last character of the string contains **T** or **H** or **K**.

Print the Value by multiplying the number in `S` with **10** or **100** or **1000** based on the last character.

| Last Character | Represents | Value                                       |
| -------------- | ---------- | ------------------------------------------- |
| T              | Tens       | Multiply the number in string with **10**   |
| H              | Hundreds   | Multiply the number in string with **100**  |
| K              | Thousands  | Multiply the number in string with **1000** |

<MultiLineQuickTip>

Make sure the number is converted to an integer before doing any operations like Multiplication (`*`), etc.

**Example:** `S = 34T`

- The number in **34T** is **34**.
- **34** should be converted to an integer before doing any operations.

</MultiLineQuickTip>

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing an integer that is the value obtained by multiplying the number in `S` with **10** or **100** or **1000** based on the last character.

---

#### Explanation

For example, if the given string is `S = 34T`,

- The number in `S` is **34**.
- The last character of `S` is **T**
- As **T** represents **Tens**, multiply the number in `S` with **10**. So, the value is **340** (`34 * 10 = 340`).

The output should be **340**.

<br/>

For example, if the given string is `S = 6H`,

- The number in `S` is **6**.
- The last character of `S` is **H**
- As **H** represents **Hundreds**, multiply the number in `S` with **100**. So, the value is **600** (`6 * 100 = 600`).

The output should be **600**.


Solution Code:string = input()

string_length = len(string)
last_index = string_length - 1

number = string[:last_index]
number = int(number)

last_character = string[last_index]

if last_character == ""T"":
    value = number * 10
elif last_character == ""H"":
    value = number * 100
elif last_character == ""K"":
    value = number * 1000

print(value)"
506b9608-ec59-4399-93b9-8c5de1e3538c,"Write a program that reads the attendance percentage `A` and status of having medical report `M` of a student and checks if any of the below conditions is satisfied.

* `A` is greater than or equal to **75**.
* `M` is equal to **""Y""**.

Print **Allowed to write exam** if any of the given conditions is satisfied. Otherwise, print **Cannot write exam**.

<MultiLineNote>

* The last character of the attendance percentage `A` contains `%`.
* The remaining characters contain a Number.

Example: `40%`, `60%` 

</MultiLineNote>

---

#### Input

The first line of input contains a string representing `A`.
The second line of input contains a string representing `M`.

---

#### Output

The output should be a single line containing a string. **Allowed to write exam** should be printed if `A` is greater than or equal to **75** or `M` is equal to **""Y""**. Otherwise, **Cannot write exam** should be printed.

---

#### Explanation

For example, if the given attendance percentage `A = ""80%""` and the status of having a medical report is `M = ""Y""`, 

✔ `A` is greater than or equal to **75**. (`80 >= 75`)
✖ `M` is equal to **""Y""**.

The output should be **Allowed to write exam** as the attendance percentage is greater than or equal to **75**.
<br/>

For example, if the given attendance percentage is `A = ""70%""` and the status of having a medical report is `M = ""Y""`,

✖ `A` is greater than or equal to **75**. (`70 < 75`)
✔ `M` is equal to **""Y""**.

The output should be **Allowed to write exam** as the attendance percentage is not greater than or equal to **75** but the medical report status is equal to **""Y""**.
<br/>

For example, if the given attendance percentage is `A = ""72%""` and the status of having a medical report is `M = ""N""`,

✖ `A` is greater than or equal to **75**. (`72 < 75`)
✖ `M` is equal to **""Y""**.

The output should be **Cannot write exam** as the attendance percentage is not greater than or equal to **75** and the medical report status is not equal to **""Y""**.

Solution Code:attendance = input()
medical_reason = input()

length = len(attendance)
attendance = attendance[:(length-1)]
attendance = int(attendance)

if attendance >= 75:
 print(""Allowed to write exam"")

elif attendance < 75 and medical_reason == ""Y"":
 print(""Allowed to write exam"")

else:
 print(""Cannot write exam"")"
56e5b608-b762-4a6e-96f7-a0dbcf349e91,"Write a program that reads a day number and prints the corresponding day name.

| Day Number|Day Name |
| --- |--- |
| 1 | Monday |
| 2 | Tuesday |
| 3 | Wednesday |
| 4 | Thursday |
| 5 | Friday |
| 6 | Saturday |
| 7 | Sunday |

For example, 

If the given day number is **1**, the day name is **Monday**, 
If the given day number is **2**, the day name is **Tuesday**, etc.

---

#### Input

The input will be a single line containing an integer representing the day number.

---

#### Output

The output should be a single line containing a string that is the day name. 

---

#### Constraints

The day number is always greater than or equal to **1** and less than or equal to **7**.

---

#### Explanation

For example, if the given day number is **3**, the output should be **Wednesday** as the day number of **Wednesday** is **3**.

Solution Code:day_number = int(input())

if day_number == 1:
 print(""Monday"")
elif day_number == 2:
 print(""Tuesday"")
elif day_number == 3:
 print(""Wednesday"")
elif day_number == 4:
 print(""Thursday"")
elif day_number == 5:
 print(""Friday"")
elif day_number == 6:
 print(""Saturday"")
elif day_number == 7:
 print(""Sunday"")"
fc660d97-1da5-45dc-943c-2702d9851e1b,"Write a program that reads an operator `O`, and two numbers `A` and `B`.

Print the result by doing arithmetic operations on `A` and `B` based on the operator `O`

|Operator | Arithmetic Operation | Represents|
|--- | --- | ---|
|`+` | `A + B` | Addition of A and B|
|`-` | `A - B` | Subtraction of B from A|
|`*` | `A * B` | Multiplication of A and B|
|`/` | `A / B` | Division of A and B|
|`%` | `A % B` | Remainder when A is divided by B|

---

#### Input

The first line of input contains a string representing `O`. (`+`, `-`, `*`, `/`, or `%`).
The second line of input contains an integer representing `A`.
The third line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing an integer, that is the result obtained by doing arithmetic operations on `A` and `B` if an operator `O` is equal to `+`, `-`, `*` or `%`.

The output should be a single line containing a float, that is the result obtained by doing arithmetic operations on `A` and `B` if an operator `O` is equal to `/`.


---

#### Constraints

The operator (`O`) is always equal to one of `+`, `-`, `*`, `/` or `%`.

---


#### Explanation

For example, if the given operator is `O = ""+""` and the two numbers are `A = 3` and `B = 5`. 
  
  * As `O` is equal to `+`, `A` should be added to `B`.
  * The Addition of `A` and `B` is equal to **8**. (`3 + 5 = 8`)

The output should be **8**.

<br/>

For example, if the given operator is `O = ""*""` and the two numbers are `A = 2` and `B = 5`. 
  
  * As `O` is equal to `*`, `A` should be multiplied by `B`.
  * The Multiplication of `A` and `B` is equal to **10**. (`2 * 5 = 10`)

The output should be **10**.

<br/>

For example, if the given operator is `O = ""-""` and the two numbers are `A = 10` and `B = 9`. 
  
  * As `O` is equal to `-`, `B` should be subtracted from `A`.
  * The Subtraction of `B` from `A` is equal to **1**. (`10 - 9 = 1`)

The output should be **1**.

Solution Code:operator = input()
first_number = int(input())
second_number = int(input())

if operator == ""+"":
 print(first_number + second_number)
elif operator == ""-"":
 print(first_number - second_number)
elif operator == ""*"":
 print(first_number * second_number)
elif operator == ""/"":
 print(first_number / second_number)
else:
 print(first_number % second_number)"
6d7f911d-316a-412f-8334-fb08ac9a541d,"It was Raj's first day at school. His teacher Anu asked the students to meet every other student in the class and introduce themselves. The teacher asked them to do handshakes when they meet each other.

Write a program that reads an integer `N` and prints the number of handshakes made by the students.

---

#### Input

The input will be a single line containing an integer representing the number of students `N`.

---

#### Output

The output should be a single line containing an integer that is the number of handshakes made by the students in the classroom.

---

#### Explanation

For example, if the given `N = 5`, 

<ImageInlineText imageSrc = 'https://s3.ap-south-1.amazonaws.com/new-assets.ccbp.in/frontend/content/programming-foundations/Screenshot+from+2023-04-13+17-27-14.png' widthPercent='50'>The **1st** student has to shake hands with the other `4` students.

So, the number of handshakes is `4`.
</ImageInlineText>

<ImageInlineText imageSrc = 'https://s3.ap-south-1.amazonaws.com/new-assets.ccbp.in/frontend/content/programming-foundations/Screenshot+from+2023-04-13+17-02-00.png' widthPercent='50'>The **2nd** student has to shake hands with the remaining `3` students. (since the **2nd** student already shaken hands with the **1st** student)

So, the number of handshakes is `3`.
</ImageInlineText>

<ImageInlineText imageSrc = 'https://s3.ap-south-1.amazonaws.com/new-assets.ccbp.in/frontend/content/programming-foundations/Screenshot+from+2023-04-13+17-03-43.png' widthPercent='50'>The **3rd** student has to shake hands with the remaining `2` students. (since the **3rd** student already shaken hands with **1st** and **2nd** students)

So, the number of handshakes is `2`.
</ImageInlineText>

<ImageInlineText imageSrc = 'https://s3.ap-south-1.amazonaws.com/new-assets.ccbp.in/frontend/content/programming-foundations/Screenshot+from+2023-04-13+17-04-13.png' widthPercent='50'>The **4th** student has to shake hands with the remaining `1` student. (since the  **4th** student already shaken hands with **1st**, **2nd** and **3rd** students)

So, the number of handshakes is `1`.
</ImageInlineText>

<ImageInlineText imageSrc = 'https://s3.ap-south-1.amazonaws.com/new-assets.ccbp.in/frontend/content/programming-foundations/Screenshot+from+2023-04-13+17-08-15.png' widthPercent='50'>As there are no student left shake hands with the **5th** student.(since the  **5th** student already shaken hands with **1st**, **2nd**, **3rd** and **4th** students)

So, the number of handshakes is `0`.
</ImageInlineText>

The total number of handshakes made by the students is **10**. (`4 + 3 + 2 + 1 + 0 = 10`)

So, the output should be **10**.

---

For example, if the given `N = 3`, 

The **1st** student has to shake hands with the other `2` students.

So, the number of handshakes is `2`.

The **2nd** student has to shake hands with the remaining  `1` student. (since the **1st** student already shaken hands with the  **2nd** student)

So, the number of handshakes is `1`.

The total number of handshakes made by the students is **3**. (`2 + 1 = 3`)

So, the output should be **3**.

Solution Code:n = int(input())

use_formula = ((n-1)*(n/2))
print(int(use_formula))"
409d6e77-8c9d-4636-8379-5fc77bc5609a,"For this problem, the prefilled code will contain a set. Write a program to remove a list of numbers if present in the set.<hr><b>Input</b><br/><br/>The input will be a single line containing space-separated integers.<hr><b>Output</b><br/><br/>The output should be a single line containing the list of remaining numbers in ascending order.<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;20 40 80&quot;, your code should remove the numbers(20, 40, 80) from the set. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[10, 30, 50, 60, 70, 90, 100]
</code></pre>

Solution Code:num_set = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100}

list_a = input().split()

for item in list_a:
 num = int(item)
 num_set.discard(num)

nums_list = list(num_set)
nums_list.sort()
print(nums_list)"
4fc04227-aeae-4ae9-8b6e-2695a17ba9e5,"Given an integer N. Write a program to create two sets with N multiples of 2 and 3 and print the following<br/>  1. All the multiples of 2 but not the multiplies of 3<br/>  2. Uncommon multiples of 2 and 3<hr><b>Input</b><br/><br/>The input will be a single line containing a positive integer (N).<hr><b>Output</b><br/><br/>The first line of output should be a single line containing a list with all the multiples of 2 but not the multiplies of 3 in ascending order.<br/>The second line of output should be a single line containing a list with uncommon multiples of 2 and 3 in ascending order.<hr><b>Explanation</b><br/><br/>For example, if the given N is 5, the first 5 multiples of 2 and 3 are the following<br/>multiples_of_2 = {2, 4, 6, 8, 10}<br/>multiplies_of_3 = {3, 6, 9, 12, 15}<br/><br/>The first line of output should contain a list of all the multiples of 2 but not the multiples of 3, as 6 is a multiple of 3, print the list without 6. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[2, 4, 8, 10]
</code></pre><br/>The second line of output should contain a list of uncommon multiples of 2 and 3, as 6 is common in both the sets print a list with all the multiples of 2 and 3 without 6. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[2, 3, 4, 8, 9, 10, 12, 15]
</code></pre>

Solution Code:n = int(input())

multiples_of_2 = set()
multiples_of_3 = set()

for i in range(1, n+1):
 multiples_of_2.add(2*i)
 multiples_of_3.add(3*i)

diff = multiples_of_2.difference(multiples_of_3)
symmetric_diff = multiples_of_2.symmetric_difference(multiples_of_3)

diff = list(diff)
symmetric_diff = list(symmetric_diff)

diff.sort()
symmetric_diff.sort()

print(diff)
print(symmetric_diff)"
32e38423-3848-4229-9ea4-08286ad311f9,"For this problem, the prefilled code will contain a set. Write a program to add an word W to the set.<hr><b>Input</b><br/><br/>The input will be a single line containing a string (W).<hr><b>Output</b><br/><br/>The output should be a single line containing the list in ascending order.<hr><b>Explanation</b><br/><br/>For example, if the given word W is &quot;pen&quot;, your code should add W to the set. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[""pen"", ""pencil""]
</code></pre>

Solution Code:set_a = {""pencil""}

word = input()
set_a.update([word])

list_a = list(set_a)
list_a.sort()
print(list_a)"
274641a1-28a8-4390-94d3-d27e781ca7ad,"Write a program to convert a list into a tuple.<hr><b>Input</b><br/><br/>The input will be a single line containing the comma-separated integers.<hr><b>Output</b><br/><br/>The output should be a single line containing the tuple with the list elements.<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;5,10,15,20,25,30&quot;, your code should print the tuple with the numbers present in the given string. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">(5, 10, 15, 20, 25, 30)
</code></pre>

Solution Code:str_a = input()
a = str_a.split("","")
i = 0
for item in a:
 a[i] = int(item)
 i += 1
a = tuple(a)
print(a)"
8c565757-d268-4fff-b87a-f96c3af68827,"For this problem, the prefilled code will contain a list of tuples. Write a program to replace the last number of each tuple in the list with the given number (N).<hr><b>Input</b><br/><br/>The input will be a single line containing an integer (N).<hr><b>Output</b><br/><br/>The output should be a single line containing the list of tuples with the given number.<hr><b>Explanation</b><br/><br/>For example, if the given N is 50, your code should print the list of tuples by replacing the last number of each tuple with 50. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[(10, 20, 50), (1, 50), (5, 10, 15, 50)]
</code></pre>

Solution Code:num_list = [(10, 20, 30), (1, 2), (5, 10, 15, 45)]

n = int(input())

new_list = []
for tuple_a in num_list:
 update_tuple = tuple_a[:-1] + (n,)
 new_list.append(update_tuple)

print(new_list)"
c78f1844-7eac-4b0d-af63-262965740acc,"Given two lines of comma-separated integers, write a program to print the numbers that are present in both of the lines.<hr><b>Input</b><br/><br/>The first line of input will contain comma-separated integers.<br/>The second line of input will contain comma-separated integers.<hr><b>Output</b><br/><br/>The output should be a single line containing the list of common elements in both lists sorted in ascending order.<hr><b>Explanation</b><br/><br/>For example, if the given two strings are &quot;1,2,3,4,5,6&quot; and &quot;2,4,5,9,10&quot;, your code should print the list of common elements. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[2, 4, 5]
</code></pre>

Solution Code:def convert_string_to_int(num_list):
 new_list = []
 for item in num_list:
 num = int(item)
 new_list.append(num)
 return new_list


list_a = input().split("","")
list_b = input().split("","")

list_a = convert_string_to_int(list_a)
list_b = convert_string_to_int(list_b)

set_a = set(list_a)
set_b = set(list_b)

result_set = set_a.intersection(set_b)
result_list = list(result_set)
result_list.sort()
print(result_list)"
8ce08f77-c135-4154-884d-235b613d1631,"A function is given in the prefilled code, that takes `N` space-separated integers as an argument.

Write a program to return the count of even numbers among the given `N` space-separated numbers.

---

#### Input

The input will be a single line containing a string of `N` space-separated integers.

---

#### Output

The output should be a single line containing an integer that is the count of even numbers among the given `N` space-separated numbers.

---

#### Explanation

For example, if the given numbers are `2 3 4 5 6 7 8`,

- The even numbers among the given numbers are **2**, **4**, **6**, and **8**.
- The count of even numbers is **4**.

The output should be **4**.

Solution Code:def get_even_numbers_count(numbers):
 even_count = 0
 numbers = numbers.split()

 for number in numbers:
 number = int(number)
 if number % 2 == 0:
 even_count += 1
 
 return even_count

numbers = input()
result = get_even_numbers_count(numbers)
print(result)"
b313791c-d12b-4634-9d73-557592325415,"A function is given in the prefilled code that takes a number `N` as an argument.

Write a program that returns the factors of the given number `N` separated by a space as shown in the sample output.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing a string of space separated numbers that are factors of `N` as shown in the sample output.

---

#### Explanation

For example, if the given number is `N = 6`,

- The factors of **6** are **1**, **2**, **3**, and **6**.

The output should be, 

```
1 2 3 6
```

Solution Code:def factors_of_n(number):
 factors = []
 
 for each_number in range(1, number + 1):
 if number % each_number == 0:
 factors += [str(each_number)]
 
 factors_separated_by_space = "" "".join(factors)
 
 return factors_separated_by_space


number = int(input())
result = factors_of_n(number)
print(result)"
2cfc9d2c-0907-4b3a-b319-f85f9c987c44,"A function is given in the prefilled code that takes a string `S` as an argument.

Write a program to return the first uppercase letter in the given string `S`.

---

#### Input

The input will be a single line containing a string representing `S`.


---

#### Output

The output should be a single line containing a string that is the first uppercase letter in the given string `S`.

---

#### Explanation

For example, if the given string is `S = ""javaScripT""`,

- The characters of the string are **j**, **a**, **v**, **a**, **S**, **c**, **r**, **i**, **p**, and **T**.
- The uppercase letters in the given string are **S** and **T**.
- The first uppercase letter is **S**.

The output should be **S**.

<br/>

For example, if the given string is `S = ""reactJS""`,

- The characters of the string are  **r**, **e**, **a**, **c**, **t**, **J** and **s**.
- The uppercase letters in the given string are **J** and **S**
- The first uppercase letter is **J**.

The output should be **J**.

Solution Code:def get_first_upper_letter(string):

 for each_character in string:
 if each_character == each_character.upper():
 first_upper_case_letter = each_character
 break
 return first_upper_case_letter

string = input()
upper_case_character = get_first_upper_letter(string)
print(upper_case_character)"
4999a2d8-bc96-4392-8e55-3c1fdbe5a212,"A function is given in the prefilled code that takes a string `S` and `N` space-separated indices as an argument.

Write a program that prints a string by joining characters present at each index of the given N indices.


---

#### Input

The first line of input contains a string representing `S`.
The second line of input contains `N` space-separated integers. 

---

#### Output

The output should be a single line containing a string obtained by shuffling the characters in the order of the given `N` space-separated indices.

---

#### Explanation

For example, if the given string is `S = ""tonyPh""` and `N` space-separated indices are `4 3 0 5 1 2`,

- The characters of the string **tonyPh** with indices are, 

|Character| Position|
|-- | -- |
| t | 0 |
| o | 1 |
| n | 2 |
| y | 3 |
| P | 4 |
| h | 5 |

- The string formed in the given order of  `4 3 0 5 1 2` is **Python**.

The output should be **Python**.

Solution Code:def shuffle_string(string, indices_list):
 new_string = """"
 indices_list = indices_list.split()
 
 for index in indices_list:
 index = int(index)
 new_string += string[index]

 return new_string

string = input()
indices_list = input()

result = shuffle_string(string, indices_list)
print(result)"
55c605bb-038d-42db-aef5-b4eb1aa634d7,"A function is given in the prefilled code that takes a number `N` as an argument.

Write a program to check if the given number `N` is prime or not.

Print **Prime Number** if the number is prime. Otherwise, print **Not a Prime Number**.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing a string. **Prime Number** should be printed if `N` is a Prime Number. Otherwise, **Not a Prime Number** should be printed.

---

#### Explanation

For example, if the given number is `N = 13`,

- The factors of **13** are **1** and **13**.
- The number **13** is a prime number as it has only **2** factors.

The output should be **Prime Number**.

Solution Code:def is_prime(number):
 no_of_factors = 0
 
 for i in range(1, number + 1):
 if (number % i == 0):
 no_of_factors += 1
 
 if no_of_factors == 2:
 return ""Prime Number""
 else:
 return ""Not a Prime Number""


number = int(input())
result = is_prime(number)
print(result)"
58bc4b7c-7a7f-4cd5-834c-a4e9207b48e9,"Given a list of integers, write a program to square the elements in the given list.<hr><b>Input</b><br/><br/>The input will be a single line containing comma-separated integers.<hr><b>Output</b><br/><br/>The output should be a single line containing a list by squaring the elements.<hr><b>Explanation</b><br/><br/>For example, if the given string is the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">1,2,3,4
</code></pre><br/>Print the list by squaring the elements in the list. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[1, 4, 9, 16]
</code></pre>

Solution Code:def get_list(string_a):
 list_a = string_a.split(',')
 len_list_a = len(list_a)
 for i in range(len_list_a):
 list_a[i] = int(list_a[i])**2
 return list_a


string_a = input()
numbers_list = get_list(string_a)
print(numbers_list)"
cbbcf015-67d5-4f36-8cc1-a706414a6c34,"You are given a string `S` as input, write a program to print the string after reversing the words of the given sentence.

---

#### Input

The first line of input is a string `S`.



---

#### Explanation

In the given example, the sentence `This is Python` contains `3` words. When reversing, the word `Python` comes to the starting of the sentence, and `This` goes to the last of the sentence. The word `is` remains in the same position. 


So the output should be `Python is This`.

Solution Code:sentence = input()
sentence_list = sentence.split()

reverse_sentence = """"
for i in sentence_list:
    reverse_sentence = i + "" "" + reverse_sentence
print(reverse_sentence)"
245469dc-5d31-42ad-a7fe-e3f82b4a5e6f,"You are given a space-separated list of integers as input. Write a program to print the product of these numbers. 

---

#### Input

The first line of input contains space-separated integers.

---

#### Explanation

In the example, there are `6` numbers, `1, 2, 3, 4, 5, 6`.

The product of list elements is `1 x 2 x 3 x 4 x 5 x 6`
So, the output should be `720`.

Solution Code:numbers = input()
numbers_list = numbers.split()
product = 1 
for number in numbers_list:
    product = product * int(number)
print(product)"
37f54f25-f564-491a-a7a9-5c3d5c559934,"Given space-separated numbers, write a program to print the **Smallest number** among the given numbers.

---

#### Input

The input will be a single line containing space-separated integers.

---

#### Output

The output should be a single line containing an integer that is the smallest number among the given space-separated integers.

---

#### Explanation

For example, if the given numbers are `54 10 15 24 7 12`,

- The smallest number among **54**, **10**, **15**, **24**, **7**, and **12** is **7**.

The output should be **7**.

Solution Code:numbers = input()

numbers_list = numbers.split()

smallest_number = int(numbers_list[0])

for number in numbers_list:
 number = int(number)

 if number < smallest_number:
 smallest_number = number

print(smallest_number)"
0ae33740-b77e-442b-a5ce-d8d57fd8e363,"Given a sentence `S`. The words in the sentence `S` are separated by a space. 

Write a program that prints a new string by joining the third letter of each word in the sentence with the comma(`,`).

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a string obtained by joining the third letter of each word in the sentence with the comma(`,`).

---

#### Explanation

For example, if the given sentence is `S = ""Being More Productive""`,

- The words in the sentence **""Being More Productive""** are **""Being""**, **""More""**, and **""Productive""**.
- The **3rd** letter in the word **""Being""** is **i**.
- The **3rd** letter in the word **""More""** is **r**.
- The **3rd** letter in the word **""Productive""** is **o**.
- After joining the **3rd** letter of each word in the sentence with the comma(`,`) is **i,r,o**.

The output should be,

```
i,r,o
```


Solution Code:sentence = input()

string_list = sentence.split()

result = []

for word in string_list:
 if (len(word) > 2):
 character = word[2]
 result += [character]

character_joined_by_comma = "","".join(result)

print(character_joined_by_comma)"
5d0f8f4d-2a0f-4c4d-bb6b-c659c14198fa,"Given a sentence `S`. The words in the sentence `S` are separated by a space.

Write a program that prints a list containing the words in the sentence.

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a list that has the words in the given sentence `S`.

---

#### Explanation

For example, if the given sentence is `S = ""Knowledge is power""`,

- The words in the sentence **""Knowledge is power""** are **""Knowledge""**, **""is""**, and **""power""**.

The output should be,

```
['Knowledge', 'is', 'power']
```

Solution Code:sentence = input()

words_list = sentence.split()

print(words_list)"
43b9012b-7928-40ff-be52-9fb466745491,"Given space-separated numbers, write a program to print a list containing the given numbers that are divisible by **3** 

---

#### Input

The input will be a single line containing space-separated integers.

---

#### Output

The output should be a single line containing a list of given integers that are divisible by **3**.

---

#### Explanation

For example, if the given numbers are `3 10 9 11 18 20`,

- The given numbers are **3**, **10**, **9**, **11**, **18**, and **20**.
- The numbers divisible by **3** from the given numbers are **3**, **9**, and **18**.

The output should be,

```
[3, 9, 18]
```

Solution Code:numbers = input()

numbers_list = numbers.split()

divisible_by_3_list = []

for number in numbers_list:
 number = int(number)

 if number % 3 == 0:
 divisible_by_3_list += [number]

print(divisible_by_3_list)"
10865336-765b-45f1-b6ea-dea2a2ebb41b,"Given space-separated numbers, write a program to print a list containing the given numbers

---

#### Input

The input will be a single line containing space-separated integers.

---

#### Output

The output should be a single line containing a list of given integers.

---

#### Explanation

For example, if the given space-separated numbers are `10 20 30 40 50`,

The output should be,

```
[10, 20, 30, 40, 50]
```

Solution Code:numbers = input()

numbers_list = numbers.split()

resultant_list = []

for number in numbers_list:
 number = int(number)

 resultant_list += [number]

print(resultant_list)"
c3d3067c-c2d9-4c95-a3ea-6af4a54af55d,"Given a sentence `S`. The words in the sentence `S` are separated by a space. 

Write a program that prints a string by joining the words in the sentence `S` with the dot(`.`).

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a string obtained by joining the words in the sentence `S` with the dot(`.`).


---

#### Explanation

For example, if the given sentence is `S = ""This is a program""`,

- Words in `S` are **This, is, a, program**
- After joining the words in the sentence `S` with the dot(`.`) is **This.is.a.program**.

The output should be,

```
This.is.a.program
```


Solution Code:string = input()

words_list = string.split()
words_joined_by_dot = ""."".join(words_list)

print(words_joined_by_dot)"
a8e71956-15d0-4eab-a60e-83ef2fdb6382,"Given space-separated numbers.

Write a program that prints a string by joining the given space-separated numbers with the comma(`,`).

---

#### Input

The input will be a single line containing space-separated integers.

---

#### Output

The output should be a single line containing a string obtained by joining the given space-separated numbers with the comma(`,`).

---

#### Explanation

For example, if the given numbers are `24 45 86 57 88`,

- Given number are **24**, **45**, **86**, **57** and **88**.
- After joining numbers with a comma (`,`) is **24,45,86,57,88**.

The output should be,

```
24,45,86,57,88
```


Solution Code:numbers = input()

numbers_list = numbers.split()
numbers_joined_by_comma = "","".join(numbers_list)

print(numbers_joined_by_comma)"
95cb7b48-29c3-4ca8-973d-1b8a8bb7bec4,"Given a list of N words, write a program to print each word in a line.<hr><b>Input</b><br/><br/>The first line of input will contain space-separated words, denoting the elements of the list.<hr><b>Output</b><br/><br/>The output should be N lines containing each word in a new line in the given order.<br/><hr><b>Explanation</b><br/><br/>For example, if the given sentence is the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">Banana Apple Pomegranate Strawberry Grapes Orange
</code></pre><br/>Your code should print each word in a new line. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">Banana
Apple
Pomegranate
Strawberry
Grapes
Orange
</code></pre>

Solution Code:sentence = input()
words_list = sentence.split()
for word in words_list:
 print(word)"
d5f6d22e-ee05-4f8e-b4b9-776e23046f3d,"Given a list of numbers, write a program to print the sum of the numbers in the list.<hr><b>Input</b><br/><br/>The first line of input will contain space-separated integers, denoting the elements of the list.<hr><b>Output</b><br/><br/>The output should be a single line containing the sum of the integers in the given list.<hr><b>Explanation</b><br/><br/>For example, if the given string is the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">2 5 10 -15 3
</code></pre><br/>Your code should print the sum of the given list elements. So the output should be 5.

Solution Code:numbers = input()
num_list = numbers.split()

list_sum = 0
for number in num_list:
 list_sum = list_sum + int(number)

print(list_sum)"
b7ddfcf9-ec98-4ae0-8936-8c08d9a8ab5e,"A function is given in the prefilled code that takes a number `N` as an argument.

Write a program that checks if `N` is between **200** and **500**.

Print **Yes** if `N` is between **200** and **500**. Otherwise, print **No**.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing a string. **Yes** should be printed if the given number `N` is between **200** and **500**. Otherwise, **No** should be printed by calling the given function.

---

#### Explanation

For example, if the given number is `N = 280`,

- The number **280** is between **200** and **500** (`200 < 280 < 500`).

The output should be **Yes**.

Solution Code:def is_between_200_and_500(number):

 if number > 200 and number < 500:
 print(""Yes"")
 else:
 print(""No"")
 

number = int(input())

is_between_200_and_500(number)"
f8e1bf58-5a40-42fd-840d-10f9e63fb94c,"A function is given in the prefilled code that takes a number `N` as an argument.

Write a program to print the numbers from **1** to the given number `N`, each on a new line.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be `N` lines containing integers from **1** to the given number `N` that is passed as an argument to the function, each on a new line.

---

#### Explanation

For example, if the given number is `N = 4`,

- The numbers from **1** to **4** are **1**, **2**, **3**, and **4**.

The output should be,

```
1
2
3
4
```

Solution Code:def print_numbers(number):
 
 for each_number in range(1, number + 1):
 print(each_number)

number = int(input())

print_numbers(number)"
7e62936d-8396-4eba-8ced-6393b181019b,"A function is given in the prefilled code that takes the word `S` as an argument.

Write a program that reads a word `S` and print the given word by calling the function.

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a string that is passed as an argument to the function.

---

#### Explanation

For example, if the given word is `S = ""Javascript""`,

- The word **Javascript** should be passed as an argument.

The output should be **Javascript**.

Solution Code:def print_arg(string):
 
 print(string)

string = input()

print_arg(string)"
31d802bf-e907-4d30-820b-9380fc869425,"Write a function with the name show_numbers that takes a number (N) and print all the numbers from 0 to N with a label to identify the even and odd numbers as shown below<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">0 EVEN
1 ODD
2 EVEN
3 ODD
</code></pre><hr><b>Input</b><br/><br/>The input will be a single line containing a positive integer.<hr><b>Output</b><br/><br/>The output should be N+1 lines containing a number with a label in each line.<hr><b>Explanation</b><br/><br/>For example, if the given input is 3, the output should be 4 lines as shown below<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">0 EVEN
1 ODD
2 EVEN
3 ODD
</code></pre>

Solution Code:def show_numbers(number):
 for i in range(number+1):
 if (i % 2) == 0:
 print(str(i) + "" EVEN"")
 else:
 print(str(i) + "" ODD"")


number = int(input())
show_numbers(number)"
aa30273b-f35c-4b4e-8d26-51e36f6ea0ce,"Write a function with the name get_discount that takes the bill amount as an argument.<br/> - If the bill amount is less than 500, the discount should be &quot;5%&quot;.<br/> - If the bill amount is greater than or equal to 500 and less than 2500, the discount should be &quot;10%&quot;.<br/> - If the bill amount is greater than or equal to 2500, the discount should be &quot;20%&quot;.<hr><b>Input</b><br/><br/>The input will be a single line containing a positive integer.<hr><b>Output</b><br/><br/>The output should be a single line containing the discount according to the above conditions.<hr><b>Explanation</b><br/><br/>For example, if the given bill amount is 1500, the output should be &quot;10%&quot;, as it is greater than 500 and less than 2500<br/><br/>For example, if the given bill amount is 250, the output should be &quot;5%&quot;, as it is less than 500

Solution Code:def get_discount(amount):
 if amount < 500:
 discount = ""5%""
 elif (amount >= 500) and (amount < 2500):
 discount = ""10%""
 else:
 discount = ""20%""
 return discount


amount = int(input())
result = get_discount(amount)
print(result)"
a1e10585-139f-4d77-8eb9-e5e817eccf73,"For this problem, the prefilled code will contain a function. Write a program that the given function will multiply the number N with three.<hr><b>Input</b><br/><br/>The first line of input will contain an integer (N).<hr><b>Output</b><br/><br/>The output should be a single line containing given number multiplied by three.<hr><b>Explanation</b><br/><br/>For example, if the given N is 2, the function should print the N multiplied by 3. So the output should be 6.

Solution Code:def multiply_with_three(arg_1):
 result = arg_1*3
 print(result)


n = int(input())
multiply_with_three(n)"
36c8a40b-2367-4dcb-aba7-3e8d96ba1754,"For this problem, the prefilled code will contain a function. Write a program that the given function will check if the number N is divisible by 7.<hr><b>Input</b><br/><br/>The first line of input will contain an integer (N).<hr><b>Output</b><br/><br/>The output should be a single line containing either &quot;True&quot; or &quot;False&quot;.<hr><b>Explanation</b><br/><br/>For example, if the given N is 14, the output should be &quot;True&quot;, as 14 is divisible is seven.

Solution Code:def divisible_by_seven(arg_1):
 remainder = arg_1 % 7
 if remainder == 0:
 result = True
 else:
 result = False
 print(result)


n = int(input())
divisible_by_seven(n)"
999f6c80-e2c0-46ae-af51-031de956477c,"For this problem, the prefilled code will contain a function. Write a program to concatenate the message &quot;Welcome &quot; followed by the given name.<hr><b>Input</b><br/><br/>The first line of input will contain a string.<hr><b>Output</b><br/><br/>The output should be a single line containing the welcome message.<hr><b>Explanation</b><br/><br/>For example, if the given name is &quot;Preethi&quot;, your code should concatenate the message &quot;Welcome &quot; followed by the name. So the output should be <br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">Welcome Preethi
</code></pre>

Solution Code:def say_wishes(arg_1):
 wishes = ""Welcome "" + arg_1
 print(wishes)


name = input()
say_wishes(name)"
55882392-774d-4087-ab91-19d60bf8acbb,"Write a function with the name fizz_buzz that takes a number as an argument.<br/> - If the number is divisible by 3, it should return “Fizz”.<br/> - If it is divisible by 5, it should return “Buzz”.<br/> - If it is divisible by both 3 and 5, it should return “FizzBuzz”.<br/> - Otherwise, it should return the same number.<hr><b>Input</b><br/><br/>The first line of input will contain an integer.<hr><b>Output</b><br/><br/>The output should be a single line containing the word according to the above conditions.<hr><b>Explanation</b><br/><br/>For example, if the given number is 20, the output should be &quot;Buzz&quot;, as 20 is divisible by 5 and not divisible by 3.<br/><br/>Whereas the given number is 7, the output should be 7, as 7 is not divisible by neither 3 nor 5.

Solution Code:def fizz_buzz(number):
    # Complete this function
    if (((number%3)==0) and ((number%5)==0)) :
        msg = ""FizzBuzz""
    elif ((number%3)==0) :
        msg = ""Fizz""
    elif ((number%5)==0) :
        msg = ""Buzz""
    else:
        msg = number
    return msg

number = int(input())
# Call the fizz_buzz function
result = fizz_buzz(number)
print(result)"
71679a89-37f0-4dc9-826e-055184bc63c0,"Given space-separated words, write a program to check if the first letter and last letter of each word are the same.

<MultiLineNote>
Consider both uppercase and lowercase letters as the same.
</MultiLineNote>

---

#### Input

The input will be a single line containing space-separated strings.

---

#### Output

The output should contain boolean values. For each word, **True** should be printed if the first and last letter are the same. Otherwise, **False** should be printed.

---

#### Explanation

For example, if the given space-separated words are `""water Noon river""`,

- The given words are **""water""**, **""Noon""**, and **""river""**.
- In the word **""water""**, the first letter (**w**) and the last letter (**r**) are different.
- In the word **""Noon""**, the first letter (**N**) and the last letter (**n**) are same. 
- In the word **""river""**, the first letter (**r**) and the last letter (**r**) are same.

The output should be,

```
False
True
True
```

Solution Code:words = input().split()

for each_word in words:
 each_word = each_word.lower()

 first_letter = each_word[0]
 last_letter = each_word[-1]

 if first_letter == last_letter:
 print(""True"")
 else:
 print(""False"")"
51af5180-5ece-43bc-b012-cb3fe1f54dd6,"Given a sentence `S`, write a program to print the reverse of the sentence.

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a string obtained by reversing the sentence `S`.

---

#### Explanation

For example, if the given sentence is `S = ""I am learning Python""`,

- The reverse of the sentence **""I am learning Python""** is **""nohtyP gninrael ma I""**.

The output should be **nohtyP gninrael ma I**.


Solution Code:sentence = input()

reversed_sentence = sentence[::-1]

print(reversed_sentence)"
8c5d16e5-8636-44b5-9912-15d57f211c55,"Given space-separated words `S` and a number `N`. Write a program that creates a list using space-separated words and prints the last `N` words of the list in reverse order.

---

#### Input

The first line of input contains a string representing `S`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing a list that has the last `N` words of `S` in reverse order.

---

#### Explanation

For example, if the given sentence is `S = ""This is my favourite cookie""`, and the number is `N = 4`,

- The words in the `S` are **This, is, my, favourite, cookie**.
- The last **4** words in `S` are **""is""**, **""my""**, **""favourite""** and **""cookie""**.
- The reverse order of the last **4** words is **""cookie""**, **""favourite""**, **""my""**, and **""is""**.

The output should be,

```
['cookie', 'favourite', 'my', 'is']
```

Solution Code:sentence = input()
number = int(input())

words = sentence.split()

words_list = words[-number:]
resultant_list = words_list[::-1]

print(resultant_list)"
3e96d669-eed8-4372-b593-80c764227c72,"Given space-separated words, write a program that creates a list using space-separated words and prints the first half of the words in the list as a new list.

<MultiLineNote>
If the given number of words is an odd number, add one to it such that it becomes an even number and count half of the number of words.
</MultiLineNote>

---

#### Input

The input will be a single line containing space-separated strings.

---

#### Output

The output should be a single line containing a list of first half of the words.

---

#### Explanation

For example, if the given words are **""apple mango orange grapes kiwi""**.

- Given **5** words are **""apple""**, **""mango""**, **""orange""**, **""grapes""**, and **""kiwi""**.
- Half of the given **5** words are **3** words **""apple""**, **""mango""**, and **""orange""**.

The output should be,

```
['apple', 'mango', 'orange']
```

Solution Code:words = input().split()

words_length = len(words)

if words_length % 2 == 0:
 half_list_length = words_length // 2
else:
 half_list_length = (words_length // 2) + 1

new_list=words[:half_list_length]

print(new_list)"
0023e2bb-df58-42ee-bbcf-f0d8d80faedc,"Given two lists of equal lengths (N), write a program to iterate both lists simultaneously such that the first list should display the item in original order and the second list in reverse order.<hr><b>Input</b><br/><br/>The first line of input will contain comma-separated integers.<br/>The second line of input will contain comma-separated integers.<hr><b>Output</b><br/><br/>The output should be N rows and 2 columns, the first column should contain the elements of the first list in the original order, and the second column should contain the elements of the second list in the reverse order.<hr><b>Explanation</b><br/><br/>For example, if the given two lists are the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">1,2,3
4,5,6
</code></pre><br/>Print the elements in such a way that the elements of the first list are printed in original order, and the elements of the second list are printed in reverse order. So the output should be as shown below<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">1 6
2 5
3 4
</code></pre>

Solution Code:list_a = input().split("","")
list_b = input().split("","")

len_of_list_a = len(list_a)
n = len_of_list_a - 1

for i in range(len_of_list_a):
 num_1 = list_a[i]
 num_2 = list_b[n-i]
 result = str(num_1) + "" "" + str(num_2)
 print(result)"
70a0473b-33dc-409a-adec-d8f2698ff83f,"Given a list of words, write a program to reverse the words in the list.<hr><b>Input</b><br/><br/>The first line of input will contain space-separated words, denoting the elements of the list.<hr><b>Output</b><br/><br/>The output should be a single line containing a list with the elements in reverse order.<hr><b>Explanation</b><br/><br/>For example, if the given sentence is the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">Banana Apple Pomegranate Strawberry Grapes Orange
</code></pre><br/>Your code should print the list by reversing the words in the given sentence. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">['Orange', 'Grapes', 'Strawberry', 'Pomegranate', 'Apple', 'Banana']
</code></pre>

Solution Code:sentence = input()
words_list = sentence.split()

reverse_words_list = words_list[::-1]
print(reverse_words_list)"
fe300df5-86e9-40b4-94a5-a4d0a543367a,"Given a sentence, write a program to reverse the letters in words of the sentence.<hr><b>Input</b><br/><br/>The first line of input will contain a string.<hr><b>Output</b><br/><br/>The output should be a single line containing the sentence by reversing all the letters in words.<br/>Note: The order of the words in the modified sentence should be the same as in the given sentence.<hr><b>Explanation</b><br/><br/>For example, if the given sentence is the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">The cat is on the mat.
</code></pre><br/>Print the sentence by reversing the letters in words without changing the order of the words in the sentence. So the output should be <br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">ehT tac si no eht .tam
</code></pre>

Solution Code:sentence = input()
words_list = sentence.split()

modified_sentence = []
for word in words_list:
 modified_sentence += [word[::-1]]

reversed_letters_sentence = "" "".join(modified_sentence)
print(reversed_letters_sentence)"
53aeaf74-40b9-4078-9b74-70545dfe481a,"A function is given in prefilled code that takes a string `S` as an argument.

Write a program that prints the count of uppercase letters in the given string `S`.

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing an integer that is the count of uppercase letters in the given string `S`.

---

#### Explanation

For example, if the given string is `S = ""eXpLoRe""`,

- The letters in the given string **""eXpLoRe""** are **e**, **X**, **p**, **L**, **o**, **R**, and **e**.
- The uppercase letters in the string **""eXpLoRe""** are **X**, **L**, and **R**.
- The count of uppercase letters in the given string is **3**.

The output should be **3**.


Solution Code:def count_of_uppercase(word):
 count = 0
 
 for each_letter in word:
 is_upper_letter = each_letter.isupper()
 
 if is_upper_letter:
 count += 1
 
 return count

word = input()

result = count_of_uppercase(word)

print(result)"
510eec7d-37d9-4dee-9834-00c187a73c9f,"Write a function with the name count_the_vowels that takes a word as an argument and count the number of vowels in the given word.<br/>The letters (a, e, i, o, u) are considered as vowels.<hr><b>Input</b><br/><br/>The input will be a single line containing a string.<br/>Note: The input word will contain only lowercase letters.<hr><b>Output</b><br/><br/>The output should be a single line containing the count of vowels in the given word.<hr><b>Explanation</b><br/><br/>For example, if the given word is &quot;suggestions&quot;, the vowels in the given word are (u, e, i, o). So the output should be 4.

Solution Code:def count_the_vowels(word):
 count = 0
 for letter in word:
 is_a = letter == 'a'
 is_e = letter == 'e'
 is_i = letter == 'i'
 is_o = letter == 'o'
 is_u = letter == 'u'
 is_vowel = ((((is_a or is_e) or is_i) or is_o) or is_u)
 if is_vowel:
 count += 1
 return count


word = input()
result = count_the_vowels(word)
print(result)"
68e8ff32-2ab4-4e12-8c15-3125f079ba8f,"Write a function with the name get_weather_report that takes the temperature as an argument.<br/> - If the temperature is less than 22, it should return &quot;Cold&quot;.<br/> - If the temperature is greater than or equal to 22 and less than 35, it should return &quot;Warm&quot;.<br/> - If the temperature is greater than or equal to 35, it should return &quot;Hot&quot;.<hr><b>Input</b><br/><br/>The input will be a single line containing an integer.<hr><b>Output</b><br/><br/>The output should be a single line containing the weather report according to the above conditions.<hr><b>Explanation</b><br/><br/>For example, if the given temperature is 37, the output should be &quot;Hot&quot;, as it is greater than 35.

Solution Code:def get_weather_report(temperature):
 if temperature < 22:
 report = ""Cold""
 elif (temperature >= 22) and (temperature < 35):
 report = ""Warm""
 else:
 report = ""Hot""
 return report


temperature = int(input())
result = get_weather_report(temperature)
print(result)"
ffb2a68c-a11e-4f8c-a71a-b0c8a3f81c86,"For this problem, the prefilled code will contain a function. Write a program to return the value passed to the function.<hr><b>Input</b><br/><br/>The first line of input will contain an integer.<hr><b>Output</b><br/><br/>The output should be a single line containing the value returned by the function.<hr><b>Explanation</b><br/><br/>For example, if the given integer is 20, the output should be 20, as the function returns the same value.

Solution Code:def func(arg_1):
 return arg_1


n = int(input())
result = func(n)
print(result)"
da2f6c1b-1119-487a-b563-be7ddefad486,"For this problem, the prefilled code will contain a function. Write a program that the given function will return the second character in the word passed to the function.<hr><b>Input</b><br/><br/>The first line of input will contain a string.<hr><b>Output</b><br/><br/>The output should be a single line containing the second character of the given word.<hr><b>Explanation</b><br/><br/>For example, if the given word is &quot;MATHS&quot;, your code should print the second character in the given word, which is &quot;A&quot;.

Solution Code:def second_character(arg_1):
 character = arg_1[1]
 return character


word = input()
result = second_character(word)
print(result)"
44552117-c70b-49a5-a69c-e7b8d3e3935d,"Write a function with name sum_of_cubes_m_to_n that takes two integers (M and N) and sum the cubes from M to N.<hr><b>Input</b><br/><br/>The first line of input will contain an integer (M).<br/>The second line of input will contain an integer (N).<hr><b>Output</b><br/><br/>The output should be a single line containing the sum of the cubes from M to N.<hr><b>Explanation</b><br/><br/>For example, if the given M is 3 and N is 5, the sum of cubes of 3, 4 and 5 is 216. So the output should be 216.

Solution Code:def sum_of_cubes_m_to_n(m, n):
    sum_of_cubes=0
    for i in range(m,n+1):
        sum_of_cubes+=i**3 
    print(sum_of_cubes)

m = int(input())
n = int(input())
sum_of_cubes_m_to_n(m,n)"
ca23a4ce-1362-446c-9adc-515758d054f8,"Write a function with the name calculate_league_points that takes the number of wins, draws, and losses and calculates the number of points a football team has obtained so far.<br/><br/> - Each win is equal to 4 points<br/> - Each draw is equal to 2 points<br/> - Each loss is equal to -1 point<hr><b>Input</b><br/><br/>The input will be a single line containing comma-separated integers in the order of the number of wins, draws, and losses.<hr><b>Output</b><br/><br/>The output should be a single line containing the total number of points, a football team has obtained so far.<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;4,1,2&quot;, which denotes that 4 is the number of wins, 1 is the number of draws, and 2 is the number of losses. As each win adds 4 points, each draw adds 2 points and each loss deducts 1 point, the total points of a team is the sum of all the points. So the output should be 16.

Solution Code:def calculate_league_points(wins, draws, losses):
    sum_of_all = (wins * 4) + (draws * 2) - (losses * 1)
    print(sum_of_all)
    
statistics = input().split("","")
wins = int(statistics[0])
draws = int(statistics[1])
losses = int(statistics[2])
calculate_league_points(wins, draws, losses)"
a78be0b1-2926-404c-94ce-e723ba1a4174,"Write a function with name sum_of_squares_m_to_n that takes two integers (M and N) and sum the squares from M to N.<hr><b>Input</b><br/><br/>The first line of input will contain an integer (M).<br/>The second line of input will contain an integer (N).<hr><b>Output</b><br/><br/>The output should be a single line containing the sum of the squares from M to N.<hr><b>Explanation</b><br/><br/>For example, if the given M is 3 and N is 5, the sum of squares of 3, 4 and 5 is 50. So the output should be 50.

Solution Code:def sum_of_squares_m_to_n(m, n):
 total = 0
 for i in range(m, n+1):
 total += (i**2)
 return total


m = int(input())
n = int(input())
result = sum_of_squares_m_to_n(m, n)
print(result)"
e27c03ad-c991-4cc4-aad2-526a379fab27,"A function is given in the prefilled code that takes three numbers `N1`, `N2`, and `N3` as arguments.

Write a program that returns **True** if atleast one of the given numbers `N1`, `N2`, and `N3` is divisible by **9**. Otherwise, return **False**.


---

#### Input

The first line of input contains an integer representing `N1`.
The second line of input contains an integer representing `N2`.
The third line of input contains an integer representing `N3`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if one of the numbers `N1`, `N2`, and `N3` is divisible by **9**. Otherwise, **False** should be printed.

---

#### Explanation

For example, if the given numbers are `N1 = 3`, `N2 = 9`, and `N3 = 16`,

✘ The number **3** is **not** divisible by **9**. (`3 % 9 = 3`)
✔ The number **9** is divisible by **9**. (`9 % 9 = 0`)
✘ The number **16** is **not** divisible by **9**. (`16 % 9 = 7`)

The output should be **True**, as one of the numbers is divisible by **9**.


Solution Code:def check_divisible_by_9(first_number, second_number, third_number):
 is_divisible_by_9 = ((first_number % 9 == 0) or (second_number % 9 == 0) or (third_number % 9 == 0))

 return is_divisible_by_9
 
first_number = int(input())
second_number = int(input())
third_number = int(input())

result = check_divisible_by_9(first_number, second_number, third_number)

print(result)"
ac9659d1-f30b-4c25-b21d-b2f64af53219,"A function is given in the prefilled code that takes two numbers `A` and `B` as arguments.

Write a program that compares the scores of `A` and `B`.

Return **""Win""** if `A` is greater than `B`.
Return **""Draw""** if `A` and `B` are equal.
Return **""Lose""** if `A` is less than `B`.

---

#### Input

The first line of input contains an integer representing `A`.
The second line of input contains an integer representing `B`.

---

#### Output

The output should be a single line containing a string. **Win** should be printed if `A` is greater than `B`. **Draw** should be printed if `A` is equal to `B`. **Lose** should be printed if `A` is less than `B`.

---

#### Explanation

For example, if the given numbers are `A = 10` and `B = 6`,

 ✔ `A` is greater than `B`. (**10** is greater than **6**)
 ✖ `A` is equal to `B`. (**10** is **not** equal to **6**)
 ✖ `A` is less than `B`. (**10** is **not** less than **6**)

The output should be **Win**.
<br>
For example, if the given numbers are `A = 70` and `B = 95`,

 ✖ `A` is greater than `B`. (**70** is **not** greater than **95**)
 ✖ `A` is equal to `B`. (**70** is **not** equal to **95**)
 ✔ `A` is less than `B`. (**70** is less than **95**)

The output should be **Lose**.


Solution Code:def compare(team_a_points, team_b_points):
 if team_a_points > team_b_points:
 result = ""Win""
 
 elif team_a_points == team_b_points:
 result = ""Draw""
 
 else:
 result = ""Lose""
 
 return result

team_a_points = int(input())
team_b_points = int(input())

compare_result = compare(team_a_points, team_b_points)

print(compare_result)"
88ff0c48-d634-4263-975e-cd3f1e4b4c55,"A function is given in the prefilled code that takes two numbers `M` and `N` as arguments.

Write a program that returns **True** if both the `M` and `N` are greater than **100** and `M` is less than `N`.. Otherwise, return **False**.

---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing a boolean. **True** should be printed if both the `M` and `N` are greater than **100** and `M` is less than `N`. Otherwise, **False** should be printed.

---

#### Explanation

For example, if the given numbers are `M = 105` and `N = 120`,

✔ The numbers **105** and **120** are greater than **100**.
✔ The number **105** is less than the number **120**.

The output should be **True**.


Solution Code:def compare_numbers(first_number, second_number):
    greater_than_100 = (first_number > 100) and (second_number > 100)
    is_less = first_number < second_number
    
    if greater_than_100 and is_less:
        is_valid = True
    else:
        is_valid = False
    
    return is_valid

first_number = int(input())
second_number = int(input())

result = compare_numbers(first_number, second_number)

print(result)"
fb47e69f-378b-42c7-8615-f0f9749a523b,"A function is given in the prefilled code that takes two numbers `M` and `N` as arguments.

Write a program to print all the odd numbers from `M` to `N` separated by a space.

---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing a string of odd numbers from `M` to `N` separated by a space.

---

#### Explanation

For example, if the given numbers are `M = 2` and `N = 7`,

- The odd numbers from **2** to **7** are **3**, **5**, and **7**.

The output should be **3 5 7**.

Solution Code:def get_odd_numbers_in_range(start_number, end_number):

 odd_numbers_list = []

 for each_number in range(start_number, end_number + 1):
 if each_number % 2 == 1:
 odd_numbers_list += [str(each_number)]
 
 space_separated_odd_numbers = "" "".join(odd_numbers_list)

 return space_separated_odd_numbers

start_number = int(input())
end_number = int(input())

odd_numbers = get_odd_numbers_in_range(start_number, end_number)

print(odd_numbers)"
6bd7ea79-2578-4de9-9bcc-6c22b1782720,"For this problem, the prefilled code will contain a function. Write a program that the given function will return the character present at the index N in the word W. <hr><b>Input</b><br/><br/>The first line of input will contain a string (W).<br/>The second line of input will contain a positive integer (N).<hr><b>Output</b><br/><br/>The output should be a single line containing the character present at the index N in the word W. <hr><b>Explanation</b><br/><br/><br/>For example, if the given word W is <code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;background-color: rgba(0,0,0,.05);border-radius: 3px;padding: 2px 4px;"">Chocolate</code> and the integer N is 2. Since the index starts from zero. The character present at index 2 is <code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;background-color: rgba(0,0,0,.05);border-radius: 3px;padding: 2px 4px;"">o</code>

Solution Code:def indexing(arg_1, arg_2):
 character = arg_1[arg_2]
 return character


word = input()
index = int(input())
result = indexing(word, index)
print(result)"
769dec92-aec5-4e6a-ac60-b3d8f52700d5,"Given a number `N`, write a program to read `N` inputs and print the numbers that are multiples of **3** among the given `N` inputs.

---

#### Input

The first line of input contains an integer representing `N`.
The next `N` lines of input contain integers.

---

#### Output

The output should contain the numbers that are multiples of **3** among the given `N` inputs, each on a new line.

---

#### Explanation

For example, if the given number is `N = 6`,

- The given **6** numbers are,

```
1
2
3
5
9
6
```

- The multiples of **3** among the given numbers are **3**, **9** and **6**.

The output should be,

```

3
9
6

```

Solution Code:number=int(input())

for each in range(1,number+1):
    i=int(input())
    if i % 3 ==0:
        print(i)"
3bfda322-c4b6-41bd-80e8-6099b24778bf,"Given a sentence `S` containing space-separated words, write a program to print the first word among the words in the sentence `S`.

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a string that is the first word in the given sentence `S`.

---

#### Explanation

For example, if the given sentence is `S = ""Chasing rainbows""`,

- The given sentence **""Chasing rainbows""** has two words **""Chasing""** and **""rainbows""**.
- The first word in the sentence **""Chasing rainbows""** is **""Chasing""**.

The output should be **Chasing**.


Solution Code:string = input()

first_word = """"

for char in string:
 if char == "" "":
 break
 else:
 first_word = first_word + char
 
print(first_word)"
1983bb63-991a-4512-8c1d-c779b2f6c5b6,"Given a number `N`, write a program to print the largest factor of `N` that is less than the number `N`.

<MultiLineNote>

**Factors of N:**

If a number `N` is divisible by `X`, then `X` is a factor of `N`.

**Example:**

If `N = 15` and `X = 3`, then **3** is a factor of **15** as **15** is divisible by **3**.

If `N = 15` and `X = 7`, then **7** is **not** a factor of **15** as **15** is not divisible by **7**.

</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the largest factor of `N` that is less than the number `N`.

---

#### Explanation

For example, if the given number is `N = 8`,

- The factors of `8` are **1**, **2**, **4**, and **8**.
- The largest factor of `8` that is less than **8** is **4**.

The output should be **4**.


Solution Code:number = int(input())

for each_number in range(1, number):
 if number % each_number == 0:
 largest_factor = each_number
 
print(largest_factor)"
7f1a4cb9-74f2-427a-8de0-9f481772dd7f,"Given a number `N`, write a program that reads `N` inputs and prints the first negative number among the `N` inputs.

---

#### Input

The first line of input contains an integer representing `N`.
The next `N` lines of input contain integers.

---

#### Output

The output should be a single line containing an integer that is the first negative number among the given `N` inputs.

---

#### Explanation

For example, if the given number is `N = 5`,

- The given **5** numbers are,

```
  8
 11
-96
 49
-25
 ```
- Negative numbers in the given numbers are **-96** and **-25**.
- The first negative number among the given numbers is **-96**.

The output should be **-96**.

Solution Code:n = int(input())
for i in range(n):
 number = int(input())
 if number < 0:
 print(number)
 break"
40f28d8d-7170-40d7-9556-708e54596868,"Given a string `S`, write a program to print the uppercase letter that appears first in the string `S`.

---

#### Input

The input will be a single line containing a string representing `S`.

---

#### Output

The output should be a single line containing a string representing uppercase letter that appears first in the string `S`.

---

#### Explanation

For example, if the given string is `S = superHeroeS`,

- The uppercase letters in the string **""superHeroeS""** are **""H""** and **""S""**.
- The first uppercase letter that appears first in the string **""superHeroeS""** is **""H""**.

The output should be **H**.

Solution Code:s = input()

for character in s:
    if character.isdigit():
        continue
    else:
        if character.upper() == character:
                print(character)
                break"
3482d57c-67fd-46cc-9d11-6b3aeedd6c32,"Given a number `N`. Write a program to check if the given number is a **Prime Number**. Print **True** if the given number is a **Prime Number**. Otherwise, print **False**.

<MultiLineNote>
- A **Prime Number** is a positive integer greater than **1** that has no factors other than **1** and itself.
- A factor of a number is a positive integer that divides the number exactly, leaving no remainder.
</MultiLineNote>

---

#### Input 

The input will be a single line containing an integer representing `N`.

---

#### Output 

The output should be a single line containing a boolean. **True** should be printed if `N` is a prime number. Otherwise **False** should be printed.

---

#### Explanation 

For example, if the given number is `N = 22`,

- The factors of the number **22** are **1**, **2**, **11** and **22**.
- The number **22** has factors other than **1** and **22**(`2, 11`).

The output should be **False**.

Solution Code:n = int(input())

if n > 1:
 is_prime = True
else:
 is_prime = False

for i in range(2, n):
 if (n % i) == 0:
 is_prime = False
 break

print(is_prime)"
f68a86b5-a61e-4db8-82a2-448e58887519,"Given a sentence `S`, write a program to print a new sentence by changing all letters of the first word in the sentence `S` to upper case.

---

#### Input

The input will be a single line containing a string representing the sentence `S`.

---

#### Output

The output should be a single line containing a string, obtained by changing all letters of the first word in the sentence `S` to upper case.

---

#### Explanation

For example, if the given sentence is ` S = ""Python is a programming language.""`,

- The words in the sentence **""Python is a programming language""** are **""Python""**, **""is""**, **""a""**, **""programming""** and **""language.""**.
- The first word in the sentence **""Python is a programming language""** is **""Python""**.
- The new sentence after changing all letters of the first word **""Python""** in the given sentence to upper case is **""PYTHON is a programming language.""**.

The output should be **PYTHON is a programming language.**.

Solution Code:sentence = input()

first_space_index = 0
for char in sentence:
 if char == "" "":
 break
 first_space_index = first_space_index + 1

upper_case_word = sentence[:first_space_index].upper()
new_sentence = upper_case_word + sentence[first_space_index:]

print(new_sentence)"
312ad2b5-6eb7-4062-8aeb-b8307ede5014,"Given a number `N`, write a program that reads `N` inputs and prints the first **Even** number among the `N` inputs.

---

#### Input

The first line of input contains an integer representing `N`.
The next `N` lines of input contain integers.

---

#### Output

The output should be a single line containing an integer that is the first **Even** number among the given `N` inputs.

---

#### Explanation

For example, if the given number is `N = 6`,

- The given **6** numbers are,

```
3
5
4
6
1
2
```
- Even numbers in the given numbers are **4, 6,** and **2**
- The first even number among the given numbers is **4**.

The output should be **4**.

Solution Code:n = int(input())

for i in range(n):
 each_number = int(input())
 is_even = (each_number % 2 == 0)
 
 if is_even:
 print(each_number)
 break"
c330c34b-cc40-41ef-85f2-df61f5382101,"Write a program to find the sum of odd numbers in first `N` natural numbers.

---

#### Input

The input is an integer `N`.

---

#### Output

The output should be an integer containing the sum of odd numbers up to the given number.

---


#### Explanation

In the given example sum of odd numbers less than `N = 10` are

total = 1 + 3 + 5 + 7 + 9

So, the output should be `25`.

Solution Code:N = int(input())
sum_odd = 0
for i in range(1,N+1) :
    if i%2 != 0  :
        sum_odd = sum_odd + i
print(sum_odd)"
f4c73ed6-1e67-496e-8fdc-fea0245c7269,"Given an integer `N`, write a program to find if the given number is a composite number or not. If it is composite, print `True` or else print `False`.

<MultiLineNote>
Composite numbers are numbers that have more than two factors.

</MultiLineNote>

---

#### Input

The first line of input is an integer `N`.

---

#### Output

The output should be `True` or `False`.

---



#### Explanation

In the given example, `12` is a composite number as it can be divisible by `1, 2, 3, 4, 6, 12`.

Therefore, the output should be `True`.

Solution Code:n=int(input())
count=0
for i in range(2, n):
    if n%i ==0:
        count+=1
if count>=1:
    print(""True"")
else:
    print(""False"")  "
f2bf60b7-1953-4b01-ac56-ad92c16b6308,"Write a program to find the sum of even numbers in first `N` natural numbers.

---

#### Input

The input is an integer `N`.

---

#### Output

The output should be an integer containing the sum of even numbers upto the given number.

---


#### Explanation

In the given example `N = 5`, the even natural numbers below `5` are `2, 4` 

Then total = 2 + 4

So, the output should be `6`.

Solution Code:N = int(input())

count = 0

for i in range(1, N+1):
  if (i % 2 == 0):
    count = count + i
print(count) "
1c6fdb83-70f9-4ce8-b3e6-9c1362d2de71,"Given a number `N`, write a program to print all the **Prime Numbers** from **1** to `N`.

<MultiLineNote>
A **Prime Number** is a positive integer greater than **1** that has no factors other than **1** and itself.
</MultiLineNote>

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should contain the **Prime Numbers** from **1** to `N`, each on a new line.

---

#### Explanation

For example, if the given number is `N = 10`,

- The numbers from **1** to **10** are **1, 2, 3, 4, 5, 6, 7, 8, 9,** and **10**.
- The numbers that has no factors other than **1** and itself from **1** to **10** are **2, 3, 5,** and **7**.
  The output should be

```
2
3
5
7
```

Solution Code:n = int(input())

for number in range(2, n+1):
 no_of_factors = 0
 for i in range(2, number):
 if (number % i) == 0:
 no_of_factors = no_of_factors + 1

 if no_of_factors == 0:
 print(number)"
73c1eb39-0601-49db-bbd6-129ddea9a8de,"Given two numbers `M` and `N`, write a program to print the sum of the **Prime Numbers** from `M` to `N`.

<MultiLineNote>
A **Prime Number** is a positive integer greater than **1** that has no factors other than **1** and itself.
</MultiLineNote>

---

#### Input

The first line of input contains an integer representing `M`.
The second line of input contains an integer representing `N`.

---

#### Output

The output should be a single line containing an integer that is the sum of the **Prime Numbers** from `M` to `N`.

---

#### Explanation

For example, if the given numbers are `M = 3` and `N = 7`,

- The numbers in the range **3** and **7** are **3**, **4**, **5**, **6** and **7**.

- The numbers that has no factors other than **1** and itself from **3** to **7** are **3**, **5** and **7**.
- The sum of the numbers that has no factors other than **1** and itself from **3** to **7** is **15**. (`3 + 5 + 7 = 15`)

The output should be **15**.

Solution Code:m = int(input())
n = int(input())

sum_of_prime_numbers = 0

for i in range(m, n + 1):
 factors = 0

 for j in range(2, i):
 if i % j == 0:
 factors = factors + 1
 
 if factors == 0:
 sum_of_prime_numbers = sum_of_prime_numbers + i

print(sum_of_prime_numbers)"
f5ce6497-751b-4dbc-a159-12a9a5865f93,"Given a string of length N, made up of only uppercase characters &#x27;R&#x27; and &#x27;G&#x27;, where &#x27;R&#x27; stands for Red and &#x27;G&#x27; stands for Green. Find out the minimum number of characters you need to change to make the whole string of the same colour.<hr><b>Input</b><br/><br/>The input will be a single line containing a string.<hr><b>Output</b><br/><br/>The output should be single line containing the integer representing the minimum number of characters you need to change to make the whole string of the same colour.<hr><b>Explanation</b><br/><br/>For example, if string is &quot;GGGGGGR&quot; . We need to change only the last character to &#x27;G&#x27; to make the string same-coloured.then output is 1.

Solution Code:word = input()
G = 0
R = 0

for i in range(len(word)):
    if(word[i] == ""G""):
        G = (G + 1)
    elif(word[i] == ""R""):
        R = (R + 1)
if (R > G):
    print(G)
else:
    print(R)"
43712c9f-82b1-400f-9580-5bc77e8bb496,"Given a string and `N` indices, where `N` is the length of the string. Write a program to print the string after shuffling the characters in the order of the given `N` indices.

---

#### Input

The first line of input will contain a string.
The next N lines will contain an integer on each line.

---

#### Output

The output should be a single line containing the shuffled string.

---

#### Explanation

For example, if the given string is `goindc`,

- The length of the string is **6**.
- The given **6** indices are **5**, **1**, **4**, **2**, **3** and **0**.
- The character present at index **5** is **c**, at index **1** is **o**, at index **4** is **d**, at index **2** is **i**, at index **3** is **n** and at index **0** is **g**.
- The shuffled string is **coding**.

The output should be **coding**.

Solution Code:word = input()

len_of_word = len(word)

shuffled_word = """"
for i in range(len_of_word):
 index = int(input())
 shuffled_word = shuffled_word + word[index]

print(shuffled_word)"
4625d9a3-e6ca-4054-abae-a566a42d837b,"Given a word, write a program that prints the letters of the word on `N` lines as shown in the sample output, where `N` is the length of the word.

---

#### Input

The input will be a single line containing a string.

---

#### Output

The output should be `N` lines containing letters of the word as shown in the sample output.

---

#### Explanation

For example, if the given word is `Rahul`,

- The length of the word is **5**.
- The first line should contain the first letter **R**.
- The second line should contain the first two letters **Ra**.
- The third line will contain the first three letters **Rah**
- The fourth line will contain the first four letters **Rahu**
- The fifth line will contain all five letters **Rahul**

The output should be,

```
R
Ra
Rah
Rahu
Rahul
```

Solution Code:word = input()

len_of_word = len(word)
for index in range(1, len_of_word+1):
 print(word[:index])"
972b42f4-c10e-46c0-b747-e5de5b3e9f46,"Given a number `N`, write a program to find the count of **0**'s in `N`.

Print **Count of zeroes is greater than three** if there are more than three **0**'s in the given number. Otherwise, print **Count of zeroes is not greater than three**.

---

#### Input

The input will be a single line containing an integer representing `N`.

---

#### Output

The output should be a single line containing a string. **Count of zeroes is greater than three** should be printed if there are more than three **0**'s in the given number. Otherwise, **Count of zeroes is not greater than three** should be printed.

---

#### Explanation

For example, if the given number is `N = 1030800`,

- The digits in the given number **1030800** are **1, 0, 3, 0, 8, 0** and **0**.
- Number of zeroes in the given number `N` are **4**.
- There are more than **3** zeros (`0`) in the given number `N`. (`4 > 3`).

The output should be **Count of zeroes is greater than three**, as the given number has more than three **0**'s.


Solution Code:n = input()

zeroes_count = 0

for each_digit in n:
    if each_digit == ""0"":
        zeroes_count = zeroes_count + 1
        
if zeroes_count > 3:
    print(""Count of zeroes is greater than three"")
else:
    print(""Count of zeroes is not greater than three"")"
929b8c08-23c4-43e8-bf6e-60fef6254340,"Given a string and `N` indices, where `N` is the length of the string. Write a program to print the character of the string present at each index of the given `N` indices.

---

#### Input

The first line of input contains a string.
The next `N` lines will contain an integer on each line.

---

#### Output

The output should be `N` lines containing character of the string present at the each index of the given `N` indices as shown in the sample output.

---

#### Explanation

For example, if the given string is `tarc`,

- The length of the string is **4**.
- The given **4** indices are **3**, **1**, **2**, **0**.
- The character present at index **3** is **c**, at index **1** is **a**, at index **2** is **r** and at index **0** is **t**.

The output should be,

```
c
a
r
t
```


Solution Code:s = input()

len_of_s = len(s)

for each_row in range(len_of_s):
    index = int(input())

    print(s[index])"
19d67aa9-488e-4c8f-af35-537f07bd2791,"Given a string, write a program to move all the numbers in it to its end.<hr><b>Input</b><br/><br/>The input will contain a string A.<hr><b>Output</b><br/><br/>The output should contain a string after moving all the numbers in it to its end.<hr><b>Explanation</b><br/><br/>For example, if the given string A is &quot;1good23morning456,&quot; the output should be &quot;goodmorning123456,&quot; as it contains numbers at the end.

Solution Code:given_str = input() 
characters = """"
Integers  = """"
for each_char in given_str:
    if each_char.isdigit():
        Integers+=each_char
    else:
        characters+=each_char
New_str = characters+Integers
print(New_str)"
2ad93772-9988-4bf1-8462-5d81f5c7a157,"For this problem, the prefilled code will contain two MxN matrices. Write a program to add the given two matrices.<br/>To add two matrices, just add the corresponding entries, and place this sum in the corresponding position in the result matrix.<hr><b>Input</b><br/><br/>The first line of input will contain two space-separated integers, denoting the M and N.
The next M following lines will contain space-separated integers, denoting the elements of each list for first matrix.
The next M following lines will contain space-separated integers, denoting the elements of each list for second matrix.<hr><b>Output</b><br/><br/>The output should be M lines.<br/>Each line should contain a row in the matrix as a list after adding two matrices.<hr><b>Explanation</b><br/><br/>For example, if the given M is 3 and N is 3, read the inputs for first matrix in the next three lines. If the numbers for the first matrix are the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">1 2 3
10 20 30
5 10 15
</code></pre><br/>Read the inputs for second matrix in the next three lines. If the numbers for the second matrix are the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">2 4 6
11 22 33
7 14 21
</code></pre><br/>By adding the elements at the same location in both the matrices will give the required matrix. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[3, 6, 9]
[21, 42, 63]
[12, 24, 36]
</code></pre>

Solution Code:def add_two_matrices(first_matrix, second_matrix, m, n):
 result_matrix = []
 for i in range(m):
 row_result = []
 for j in range(n):
 value = first_matrix[i][j] + second_matrix[i][j]
 row_result.append(value)
 result_matrix.append(row_result)
 return result_matrix


def convert_string_to_int(list_a):
 new_list = []
 for item in list_a:
 num = int(item)
 new_list.append(num)
 return new_list


def read_matrix_inputs(m):
 num_list = []
 for i in range(m):
 list_a = input().split()
 list_a = convert_string_to_int(list_a)
 num_list.append(list_a)
 return num_list


m, n = input().split()
m, n = int(m), int(n)

first_matrix = read_matrix_inputs(m)
second_matrix = read_matrix_inputs(m)

result_matrix = add_two_matrices(first_matrix, second_matrix, m, n)
for row in result_matrix:
 print(row)"
2e2ea9a8-ccaa-4585-9115-3773977a92be,"For this problem, the prefilled code will contain an MxN matrix. Write a program to print the maximum, minimum and sum of all elements in the matrix.<hr><b>Input</b><br/><br/>The first line of input will contain two space-separated integers, denoting the M and N.<br/>The next M following lines will contain N space-separated integers, denoting the elements of each list.<hr><b>Output</b><br/><br/>The first line of output should be the maximum of all elements in the matrix.<br/>The second line of output should be the minimum of all elements in the matrix.<br/>The third line of output should be the sum of all elements in the matrix.<hr><b>Explanation</b><br/><br/>For example, if the given M is 3 and N is 3, read the inputs in the next three lines. If the numbers given in the next three lines are the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">1 2 3
10 20 30
5 10 15
</code></pre><br/>The first line of output should print the maximum of all the elements in the matrix, which is 30.<br/>The second line of output should print the minimum of all the elements in the matrix, which is 1.<br/>The third line of output should print the sum of all the elements in the matrix, which is 96.<br/>So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">30
1
96
</code></pre>

Solution Code:def convert_string_to_int(list_a):
 new_list = []
 for item in list_a:
 num = int(item)
 new_list.append(num)
 return new_list

m, n = input().split()
m, n = int(m), int(n)

num_list = []
for i in range(m):
 list_a = input().split()
 list_a = convert_string_to_int(list_a)
 num_list.append(list_a)

# Maintain row-wise maximum, minimum and sum in these lists
row_max = []
row_min = []
row_sum = []
for row in num_list:
 row_max.append(max(row))
 row_min.append(min(row))
 row_sum.append(sum(row))
print(max(row_max))
print(min(row_min))
print(sum(row_sum))"
74220cb9-a6ed-4377-b9be-b576fd229f5f,"For this problem, the prefilled code will contain an MxN matrix. Write a program to replace all elements of a given value with a new value.<hr><b>Input</b><br/><br/>The first line of input will contain two space-separated integers, denoting the M and N.<br/>The next M following lines will contain N space-separated integers, denoting the elements of each list.<br/>The next line of input will contain two space-separated integers, denoting the first value to be replaced by the second one.<hr><b>Output</b><br/><br/>The output should be MxN matrix, with the value replaced at all places.<hr><b>Explanation</b><br/><br/>For example, if the given M is 3 and N is 3, read the inputs in the next three lines. If the numbers given in the next three lines are the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">1 2 3
10 20 30
5 10 15
</code></pre><br/>If the given values in the next line are &quot;10 8&quot;, print the matrix by replacing the value 10 which is in second and third row.<br/>So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[1, 2, 3]
[8, 20, 30]
[5, 8, 15]
</code></pre>

Solution Code:def replace_old_value_with_new_value(matrix, old_value, new_value):
 updated_matrix = []
 for row in matrix:
 updated_row = row
 for i in range(len(row)):
 if row[i] == old_value:
 updated_row[i] = new_value
 updated_matrix.append(updated_row)
 return updated_matrix

def convert_string_to_int(list_a):
 new_list = []
 for item in list_a:
 num = int(item)
 new_list.append(num)
 return new_list


m, n = input().split()
m, n = int(m), int(n)
num_list = []

for i in range(m):
 list_a = input().split()
 list_a = convert_string_to_int(list_a)
 num_list.append(list_a)

values = input().split()
old_value, new_value = convert_string_to_int(values)

updated_matrix = replace_old_value_with_new_value(num_list, old_value, new_value)
for row in updated_matrix:
 print(row)"
8434da40-3a85-4b80-bd1a-b54eadb69255,"For this problem, the prefilled code will contain an MxN matrix. Write a program to print the maximum, minimum and sum for each row in the matrix.<hr><b>Input</b><br/><br/>The first line of input will contain two space-separated integers, denoting the M and N.<br/>The next M following lines will contain N space-separated integers, denoting the elements of each list.<hr><b>Output</b><br/><br/>The first line of output should contain the list of the maximum number in each row.<br/>The second line of output should contain the list of minimum number in each row.<br/>The third line of output should contain the list of the sum of each row.<hr><b>Explanation</b><br/><br/>For example, if the given M is 3 and N is 3, read the inputs in the next three lines. If the numbers given in the next three lines are the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">1 2 3
10 20 30
5 10 15
</code></pre><br/>The first line of output should contain the list of maximum numbers in each row, which are (3, 30, 15).<br/>The second line of output should contain the list of minimum numbers in each row, which are (1, 10, 5).<br/>The third line of output should contain the list of sums of each row, which are (6, 60, 30).<br/>So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[3, 30, 15]
[1, 10, 5]
[6, 60, 30]
</code></pre>

Solution Code:def print_max_min_sum_for_row_wise(num_list):
 max_list = []
 min_list = []
 sum_list = []
 for each_row in num_list:
 max_list.append(max(each_row))
 min_list.append(min(each_row))
 sum_list.append(sum(each_row))

 print(max_list)
 print(min_list)
 print(sum_list)


def convert_string_to_int(list_a):
 new_list = []
 for item in list_a:
 num = int(item)
 new_list.append(num)
 return new_list


m, n = input().split()
m, n = int(m), int(n)
num_list = []

for i in range(m):
 list_a = input().split()
 list_a = convert_string_to_int(list_a)
 num_list.append(list_a)

print_max_min_sum_for_row_wise(num_list)"
e9f3eca0-06b0-4cc2-9eac-cc3799b95f50,"For this problem, the prefilled code will contain a dictionary. Write a program to remove a key.<hr><b>Input</b><br/><br/>The input will be a single line containing a string, denoting the key to be removed.<hr><b>Output</b><br/><br/>The output should be a single line containing the dictionary without the given key and its value.<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;Vani&quot;, your code should print the dictionary without the key-value pair of &quot;Vani&quot; So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">{'Ram': 'Cricket', 'Naresh': 'Football', 'Rahim': 'Cricket', 'Deepak': 'Boxing'}
</code></pre>

Solution Code:students_dict = {
 ""Ram"": ""Cricket"",
 ""Naresh"": ""Football"",
 ""Vani"": ""Tennis"",
 ""Rahim"": ""Cricket"",
 ""Deepak"": ""Boxing""
}

key = input()
del students_dict[key]
print(students_dict)"
a8dc1c0c-3cbf-4391-8014-05555eaff26e,"You are given a sequence of student names Ni and their ids Di (corresponding to the student at the same index in Ni).<br/>Write a program to print the student name and his ID from Ni and Di in alphabetical order of the name.<hr><b>Input</b><br/><br/>The first line of input will contain comma-separated strings, denoting the student names (Ni).<br/>The second line of input will contain comma-separated strings, denoting the corresponding student ids (Di).<hr><b>Output</b><br/><br/>The output should be M lines equal to the number of students.<br/>Each line in the output contains student name and his ID separated by a space in alphabetical order of the name.<hr><b>Explanation</b><br/><br/>For example, if the given student names sequence and IDs sequence are the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">Anand,Ramesh,Kiran
ID102,ID101,ID100
</code></pre><br/>Your code should print the student name and his ID from Ni and Di in alphabetical order of the name. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">Anand ID102
Kiran ID100
Ramesh ID101
</code></pre>

Solution Code:def convert_to_key_value_pairs(keys_list, values_list):
 dict_a = {}
 number_of_keys = len(keys_list)
 for i in range(number_of_keys):
 key = keys_list[i]
 value = values_list[i]
 dict_a[key] = value
 return dict_a


student_names = input().split("","")
student_ids = input().split("","")

student_details = convert_to_key_value_pairs(student_names, student_ids)
student_details_items = student_details.items()
student_details = sorted(student_details_items)
for item in student_details:
 print(*item)"
70a29bef-4376-4ac0-a0e0-2b606e966097,"Write a program to combine two dictionaries updating values for common keys.<hr><b>Input</b><br/><br/>The first line of input will contain space-separated strings, denoting the keys of first dictionary.<br/>The second line of input will contain space-separated integers, denoting the values of first dictionary.<br/>The third line of input will contain space-separated strings, denoting the keys of second dictionary.<br/>The fourth line of input will contain space-separated integers, denoting the values of second dictionary.<hr><b>Output</b><br/><br/>The output should be a single line containing the list of tuples of dictionary items with all the key-value pairs of two dictionaries sorted in ascending order by key.<hr><b>Explanation</b><br/><br/>For example, if the given inputs are the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">Akhil Ram Raju Mohan
1 10 15 18
Gopal Krishna Vani Ram
21 22 19 20
</code></pre><br/>Your code should combine the two dictionaries and if keys are in both dictionaries then the combined dictionary should contain the value of second dictionary. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[('Akhil', 1), ('Gopal', 21), ('Krishna', 22), ('Mohan', 18), ('Raju', 15), ('Ram', 20), ('Vani', 19)]
</code></pre>

Solution Code:def convert_string_to_int(str_num_list):
 int_list = []
 for str_num in str_num_list:
 num = int(str_num)
 int_list.append(num)
 return int_list


def convert_to_key_value_pairs(keys_list, values_list):
 dict_a = {}
 number_of_keys = len(keys_list)
 for i in range(number_of_keys):
 key = keys_list[i]
 value = values_list[i]
 dict_a[key] = value
 return dict_a


dict_a_keys = input().split()
dict_a_values = input().split()
dict_b_keys = input().split()
dict_b_values = input().split()

dict_a_values = convert_string_to_int(dict_a_values)
dict_b_values = convert_string_to_int(dict_b_values)

student_details_1 = convert_to_key_value_pairs(dict_a_keys, dict_a_values)
student_details_2 = convert_to_key_value_pairs(dict_b_keys, dict_b_values)

student_details_1.update(student_details_2)
student_details = student_details_1.items()
student_details = sorted(student_details)
print(student_details)"
ad0c49dd-4fdb-41e6-968b-6e198483c31a,"For this problem, the prefilled code will contain a dictionary. Write a program to update the value of a given key.<hr><b>Input</b><br/><br/>The input will be a single line containing the strings, separated by space, denoting the key-value pair.<hr><b>Output</b><br/><br/>The output should be a single line containing the dictionary with the updated value to the given key.<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;Rahim Hockey&quot;, your code should update the key &quot;Rahim&quot; with the value &quot;Hockey&quot;. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">{'Ram': 'Cricket', 'Naresh': 'Football', 'Vani': 'Tennis', 'Rahim': 'Hockey', 'Deepak': 'Boxing'}
</code></pre>

Solution Code:students_dict = {
 ""Ram"": ""Cricket"",
 ""Naresh"": ""Football"",
 ""Vani"": ""Tennis"",
 ""Rahim"": ""Cricket"",
 ""Deepak"": ""Boxing""
}

key, value = input().split()
students_dict[key] = value
print(students_dict)"
b534f448-85e4-44a2-9f68-37e846cf76ca,"A college is conducting its annual sports meet. So they need data of students with the sport they play. Each student can participate in only one sport.<br/>For this problem, the prefilled code will contain a dictionary. Write a program to add a list of tuples to the dictionary as key-value pairs.<br/>If a student&#x27;s name appears more than once, update the latest sport entry.<hr><b>Input</b><br/><br/>The first line of input will contain an integer N, denoting the number of key-value pairs.<br/>The next N lines will contain space-separated strings, denoting key followed by the value.<hr><b>Output</b><br/><br/>The output should be a single line containing the dictionary with the added key-value pairs.<hr><b>Explanation</b><br/><br/>For example, if the given N is 3, read the inputs in the next three lines, if the given three inputs are the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">Gopal Hockey
Jyothi Cricket
Akhil Football
</code></pre><br/>Your code should print the dictionary with all the key-value pairs. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">{'Ram': 'Cricket', 'Naresh': 'Football', 'Vani': 'Tennis', 'Rahim': 'Cricket', 'Gopal': 'Hockey', 'Jyothi': 'Cricket', 'Akhil': 'Football'}
</code></pre>

Solution Code:students_dict = {
 ""Ram"": ""Cricket"",
 ""Naresh"": ""Football"",
 ""Vani"": ""Tennis"",
 ""Rahim"": ""Cricket""
}

n = int(input())
for i in range(n):
 key_value_pair = input().split()
 key, value = key_value_pair[0], key_value_pair[1]
 students_dict[key] = value

print(students_dict)"
dee9d007-db0b-47aa-8c81-3c0c2039582c,"For this problem, the prefilled code will contain a dictionary. Write a program to remove N key-value pairs from the dictionary if they present.<hr><b>Input</b><br/><br/>The input will be a single line containing space-separated strings, denoting the keys.<hr><b>Output</b><br/><br/>The output should be a single line containing the dictionary without the given key-value pairs.<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;a d g&quot;, your code should print the dictionary without key-value pairs of (a, d, g). So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">{'b': 98, 'c': 99, 'e': 101, 'f': 102, 'h': 104}
</code></pre>

Solution Code:alphabets = {
 'a': 97,
 'b': 98,
 'c': 99,
 'd': 100,
 'e': 101,
 'f': 102,
 'g': 103,
 'h': 104,
}

keys = input().split()
for key in keys:
 if key in alphabets:
 del alphabets[key]

print(alphabets)"
51f40efe-6760-421f-b150-24c3bee7fbb6,"Write a program to create a dictionary that contains keys as numbers from 1 to N and values are square of keys.<hr><b>Input</b><br/><br/>The input will be a single line containing an integer (N).<hr><b>Output</b><br/><br/>The output should be a single line containing the dictionary with key-value pairs from 1 to N.<hr><b>Explanation</b><br/><br/>For example, if the given N is 3, your code should print a dictionary with keys (1, 2, 3) and values (1, 4, 9). So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">{1: 1, 2: 4, 3: 9}
</code></pre>

Solution Code:n = int(input())

square_dict = {}
for num in range(1, n+1):
 square_dict[num] = num*num

print(square_dict)"
8cf7201a-05a6-47a5-a8a9-41967f30a46c,"Write a program to print the maximum and minimum of all the values at index zero and index one in the list of tuples.<hr><b>Input</b><br/><br/>The first line of input will contain a positive integer (N).<br/>The next N lines will contain space-separated two integers, denoting elements of each tuple.<hr><b>Output</b><br/><br/>The first line of output should contain a tuple with the maximum and minimum value at index zero.<br/>The second line of output should contain a tuple with the maximum and minimum value at index one.<hr><b>Explanation</b><br/><br/>For example, if the given N is 3, read the inputs in the next three lines. If the inputs in the next three lines are the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">1 5
3 2
5 8
</code></pre><br/>As 5 is the maximum and 1 is the minimum in the values at index zero and 8 is the maximum and 2 is the minimum in the values at index one. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">(5, 1)
(8, 2)
</code></pre>

Solution Code:n = int(input())
num_list = []
zero_index_list = []
first_index_list = []

for i in range(n):
 values_list = input().split()
 first_value = int(values_list[0])
 zero_index_list.append(first_value)
 second_value = int(values_list[1])
 first_index_list.append(second_value)

zero_index_min_max_tuple = (max(zero_index_list), min(zero_index_list))
first_index_min_max_tuple = (max(first_index_list), min(first_index_list))

print(zero_index_min_max_tuple)
print(first_index_min_max_tuple)"
b123307f-c2ae-4ccd-8994-7d5c77654420,"Write a program to read N lines of inputs and create a nested list with each line as a list.<hr><b>Input</b><br/><br/>The first line of input will contain a positive integer N.<br/>The next N lines will contain space-separated integers.<hr><b>Output</b><br/><br/>The output should be a single line containing the nested list.<hr><b>Explanation</b><br/><br/>For example, if the given N is 3, read the inputs in the next three lines.<br/>If the given three strings are as the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">1 2 3 4
10 20 30
5 10 15 20
</code></pre><br/>Your code should print the nested list with each line of input as a list in it.<br/>So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[[1, 2, 3, 4], [10, 20, 30], [5, 10, 15, 20]]
</code></pre>

Solution Code:def convert_string_to_int(list_a):
 new_list = []
 for item in list_a:
 num = int(item)
 new_list.append(num)
 return new_list


n = int(input())
num_list = []

for i in range(n):
 list_a = input().split()
 list_a = convert_string_to_int(list_a)
 num_list.append(list_a)

print(num_list)"
48afc313-2f0a-4c71-a204-109b15996f58,"Write a program to create a list with maximum values in each list.<hr><b>Input</b><br/><br/>The first line of input will contain a positive integer N.<br/>The next N lines will contain space-separated integers.<hr><b>Output</b><br/><br/>The output should be a single line containing the list of maximum values in each list.<hr><b>Explanation</b><br/><br/>For example, if the given N is 3, read the inputs in the next three lines.<br/>If the given three strings are as the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">1 2 3 4
10 20 30
5 10 15 20
</code></pre><br/>Your code should print the list of maximum values in each list.<br/>So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[4, 30, 20]
</code></pre>

Solution Code:def convert_string_to_int(list_a):
 new_list = []
 for item in list_a:
 num = int(item)
 new_list.append(num)
 return new_list


n = int(input())
max_list = []

for i in range(n):
 list_a = input().split()
 list_a = convert_string_to_int(list_a)
 max_num = max(list_a)
 max_list.append(max_num)

print(max_list)"
87114f28-b11e-4490-9cd0-11d7c5938249,"Write a program to convert the list of lists to a list of tuples.<hr><b>Input</b><br/><br/>The first line of input will contain an integer (N), denoting the number of lists.<br/>The next N lines will contain space-separated integers.<hr><b>Output</b><br/><br/>The output should be a single line containing a list with N tuples in the order of inputs given.<hr><b>Explanation</b><br/><br/>For example, if the given N is 3, read the inputs in the next three lines and print them as a list of tuples.<br/>If the given three strings are as the following.<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">1 2 3 4
10 20 30
5 10 15 20
</code></pre><br/>Your code should print each line of input as a tuple, such that making a list of three tuples. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[(1, 2, 3, 4), (10, 20, 30), (5, 10, 15, 20)]
</code></pre>

Solution Code:def convert_nested_list_to_list_of_tuples(nested_list):
 tuples_list = []
 for each_list in nested_list:
 tuple_a = tuple(each_list)
 tuples_list.append(tuple_a)
 return tuples_list


def convert_string_to_int(list_a):
 new_list = []
 for item in list_a:
 num = int(item)
 new_list.append(num)
 return new_list


n = int(input())
num_list = []

for i in range(n):
 list_a = input().split()
 list_a = convert_string_to_int(list_a)
 num_list.append(list_a)


tuples_list = convert_nested_list_to_list_of_tuples(num_list)
print(tuples_list)"
dd046779-e78a-4ed0-8ead-1d0600033a4e,"Given two strings, name and sport. Write a program using string formatting to concatenate the name followed by the message &quot;is playing&quot; and followed by the sport.<hr><b>Input</b><br/><br/>The first line of input will contain a string.<br/>The second line of input will contain a string.<hr><b>Output</b><br/><br/>The output should be a single line concatenating the message with the given inputs.<hr><b>Explanation</b><br/><br/>For example, if the given name is &quot;Raju&quot; and the sport is &quot;cricket&quot;, your code should print the message concatenating the name and sport. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">Raju is playing Cricket
</code></pre>

Solution Code:str_a = input()
str_b = input()
message = ""{arg_1} is playing {arg_2}""
print(message.format(arg_1=str_a, arg_2=str_b))"
7012ca9d-642d-4e60-a1c5-133735bd4bd6,"Write a program that reads the comma-separated integers and a positive integer `D`, then rotates the numbers `D` times to the left, and prints the rotated list.

---

#### Input  
The first line of input will be comma-separated integers.

The second line of input will be a positive integer representing `D`.

---

#### Output  
The output should be a single line containing a rotated **list**.

---

#### Explanation  
For example, if the given comma-separated integers are **`1,2,3,4,5`** and the positive integer `D = 2`,
<img src=""https://s3.ap-south-1.amazonaws.com/new-assets.ccbp.in/frontend/content/programming-foundations/Image+Pasted+at+2023-3-30+14-06.png"" alt=""list rotation"">

After rotating the comma-separated integers **2** times by left, the elements are  `3`, `4`, `5`, `1`, and `2`.

So, the output should be,

```
 [3, 4, 5, 1, 2]
```

Solution Code:def convert_string_to_int(str_num_list):
    new_list = []
    for item in str_num_list:
        num = int(item)
        new_list.append(num)
    return new_list

str_num_list = input().split("","")
rotate_times = int(input())

int_list = convert_string_to_int(str_num_list)
len_of_list = len(int_list)
val = rotate_times % len_of_list

first_part = int_list[0:val]
second_part = int_list[val:]
second_part.extend(first_part)
print(second_part)"
b62bd3e9-1943-4111-a9ae-854e3dc28c1b,"Write a program to remove the elements other than numbers in the list.<hr><b>Input</b><br/><br/>The input will be a single line containing comma-separated strings.<hr><b>Output</b><br/><br/>The output should be a single line containing the list of numbers.<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;1,2,3,#,4&quot;, as there is character # in the given string. Your code should remove such characters and print a list with only numbers. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[1, 2, 3, 4]
</code></pre>

Solution Code:list_a = input().split("","")

num_list = []
for item in list_a:
 is_digit = item.isdigit()
 if is_digit:
 number = int(item)
 num_list.append(number)

print(num_list)"
fae6c6a7-6817-47e6-b4a0-318633580cdf,"For this problem, the prefilled code will contain a list. Write a program to print N greatest numbers in a list.<hr><b>Input</b><br/><br/>The input will be a single line containing a positive integer (N).<hr><b>Output</b><br/><br/>The output should be a single line containing a string of N greatest numbers in ascending order.<hr><b>Explanation</b><br/><br/>For example, if the given N is 2, the output should be &quot;8 20&quot;, as the two greatest numbers in the list are 8 and 20.

Solution Code:list_a = [5, 20, 3, 7, 6, 8]
n = int(input())

list_a = sorted(list_a)
list_len = len(list_a)
res = list_a[list_len - n:]
for i in range(n):
 res[i] = str(res[i])

print("" "".join(res))"
c1ed2f6a-7025-4794-b3ed-e54597065112,"Write a program to check if all the elements in a given list are same.<hr><b>Input</b><br/><br/>The input will be a single line containing space-separated integers.<hr><b>Output</b><br/><br/>The output should be a single line containing either &quot;True&quot; or list of unique elements sorted in ascending order.<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;45 45 45 45&quot;, as all the numbers are 45, the output should be &quot;True&quot;.<br/><br/>Whereas, if the given string is &quot;45 20 45 45 20&quot;, as all the numbers are not same, your code should print the list of unique elements sorted in ascending order. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[20, 45]
</code></pre>

Solution Code:def convert_string_to_int(list_a):
 new_list = []
 for item in list_a:
 num = int(item)
 new_list.append(num)
 return new_list


num_list = input().split()
num_list = convert_string_to_int(num_list)

num_set = set(num_list)
if len(num_set) == 1:
 print(""True"")
else:
 num_list = list(num_set)
 num_list.sort()
 print(num_list)"
18bdfb2d-9323-4818-9e1e-9c6293e6dbda,"Write a program to find the missing numbers from 1 to the maximum number in the list.<hr><b>Input</b><br/><br/>The input will be a single line containing space-separated integers.<hr><b>Output</b><br/><br/>The output should be a single line containing the list of missing numbers sorted in ascending order.<hr><b>Explanation</b><br/><br/>For example, if the given string is &quot;1 2 3 5 6 7&quot;, your code should print the list of missing numbers from 1 to 7. So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">[4]
</code></pre>

Solution Code:def convert_string_to_int(list_a):
 new_list = []
 for item in list_a:
 num = int(item)
 new_list.append(num)
 return new_list


num_list = input().split()
num_list = convert_string_to_int(num_list)
maximum = max(num_list)
num_set = set(num_list)

first_n_num_set = set(range(1, maximum+1)) # Gives a set with first N natural numbers
missing_num_set = first_n_num_set.difference(num_set)
missing_num_list = list(missing_num_set)
missing_num_list.sort()
print(missing_num_list)"
d8a4af23-5159-4ad8-92fc-4b666cf3d93b,"You are given a square matrix A of dimensions NxN. You need to apply the below given 3 operations on the matrix A.<br/><br/>Rotation: It is represented as R S where S is an integer in {90, 180, 270, 360, 450, ...} which denotes the number of degrees to rotate. You need to rotate the matrix A by angle S in the clockwise direction. The angle of rotation(S) will always be in multiples of 90 degrees.<br/><br/>Update: It is represented as U X Y Z. In initial matrix A (as given in input), you need to update the element at row index X and column index Y with value Z.<br/>After the update, all the previous rotation operations have to be applied to the updated initial matrix.<br/><br/>Querying: It is represented as Q K L. You need to print the value at row index K and column index L of the matrix A. <hr><b>Input</b><br/><br/>The first line contains a single integer N.<br/>Next N lines contain N space-separated integers Aij (i - index of the row, j - index of the column).<br/>Next lines contain various operations on the array. Each operation on each line (Beginning either with R, U or Q).<br/>-1 will represent the end of input.<hr><b>Output</b><br/><br/>For each Query operation print the element present at row index K and colum index L of the matrix in its current state.<hr><b>Explanation</b><br/><br/>For Input:<br/>2<br/>1 2<br/>3 4<br/>R 90<br/>Q 0 0<br/>Q 0 1<br/>R 90<br/>Q 0 0<br/>U 0 0 6<br/>Q 1 1<br/>-1<br/><br/>Initial Matrix<br/>1 2<br/>3 4<br/><br/>For R 90, clockwise rotation by 90 degrees, the matrix will become<br/>3 1<br/>4 2<br/><br/>For Q 0 0, print the element at row index 0 and column index 0 of A, which is 3. <br/>For Q 0 1, print the element at row index 0 and column index 1 of A, which is 1. <br/><br/>Again for R 90, clockwise rotation by 90 degrees, the matrix will become<br/>4 3<br/>2 1<br/><br/>For Q 0 0, print the element at row index 0 and column index 0 of A, which is 4. <br/><br/>For U 0 0 6, update the value at row index 0 and column index 0 in the initial matrix to 6. So the updated matrix will be,<br/>6 2<br/>3 4<br/>After updating, we need to rotate the matrix by sum of all rotation angles applied till now(i.e. R 90 and R 90 =&gt; 90 + 90 =&gt; 180 degrees in clockwise direction).<br/>After rotation the matrix will now become<br/>4 3<br/>2 6<br/><br/>Next for Q 1 1, print the element at row index 1 and column index 1 of A, which is 6. <br/>So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">3
1
4
6
</code></pre>

Solution Code:def read_matrix(n):
    matrix = []
    for i in range(n):
        row = list(map(int, input().split()))
        matrix.append(row)
    return matrix

def single_rotate_clockwise(matrix):
    n = len(matrix[0])
    temp_matrix = []
    for i in range(n):
        column = []
        for row in matrix:
            column.append(row[i])
        temp_matrix.append(column[::-1])
    return temp_matrix

def rotate_matrix(matrix, degrees):
    n = len(matrix[0])
    rotations = (degrees // 90) % 4
    for r in range(rotations):
        matrix = single_rotate_clockwise(matrix)
    return matrix

def main():
    n = int(input())
    matrix = read_matrix(n)
    original_matrix = matrix
    total_rotation = 0
    while True:
        line = input().split()
        if line[0] == ""-1"":
            break
        elif line[0] == ""R"":
            rotation = int(line[1])
            total_rotation += rotation
            matrix = rotate_matrix(matrix, rotation)
        elif line[0] == ""U"":
            ri, ci, value = int(line[1]), int(line[2]), int(line[3])
            original_matrix[ri][ci] = int(value)
            matrix = rotate_matrix(original_matrix, total_rotation)
        elif line[0] == ""Q"":
            ri, ci = int(line[1]), int(line[2])
            print(matrix[ri][ci])

main()"
ce227c7f-feaf-4989-bee2-62a0599ef3e9,"Given a sentence as input, print all the unique combinations of N words in lexicographical order.<hr><b>Input</b><br/><br/>The first line of input will be containing a sentence.<br/>The second line of input will contain a positive integer.<hr><b>Output</b><br/><br/>The output should be multiple lines, each line containing the unique combination of N words in lexicographical order.<hr><b>Explanation</b><br/><br/>For example, if the given sentence is &quot;apple is a fruit&quot;, and N is 3, the possible unique combination of three words are (a, apple, fruit), (a, apple, is), (a, fruit, is), (apple, fruit, is). So the output should be<br/><pre style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: .85em;margin: 1.2em 0;""><code style=""font-family: Roboto Mono,Lucida Sans Typewriter,Lucida Console,monaco,Courrier,monospace;font-size: inherit;background-color: rgba(228, 237, 255,.5);border-radius: 0px;padding: 1em;display: block;-webkit-text-size-adjust: none;overflow-x: auto;white-space: pre;"">a apple fruit
a apple is
a fruit is
apple fruit is
</code></pre>

Solution Code:def all_unique_combinations(words, n):
    words = sorted(words)
    items = list(range(len(words)))
    old_combinations = [[]]
    new_combinations = []
    # We are considering the combinations of all the numbers which represent
    # indices of the words so that repetitions in the word are properly
    # considered
    for i in range(n):
        new_combinations = []
        for combination in old_combinations:
            for item in items:
                if (combination and item > combination[-1]) or len(combination) == 0:
                    new_combinations.append(combination + [item])
            old_combinations = new_combinations
    word_combinations = []
    for combination in new_combinations:
        word_combination = []
        for index in combination:
            word_combination.append(words[index])
        word_combinations.append(tuple(word_combination))
    return sorted(set(word_combinations))


words = input().split()
n = int(input())
all_combinations = all_unique_combinations(words, n)
for combination in all_combinations:
    print(' '.join(combination))
"